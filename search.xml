<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Eclipse上传项目到GitHub</title>
      <link href="/2019/11/18/eclipse3/"/>
      <url>/2019/11/18/eclipse3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/superxiaolong123/article/details/81189481" target="_blank" rel="noopener">原文链接</a></p><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><ol><li>在 <a href="https://github.com/" target="_blank" rel="noopener">github官网</a> 上注册一个github账号</li><li>eclispe中安装git插件</li></ol><h5 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h5><h6 id="在eclipse中配置user的相关信息"><a href="#在eclipse中配置user的相关信息" class="headerlink" title="在eclipse中配置user的相关信息"></a>在eclipse中配置user的相关信息</h6><p>window-&gt;preferences-&gt;Team-&gt;Git-&gt;Configuration-&gt;UserSettings   点击AddEntry… </p><a id="more"></a><p><img src="/2019/11/18/eclipse3/1.png" alt></p><p>填写完点击OK，再次点击AddEntry… </p><p><img src="/2019/11/18/eclipse3/2.png" alt></p><p>OK–&gt;Apply</p><h6 id="使用git插件为项目创建本地仓库"><a href="#使用git插件为项目创建本地仓库" class="headerlink" title="使用git插件为项目创建本地仓库"></a>使用git插件为项目创建本地仓库</h6><p>1.右击要上传的项目-&gt;Team-&gt;Share Project…-&gt;Git</p><p><img src="/2019/11/18/eclipse3/3.png" alt></p><p>2.向本地仓库提交项目，填写 Commit信息—&gt;右击项目-&gt;Team-&gt;Commit…</p><p><img src="/2019/11/18/eclipse3/4.png" alt></p><p>记得填写提交信息</p><h6 id="在github网站中新建一个仓库-最好与项目名称一致"><a href="#在github网站中新建一个仓库-最好与项目名称一致" class="headerlink" title="在github网站中新建一个仓库(最好与项目名称一致)"></a>在github网站中新建一个仓库(最好与项目名称一致)</h6><p><img src="/2019/11/18/eclipse3/5.png" alt></p><p><img src="/2019/11/18/eclipse3/6.png" alt></p><p><img src="/2019/11/18/eclipse3/7.png" alt></p><h6 id="将本地仓库项目内容推送到远程仓库（github）"><a href="#将本地仓库项目内容推送到远程仓库（github）" class="headerlink" title="将本地仓库项目内容推送到远程仓库（github）"></a>将本地仓库项目内容推送到远程仓库（github）</h6><p>右击项目-&gt;Team-&gt;remote-&gt;push </p><p><img src="/2019/11/18/eclipse3/8.png" alt></p><p><img src="/2019/11/18/eclipse3/9.png" alt></p><h6 id="操作结果"><a href="#操作结果" class="headerlink" title="操作结果"></a>操作结果</h6><p><img src="/2019/11/18/eclipse3/10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis 根据id批量删除的两种方法</title>
      <link href="/2019/11/18/mybatis1/"/>
      <url>/2019/11/18/mybatis1/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://blog.csdn.net/qq_40010745/article/details/81032218" target="_blank" rel="noopener">原文链接</a></p><h6 id="直接传递给mapper-xml-集合-数组形式"><a href="#直接传递给mapper-xml-集合-数组形式" class="headerlink" title="直接传递给mapper.xml  集合/数组形式"></a>直接传递给mapper.xml  集合/数组形式</h6><ol><li>如果传入的是单参数且参数类型是一个List的时候,collection属性值为list</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByLogic</span><span class="params">(List list)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteByLogic"</span>  parameterType = <span class="string">"java.util.List"</span>&gt;</span><br><span class="line">     delete from user where id in</span><br><span class="line">      &lt;foreach collection=<span class="string">"list"</span>  item=<span class="string">"item"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>  &gt;</span><br><span class="line">           #&#123;item&#125;</span><br><span class="line">      &lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>如果传入的是单参数且参数类型是一个array数组的时候,集合collection的属性值为array </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByLogic</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteByLogic"</span>  parameterType = <span class="string">"int"</span>&gt;</span><br><span class="line">     delete from user where id in</span><br><span class="line">&lt;foreach item=<span class="string">"item"</span> collection=<span class="string">"array"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p><strong>直接在service中将数据给分装传递到mapper中</strong><br>    前端封装为以“ , ”为分隔符的id字符串。调用下方工具类。生成数据类型为(‘12’, ‘34’….)形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringUtil.getSqlInStrByStrArray()&lt;BR&gt;</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;Author :  wyp &lt;/P&gt;  </span></span><br><span class="line"><span class="comment"> * &lt;P&gt;Date : 2016年6月15日下午6:14:05&lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;Desc : 数组字符串转换为SQL in 字符串拼接 &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strArray数组字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  SQL in 字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSqlInStrByStrArray</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">StringBuffer temp = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isEmpty(str))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"('')"</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp.append(<span class="string">"("</span>);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNotEmpty(str))&#123;</span><br><span class="line">String[] strArray=str.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">if</span> (strArray != <span class="keyword">null</span> &amp;&amp; strArray.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArray.length; i++) &#123;</span><br><span class="line">temp.append(<span class="string">"'"</span>);</span><br><span class="line">temp.append(strArray[i]);</span><br><span class="line">temp.append(<span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">if</span> (i !=  (strArray.length-<span class="number">1</span>) ) &#123;</span><br><span class="line">temp.append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp.append(<span class="string">")"</span>);</span><br><span class="line"><span class="keyword">return</span> temp.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在mapper中直接使用 <strong>$</strong> 符号接收即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int deleteByLogic(String ids);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteByLogic"</span>  parameterType = <span class="string">"java.util.List"</span>&gt;</span><br><span class="line">     delete from user where id in $&#123;ids&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><h6 id="直接在service中循环调用mapper中的delete方法"><a href="#直接在service中循环调用mapper中的delete方法" class="headerlink" title="直接在service中循环调用mapper中的delete方法"></a>直接在service中循环调用mapper中的delete方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByLogic</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">"deleteByLogic"</span>  parameterType = <span class="string">"int"</span>&gt;</span><br><span class="line">     delete from user where id = #&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将input输入框设置为禁止输入或者可输入</title>
      <link href="/2019/11/18/js10/"/>
      <url>/2019/11/18/js10/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_18374629/article/details/90720589" target="_blank" rel="noopener">原文链接</a></p><h6 id="允许输入"><a href="#允许输入" class="headerlink" title="允许输入"></a>允许输入</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">'test'</span> id=<span class="string">'test'</span> disabled=<span class="string">'disabled'</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//删除指定element的属性，使用原生JS方法</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).removeAttribute(<span class="string">'disabled'</span>);</span><br><span class="line">    <span class="comment">//删除指定element的属性，使用jQuery方法</span></span><br><span class="line">jQuery(<span class="string">'#test'</span>).removeAttr(<span class="string">'disabled'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="禁止输入"><a href="#禁止输入" class="headerlink" title="禁止输入"></a>禁止输入</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">'test'</span> id=<span class="string">'test'</span> disabled=<span class="string">'disabled'</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">// 为指定的element添加指定的属性，使用原生JS方法</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).setAttribute(<span class="string">'disabled'</span>, <span class="string">'disabled'</span>);</span><br><span class="line">   <span class="comment">//为指定的element添加指定的属性，使用jQuery方法</span></span><br><span class="line">jQuery(<span class="string">'#test'</span>).attr(<span class="string">'disabled'</span>, <span class="string">'disabled'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQUERY </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去掉字符串末尾的标点符号/删除空格的方法</title>
      <link href="/2019/11/18/js9/"/>
      <url>/2019/11/18/js9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jb51.net/article/126580.htm" target="_blank" rel="noopener">参考链接</a></p><p>原字符串：<code>Hello World!</code></p><p>目标字符串：<code>Hello World</code></p><h6 id="去掉末尾的标点符号"><a href="#去掉末尾的标点符号" class="headerlink" title="去掉末尾的标点符号"></a>去掉末尾的标点符号</h6><p><strong>方式一：</strong><code>stringObject.slice(start,end)</code></p><p>start : 要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符</p><p>end:要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 start 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello World!'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.slice(<span class="number">0</span>,str.length<span class="number">-1</span>)); <span class="comment">//输出 Hello World</span></span><br></pre></td></tr></table></figure><p><strong>方式二：</strong><code>stringObject.substr(start,length)</code></p><p>start : 必需。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</p><p>length : 可选。子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello World!'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">0</span>,str.length<span class="number">-1</span>)); <span class="comment">//输出 Hello World</span></span><br></pre></td></tr></table></figure><p><strong>方式三：</strong><code>stringObject.substring(start,stop)</code></p><p>与 slice() 和 substr() 方法不同的是，substring() <u>不接受负的参数</u></p><p>start : 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置</p><p>stop : 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。</p><p>如果省略该参数，那么返回的子串会一直到字符串的结尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Hello World!'</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str.substr(<span class="number">0</span>,str.length)); <span class="comment">//输出 Hello World</span></span><br></pre></td></tr></table></figure><h6 id="删除空格"><a href="#删除空格" class="headerlink" title="删除空格"></a>删除空格</h6><p><strong>方法一:</strong><code>stringObject.replace(reg,str)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>)</span>&#123; <span class="comment">//删除左右两端的空格</span></span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">ltrim</span>(<span class="params">str</span>)</span>&#123; <span class="comment">//删除左边的空格</span></span><br><span class="line"> <span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)/g</span>,<span class="string">""</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">rtrim</span>(<span class="params">str</span>)</span>&#123; <span class="comment">//删除右边的空格</span></span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/(\s*$)/g</span>,<span class="string">""</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>方法二:<code>stringObject.trim/trimRight/trimLeft()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">" 1,2,3 "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.trim());<span class="comment">//删除左右两端的空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimRight());<span class="comment">//删除右边的空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trimLeft());<span class="comment">//删除左边的空格</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断字符串是否包含某个字符串的五种方法</title>
      <link href="/2019/11/18/js8/"/>
      <url>/2019/11/18/js8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jb51.net/article/139346.htm" target="_blank" rel="noopener">参考链接</a></p><p><strong>方法一: indexOf()   (推荐)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexof(<span class="string">"2"</span>)!=<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。</p><p><strong>方法二:match()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">var</span> reg=<span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">if</span>(str.match(reg))&#123;</span><br><span class="line">   <span class="comment">//包含</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p> <u><strong>match()</strong></u> 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配,返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 <strong>null</strong>。</p><p><strong>方法三: search()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">"2"</span>)!=<span class="number">-1</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong><u>search()</u></strong> 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</p><p><strong>方法四: test()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><u><strong>test()</strong></u> 方法用于检索字符串中指定的值。返回 true 或 false。</p><p><strong>方法五:exec()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">if</span>(reg.exec(str)!=<span class="literal">null</span>)&#123;</span><br><span class="line"> <span class="comment">//包含；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><u>exec()</u></strong> 方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 <strong>null</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layui select 动态赋值,动态选中</title>
      <link href="/2019/11/18/layui6/"/>
      <url>/2019/11/18/layui6/</url>
      
        <content type="html"><![CDATA[<p><u><strong>动态赋值</strong></u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;select name=<span class="string">"device_sn"</span> id=<span class="string">"device_sn"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://localhost:8666/iclock/'</span>;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: url + <span class="string">'kaoqin/combobox'</span>,</span><br><span class="line">type: <span class="string">"GET"</span>,</span><br><span class="line">dataType: <span class="string">"json"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> htmls = <span class="string">'&lt;option value=""&gt;请选择&lt;/option&gt;'</span>; <span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">in</span> result) &#123;</span><br><span class="line">htmls += <span class="string">'&lt;option value = "'</span> + result[x].id + <span class="string">'"&gt;'</span> +</span><br><span class="line">result[x].text + <span class="string">'&lt;/option&gt;'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">"#device_sn"</span>).html(htmls);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">renderForm();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新渲染表单函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">layui.use(<span class="string">'form'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> form = layui.form(); <span class="comment">//高版本建议把括号去掉，有的低版本，需要加()</span></span><br><span class="line">form.render();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p> <a href="https://www.cnblogs.com/niuben/p/11127544.html" target="_blank" rel="noopener">动态设置 layui select 为选中状态</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前的select的id </span></span><br><span class="line">$(<span class="string">'#type'</span>).val(<span class="string">'你的value值'</span>);</span><br><span class="line"><span class="comment">//更新全部</span></span><br><span class="line">layui.form.render(); <span class="comment">//必须填写这个,否则无法出现效果</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 2.1.5 pom.xml Unknown 错误</title>
      <link href="/2019/11/18/springboot6/"/>
      <url>/2019/11/18/springboot6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/z331491512/article/details/90636237" target="_blank" rel="noopener">原文链接</a></p><h5 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h5><p>开发工具：Eclipse IDE for Enterprise Java Developers.</p><p>工具版本：2018-12 (4.10.0)</p><p><img src="/2019/11/18/springboot6/1.png" alt></p><p><img src="/2019/11/18/springboot6/2.png" alt></p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p><u>IDE不兼容</u></p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>pom.xml中properties节点增加以下内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;maven-jar-plugin.version&gt;3.1.1&lt;/maven-jar-plugin.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse安装lombok插件</title>
      <link href="/2019/11/18/eclipse2/"/>
      <url>/2019/11/18/eclipse2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/magi1201/article/details/85995987" target="_blank" rel="noopener">原文链接</a></p><p><img src="/2019/11/18/eclipse2/1.png" alt></p><p>直接进来有当前最新版本，也可以点击 older versions ，下载历史版本</p><p>2、 将 lombok.jar 放在eclipse安装根目录下</p><p><img src="/2019/11/18/eclipse2/2.jpg" alt></p><p>3、命令行执行lombok.jar，安装lombok.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar D:\DEV_ENV\eclipse\lombok.jar</span><br></pre></td></tr></table></figure><p>执行后，会跳出lombok弹出框</p><a id="more"></a><p><img src="/2019/11/18/eclipse2/3.jpg" alt></p><p>若出现Can’t find IDE弹出框后，点击确定，并点击Specify location选择eclipse位置，选择后点击Install/Update按钮安装</p><p><img src="/2019/11/18/eclipse2/4.jpg" alt></p><p>安装后，弹出框会消失，去eclipse根目录下，查看配置文件eclipse.ini</p><p><img src="/2019/11/18/eclipse2/5.jpg" alt></p><p>会多一行lombok.jar的配置项，说明lombok安装成功</p><p>测试lombok:启动eclipse，改造一个pojo对象，下面是改造前的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.swagger.jpa.bean;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户对象User"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value=<span class="string">"用户ID"</span>, name=<span class="string">"username"</span>, required=<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value=<span class="string">"用户名"</span>, name=<span class="string">"username"</span>, required=<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value=<span class="string">"登录密码"</span>, name=<span class="string">"password"</span>)</span><br><span class="line"><span class="meta">@Column</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在pom.xml文档中添加lombok依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在类上面增加@Getter 和 @Setter 注解，同步删除 里面的set 和 get 方法，改造后的类内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="meta">@Getter</span> </span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户对象User"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value=<span class="string">"用户ID"</span>, name=<span class="string">"username"</span>, required=<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value=<span class="string">"用户名"</span>, name=<span class="string">"username"</span>, required=<span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value=<span class="string">"登录密码"</span>, name=<span class="string">"password"</span>)</span><br><span class="line"><span class="meta">@Column</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到系统中，测试下，可以看到lombok的@Getter和@Setter注解帮我们自动生成了get和set方法</p><p><img src="/2019/11/18/eclipse2/6.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具及技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流拷贝文件</title>
      <link href="/2019/09/11/IO4/"/>
      <url>/2019/09/11/IO4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCopy</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f_s = <span class="keyword">new</span> File(<span class="string">"d:\\2.txt"</span>); <span class="comment">// 要拷贝的文件对象</span></span><br><span class="line">        File f_d = <span class="keyword">new</span> File(<span class="string">"e:/yxm"</span>); <span class="comment">// 要拷贝到的路径</span></span><br><span class="line">        <span class="keyword">if</span> (!f_d.exists()) &#123; <span class="comment">// 判断要拷贝到的路径是否存在，不存在就创建</span></span><br><span class="line">            f_d.mkdirs();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        File f_dd = <span class="keyword">new</span> File(f_d, <span class="string">"7s.txt"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(f_s);</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(f_dd);</span><br><span class="line">            <span class="keyword">byte</span>[] byteTemp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>(fis.read(byteTemp) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> size =byteTemp.length;</span><br><span class="line">                fos.write(byteTemp,<span class="number">0</span>,size);</span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流拷贝文件</title>
      <link href="/2019/09/11/IO3/"/>
      <url>/2019/09/11/IO3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharCopy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f_s = <span class="keyword">new</span> File(<span class="string">"d:\\2.txt"</span>); <span class="comment">// 要拷贝的文件对象</span></span><br><span class="line">        File f_d = <span class="keyword">new</span> File(<span class="string">"e:/yxm"</span>); <span class="comment">// 要拷贝到的路径</span></span><br><span class="line">        <span class="keyword">if</span> (!f_d.exists()) &#123; <span class="comment">// 判断要拷贝到的路径是否存在，不存在就创建</span></span><br><span class="line">            f_d.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        File f_dd = <span class="keyword">new</span> File(f_d, <span class="string">"7s.txt"</span>);</span><br><span class="line">        FileReader fis = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileReader(f_s);</span><br><span class="line">            fos = <span class="keyword">new</span> FileWriter(f_dd);</span><br><span class="line">            <span class="keyword">char</span>[] charTemp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (fis.read(charTemp) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> size = charTemp.length;</span><br><span class="line">                fos.write(charTemp, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java往文件中写数据,新写入的数据总是覆盖原有数据,实现追加功能</title>
      <link href="/2019/09/11/IO2/"/>
      <url>/2019/09/11/IO2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jack_bob/article/details/78430565" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 描述：追加内容到文件末尾 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteStreamAppend</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> method2(<span class="string">"/Users/zhang/Desktop/test.txt"</span>, <span class="string">"追加到文件的末尾"</span>);   </span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 第一种</span></span><br><span class="line"><span class="comment">     * 追加文件：使用FileOutputStream，在构造FileOutputStream时，</span></span><br><span class="line"><span class="comment">       把第二个参数设为true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(String file, String conent)</span> </span>&#123;   </span><br><span class="line">       BufferedWriter out = <span class="keyword">null</span>;   </span><br><span class="line">       <span class="keyword">try</span> &#123;   </span><br><span class="line">            out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(   </span><br><span class="line">                   <span class="keyword">new</span> FileOutputStream(file, <span class="keyword">true</span>)));   </span><br><span class="line">            out.write(conent);   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;   </span><br><span class="line">            e.printStackTrace();   </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;   </span><br><span class="line">           <span class="keyword">try</span> &#123;   </span><br><span class="line">                out.close();   </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;   </span><br><span class="line">                e.printStackTrace();   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 第二种</span></span><br><span class="line"><span class="comment">     * 追加文件：使用FileWriter  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(String fileName, String content)</span> </span>&#123;   </span><br><span class="line">       <span class="keyword">try</span> &#123;   </span><br><span class="line">           <span class="comment">// 打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件   </span></span><br><span class="line">            FileWriter writer = <span class="keyword">new</span> FileWriter(fileName, <span class="keyword">true</span>);   </span><br><span class="line">            writer.write(content);   </span><br><span class="line">            writer.close();   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;   </span><br><span class="line">            e.printStackTrace();   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">  </span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *第三种</span></span><br><span class="line"><span class="comment">     * 追加文件：使用RandomAccessFile </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName </span></span><br><span class="line"><span class="comment">     *             文件名 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content </span></span><br><span class="line"><span class="comment">     *             追加的内容 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(String fileName, String content)</span> </span>&#123;   </span><br><span class="line">       <span class="keyword">try</span> &#123;   </span><br><span class="line">           <span class="comment">// 打开一个随机访问文件流，按读写方式   </span></span><br><span class="line">      RandomAccessFile randomFile = <span class="keyword">new</span> RandomAccessFile(fileName, <span class="string">"rw"</span>);   </span><br><span class="line">           <span class="comment">// 文件长度，字节数   </span></span><br><span class="line">           <span class="keyword">long</span> fileLength = randomFile.length();   </span><br><span class="line">           <span class="comment">// 将写文件指针移到文件尾。   </span></span><br><span class="line">            randomFile.seek(fileLength);   </span><br><span class="line">            randomFile.writeBytes(content);   </span><br><span class="line">            randomFile.close();   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;   </span><br><span class="line">            e.printStackTrace();   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO基本概念及操作</title>
      <link href="/2019/09/10/IO1/"/>
      <url>/2019/09/10/IO1/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/09/10/IO1/1.png" alt="img"></p><h3 id="文件IO操作"><a href="#文件IO操作" class="headerlink" title="文件IO操作"></a><strong>文件IO操作</strong></h3><p><strong>1.磁盘对象</strong>：在OS中，磁盘对象主要有文件、文件夹(目录)、磁盘分区等组成；磁盘分区将一块硬盘划分成不同的大的区块；每个区块中可以有多个文件夹；每个文件夹中有可以有多个子文件夹或文件；文件夹是用来组织和管理文件的；任意一个文件夹都有一个地址.</p><p>例如:C:\我的文档\Java面向对象</p><p><strong>2</strong>.<strong>磁盘操作</strong>：通常情况下，我们的磁盘操作主要分为两大类：</p><a id="more"></a><p>A、对磁盘对象的操作；B、对文件内容的操作。</p><h4 id="File类-对磁盘对象-文件和文件夹-进行操作"><a href="#File类-对磁盘对象-文件和文件夹-进行操作" class="headerlink" title="File类(对磁盘对象-文件和文件夹)进行操作"></a>File类(对磁盘对象-文件和文件夹)进行操作</h4><h5 id="文件路径的分隔符应使用"><a href="#文件路径的分隔符应使用" class="headerlink" title="文件路径的分隔符应使用"></a>文件路径的分隔符应使用</h5><ul><li>“/” </li><li>“\”</li><li>File类中的文件路径分隔符常量(<code>File.Separator</code>)</li></ul><h5 id="File类操作文件夹和文件的方法和常量"><a href="#File类操作文件夹和文件的方法和常量" class="headerlink" title="File类操作文件夹和文件的方法和常量"></a>File类操作文件夹和文件的方法和常量</h5><table><thead><tr><th>方法或常量</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public String separator</td><td>常量</td><td>文件路径分隔符</td></tr><tr><td>public File(String  filename)</td><td>构造方法</td><td>创建File类对象并传入完整路径</td></tr><tr><td>public boolean mkdir()</td><td>方法</td><td>创建单级目录</td></tr><tr><td>public boolean mkdirs()</td><td>方法</td><td>创建目录且允许创建多级目录</td></tr><tr><td>public boolean isDirectory()</td><td>方法</td><td>判断给定的路径是否为目录</td></tr><tr><td>publicboolean delete()</td><td>方法</td><td>删除文件或目录</td></tr><tr><td>public boolean renameTo(File dest)</td><td>方法</td><td>重命名文件或目泶</td></tr><tr><td>public File[] listFiles()</td><td>方法</td><td>列出指定目录的全部文件</td></tr><tr><td>public String[] list()</td><td>方法</td><td>列出指定目录的子目录及文件的名称</td></tr><tr><td>public boolean createNewFile()</td><td>方法</td><td>创建新文件</td></tr><tr><td>public boolean exists()</td><td>方法</td><td>判断文件是否存在</td></tr><tr><td>public long length()</td><td>方法</td><td>返回文件的大小</td></tr><tr><td>public String getPath()</td><td>方法</td><td>返回文件的路径信息</td></tr></tbody></table><h5 id="注意-文件夹和目录有何不同？"><a href="#注意-文件夹和目录有何不同？" class="headerlink" title="注意:文件夹和目录有何不同？"></a>注意:文件夹和目录有何不同？</h5><p> <strong>答</strong>：文件夹的路径就是目录。</p><h5 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello"</span> + File.separator);</span><br><span class="line">String[] str = f.list();</span><br><span class="line"><span class="keyword">for</span> (String name : str) &#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断文件是否存在,存在即删除,不存在就创建一个新的文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/1.txt"</span>);</span><br><span class="line"><span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">f.delete();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">f.createNewFile();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"文件名称:"</span> + f.getName());</span><br><span class="line">System.out.println(<span class="string">"文件路径:"</span> + f.getPath());</span><br><span class="line">System.out.println(<span class="string">"文件长度:"</span> + f.length() + <span class="string">"Bytes"</span>);</span><br><span class="line">System.out.println(f.isDirectory() ? <span class="string">"是目录"</span> : <span class="string">"不是目录"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">j2ee</span><br><span class="line">j2se</span><br><span class="line">nodejs</span><br><span class="line">nodejs1</span><br><span class="line">tomcat_80</span><br><span class="line">tomcat_80.rar</span><br><span class="line">*************</span><br><span class="line">文件名称:<span class="number">1</span>.txt</span><br><span class="line">文件路径:D:\hello\<span class="number">1</span>.txt</span><br><span class="line">文件长度:<span class="number">0</span>Bytes</span><br><span class="line">不是目录</span><br></pre></td></tr></table></figure><h4 id="RandomAccessFile类-随机访问文件-对文件内容的操作"><a href="#RandomAccessFile类-随机访问文件-对文件内容的操作" class="headerlink" title="RandomAccessFile类(随机访问文件:对文件内容的操作)"></a>RandomAccessFile类(随机访问文件:对文件内容的操作)</h4><ul><li><p><code>RandomAccessFile</code>是Java中功能最丰富的文件访问类，它提供了多种文件访问方法，包括以二进制方式“随机访问”文件、跳转到文件的任意位置读写数据等。实际应用中一般使用<code>RandomAccessFile</code>类访问文件指定位置的内容块。之所以可以访问文件的任意位置，是因<code>RandomAccessFile</code>可以操作文件指针。</p></li><li><p>默认情况下打开新文件时，位置指针指向文件开始处，当对文件内容操作时，文件指针指向哪里就从哪里开始写入，程序代码可以移动文件指针到指定位置，再进行读写操作。</p></li></ul><h5 id="RandomAccessFile类常用方法"><a href="#RandomAccessFile类常用方法" class="headerlink" title="RandomAccessFile类常用方法"></a>RandomAccessFile类常用方法</h5><table><thead><tr><th>方法</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public RandomAccessFile(File f,String mode)</td><td>构造方法</td><td>接收File类并设置r只读、w只写?、rw为读写模式</td></tr><tr><td>public RanciomAccessFile(String name,String mode)</td><td>构造方法</td><td>输入指定的文件路径并设置模式</td></tr><tr><td>public void close ()</td><td>方法</td><td>关闭随机存取文交流并释放与该流关联的所有系统资源</td></tr><tr><td>public final byte readByte ()</td><td>方法</td><td>读取一个字节</td></tr><tr><td>public int read (byte [ ] b)</td><td>方法</td><td>将内容读取到byte数组中</td></tr><tr><td>public final int readInt()</td><td>方法</td><td>将一个整型数据写入到文件中</td></tr><tr><td>public final void writeBytes(String s)</td><td>方法</td><td>按字节序列将该字符串写入该文件</td></tr><tr><td>public final void writeInt(int v)</td><td>方法</td><td>按四个字节将int写入该文件</td></tr><tr><td>public void seek(long pos)</td><td>方法</td><td>设置指针距离文件开头的字节数，是绝对定位</td></tr><tr><td>public int skipBytes (int n)</td><td>方法</td><td>指针从当前位置开始跳过的字节数是相对定位</td></tr><tr><td>public  long getFilePointer ()</td><td>方法</td><td>获取指针的当前位置</td></tr></tbody></table><h5 id="代码案例-1"><a href="#代码案例-1" class="headerlink" title="代码案例"></a>代码案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello"</span> + File.separator + <span class="string">"1.txt"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(f, <span class="string">"rw"</span>);</span><br><span class="line">raf.writeBytes(<span class="string">"jim"</span>);<span class="comment">//写入3个字节</span></span><br><span class="line">raf.writeInt(<span class="number">23</span>);<span class="comment">//写入四个字节</span></span><br><span class="line">raf.writeBytes(<span class="string">"tom"</span>);</span><br><span class="line">raf.writeInt(<span class="number">24</span>);</span><br><span class="line">raf.writeBytes(<span class="string">"john"</span>);</span><br><span class="line">raf.writeInt(<span class="number">22</span>);</span><br><span class="line">raf.close();<span class="comment">//关闭连接释放资源</span></span><br><span class="line">System.out.println(<span class="string">"输入写出成功"</span>);</span><br><span class="line">raf.readInt();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤：</strong></p><p>1.先检索到自己需要信息的位置</p><p>2.将信息转化为byte数组</p><p>3.读取数组里的内容</p><p>4.将单个转化为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello"</span> + File.separator + <span class="string">"1.txt"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(f, <span class="string">"r"</span>);</span><br><span class="line">raf.skipBytes(<span class="number">14</span>);<span class="comment">//raf.seek(14);</span></span><br><span class="line"><span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">raf.read(b);</span><br><span class="line">String n3=<span class="keyword">new</span> String(b);</span><br><span class="line"><span class="keyword">int</span> a3=raf.readInt();</span><br><span class="line">System.out.println(<span class="string">"第三个人:"</span>+n3+<span class="string">","</span>+a3+<span class="string">"岁"</span>);</span><br><span class="line">raf.seek(<span class="number">0</span>);<span class="comment">//raf.skipBytes(-14);不能往前跳</span></span><br><span class="line">b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">raf.read(b);</span><br><span class="line">String n1=<span class="keyword">new</span> String(b);</span><br><span class="line"><span class="keyword">int</span> a1=raf.readInt();</span><br><span class="line">System.out.println(<span class="string">"第一个人:"</span>+n1+<span class="string">","</span>+a1+<span class="string">"岁"</span>);</span><br><span class="line">raf.close();<span class="comment">//关闭连接释放资源</span></span><br><span class="line">System.out.println(<span class="string">"读取成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第三个人:john,22岁</span><br><span class="line">第一个人:jim,23岁</span><br><span class="line">读取成功</span><br></pre></td></tr></table></figure><ul><li><strong>汉字转字节数组：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name=<span class="string">"张三"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b=name.getBytes();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// "r", "rw", "rws",or "rwd"</span></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/1.txt"</span>);</span><br><span class="line">RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(f, <span class="string">"rw"</span>);</span><br><span class="line"><span class="comment">// 读取时: byte[] b=new byte[4];4对应字节数</span></span><br><span class="line"><span class="comment">// 写入数据:</span></span><br><span class="line">String name = <span class="string">"张三"</span>;<span class="comment">// 字节为4</span></span><br><span class="line">raf.write(name.getBytes());</span><br><span class="line">raf.writeBytes(<span class="string">"jim"</span>);<span class="comment">// 字节为3</span></span><br><span class="line">raf.writeInt(<span class="number">23</span>);<span class="comment">// 字节为4</span></span><br></pre></td></tr></table></figure><h4 id="字节输入输出流"><a href="#字节输入输出流" class="headerlink" title="字节输入输出流"></a><strong>字节输入输出流</strong></h4><ul><li>数据流是一串连续不断的数据的集合，数据如同管道供水般一段一段从一端流向另一端，并按先后顺序形成有序队列。</li><li>在程序中，无论数据分为多次还是一次性整体写入，其读取效果完全一致。读取时可以选择任意长度的数据，但必须按照由前往后、先进先出的顺序进行。如下图所示。</li></ul><p><img src="/2019/09/10/IO1/2.png" alt="img"></p><h5 id="使用流操作文件有如下几个基本步骤"><a href="#使用流操作文件有如下几个基本步骤" class="headerlink" title="使用流操作文件有如下几个基本步骤"></a><strong>使用流操作文件有如下几个基本步骤</strong></h5><p>① 用File类打开文件；</p><p>② 通过字节流或字符流指定输入（来源）/输出（目标）位置；</p><p>③ 进行读/写操作；</p><p>④ 关闭流。</p><h5 id="InputStream和OutputStream"><a href="#InputStream和OutputStream" class="headerlink" title="InputStream和OutputStream"></a>InputStream和OutputStream</h5><p>字节输入流是指数据以字节形式从其他文件或终端设备向程序流入，输入流只能从流中读取数据，可以使用InputStream类完成。</p><p>字节输出流是指数据以字节形式从程序流出，输出流只能向流中写入数据，可以使用OutputStream类完成。</p><p>InputStream和OutputStream是两个抽象类</p><h6 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h6><p><img src="/2019/09/10/IO1/3.png" alt="字节输入流类继承体系结构图"></p><p><img src="/2019/09/10/IO1/4.png" alt="字节输出流类继承体系结构图"></p><h6 id="抽象类-InputStream的主要方法"><a href="#抽象类-InputStream的主要方法" class="headerlink" title="抽象类 InputStream的主要方法"></a>抽象类 InputStream的主要方法</h6><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>public void close ()</td><td>关闭输入流</td></tr><tr><td>public abstract int read()</td><td>以数字的方式读取内容</td></tr><tr><td>public int read (byte [ ] b)</td><td>将内容读到byte数组中同时返回阅读入的个数</td></tr></tbody></table><h6 id="抽象类-OutputStream的主要方法"><a href="#抽象类-OutputStream的主要方法" class="headerlink" title="抽象类 OutputStream的主要方法"></a>抽象类 OutputStream的主要方法</h6><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>public void close ()</td><td>关闭输出流</td></tr><tr><td>public void flush()</td><td>刷新输出流并强制写出缓冲的输出字节</td></tr><tr><td>public abstract voidwrite(int b)</td><td>将指定的字节写入此输出流</td></tr><tr><td>public int write (byte [ ] b)</td><td>将 b.length 个字节从指定的字节数组写入此输出流</td></tr><tr><td>publicvoid write(byte[] b,int off,int len)</td><td>将指定字节数组中从偏移量 off 开始的len个字节写入此输出流</td></tr></tbody></table><p><strong>注意：</strong></p><blockquote><p>若需要使用InputStream和OutputStream两个抽象类来完成二进制数据IO操作，必须通过其子类来完成。eg:使用FilelnputStream读取文件内容，而使用FileOutputStream来写入文件内容。</p></blockquote><h5 id="FileInputStream和FileOutputStream"><a href="#FileInputStream和FileOutputStream" class="headerlink" title="FileInputStream和FileOutputStream"></a>FileInputStream和FileOutputStream</h5><p>FilelnputStream是InputStream的子类，主要用于从文件中读取数据；FileOutputStream是OutputStream的子类，主要用于向文件中写入数据。        </p><h6 id="FileOutputStream的主要构造方法如下"><a href="#FileOutputStream的主要构造方法如下" class="headerlink" title="FileOutputStream的主要构造方法如下"></a>FileOutputStream的主要构造方法如下</h6><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file,<span class="keyword">boolean</span> append)</span></span></span><br></pre></td></tr></table></figure><p>其中boolean flag参数是可选的．true表示以追加模式打开文件（相当于自动调整文件指针到最后），false表示以覆盖模式（相当于文件指针在首行的最左侧）打开文件默认情况下flag参数值为false。</p><h6 id="FilelnputStream的主要构造方法如下"><a href="#FilelnputStream的主要构造方法如下" class="headerlink" title="FilelnputStream的主要构造方法如下"></a>FilelnputStream的主要构造方法如下</h6><p>语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(File file)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure><h6 id="代码案例-2"><a href="#代码案例-2" class="headerlink" title="代码案例"></a>代码案例</h6><p>任务：编码打开D:/hello/1.txt文件，向文件中写入hello world，然后再从D:/hello/1.txt文件中读取数据。</p><p>要求：写入文件使用 FileOutStream,从文件中读入数据使用FileInputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/1.txt"</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f, <span class="keyword">true</span>);</span><br><span class="line">String str = <span class="string">"hello world"</span>;</span><br><span class="line">fos.write(str.getBytes());</span><br><span class="line">fos.close();</span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = fis.read(buf);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(buf, <span class="number">0</span>, len));</span><br><span class="line">fis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出结果: hello world</span><br></pre></td></tr></table></figure><p>读写文件内容，已经掌握了两种方式：</p><blockquote><p><strong>1.使用RandomAccessFile：可以随意调整文件指针位置，进行读写操作。</strong></p><p><strong>2.使用FileOutStream来存档，使用FileInputStream来读档。</strong></p></blockquote><h5 id="BufferedlnputStream-和-BufferedOutputStream"><a href="#BufferedlnputStream-和-BufferedOutputStream" class="headerlink" title="BufferedlnputStream 和 BufferedOutputStream"></a>BufferedlnputStream 和 BufferedOutputStream</h5><p>FilelnputStream和FileOutputStream使用byte数组保存从文件中读取的数据；但由于硬盘（机械设备）数据存取速度远低于内存（电子设备）的数据存取速度，所以可以对IO流进行缓冲，以减少对硬盘的存取次数，提高读写效率。</p><blockquote><p>BufferedInputStream和BufferedOutputStream为InputStream和OutputStream增加了内存缓冲区.</p><p>根本目的是:允许Java的IO流一次操作多个字节，从而提高整个系统的性能。</p></blockquote><h6 id="BufferedlnputStream构造方法"><a href="#BufferedlnputStream构造方法" class="headerlink" title="BufferedlnputStream构造方法"></a>BufferedlnputStream构造方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in,<span class="keyword">int</span> size)</span></span></span><br></pre></td></tr></table></figure><p>第一种形式的构造方法创建带有32个字节缓冲区的缓冲流，第二种形式的构造方法按照指定大小创建缓冲区。</p><h6 id="BufferedOutputStream构造方法"><a href="#BufferedOutputStream构造方法" class="headerlink" title="BufferedOutputStream构造方法"></a>BufferedOutputStream构造方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream in)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream in,<span class="keyword">int</span> size)</span></span></span><br></pre></td></tr></table></figure><p>与<code>BufferedlnputStream</code>相同，上述第一种形式的构造方法创建带有32个字节缓冲区的缓冲流第二种形式的构造方法按指定的大小来创建缓冲区。 <code>BufferedOutputStream</code>与<code>OutputStream</code>的使用基本一致，</p><p>但<code>BufferedOutputStream</code>中的<code>flush</code>方法可以强制输出缓冲区的数据。</p><h6 id="代码案例-3"><a href="#代码案例-3" class="headerlink" title="代码案例"></a>代码案例</h6><p>利用缓冲流，将D:/hello/1.txt中的内容，复制到D:/hello/2.txt文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] data=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">"D:/hello/1.txt"</span>);</span><br><span class="line">FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">BufferedInputStream bufin=<span class="keyword">new</span> BufferedInputStream(in);</span><br><span class="line">BufferedOutputStream bufos=<span class="keyword">new</span> BufferedOutputStream(out);</span><br><span class="line"><span class="keyword">while</span>(bufin.read(data)!=-<span class="number">1</span>) &#123;</span><br><span class="line">bufos.write(data);</span><br><span class="line">&#125;</span><br><span class="line">bufos.flush();</span><br><span class="line">bufin.close();</span><br><span class="line">bufos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个长度为1的字节数组（目的是小于32，因为缓冲流默认缓冲区是32字节，大于32就没有意义了)</p><p>比如512或1024，表示一次读多少个字节的数据。</p><p>read方法返回本次实际读到的字节数，如果为-1，表示本次未读到任何数据。</p><p>调用flush方法，将输出缓冲流中的内容（不管缓冲区是否满）一股脑写入2.txt中。</p><blockquote><p>在网络交互的程序中，缓冲流用的还是挺多的，比如：我们在网上下载一个视频，我们将缓冲流的缓冲区指定的稍微大点，这样，当缓冲流满的时候，才去向硬盘写入一次数据，减少了对磁盘的访问频率。</p></blockquote><h4 id="对象序列化和反序列化"><a href="#对象序列化和反序列化" class="headerlink" title="对象序列化和反序列化"></a>对象序列化和反序列化</h4><p>不管是游戏还是正在执行过程中的Java程序，很多数据以对象的方式存储在内存中。</p><p>对象序列化是指直接将内存中的整个对象存储至文件或其他终端中的过程，即将对象转换为二进制数据保存到文件或其他终端。</p><p>反序列化则与之相反。</p><p><strong>序列化及反序列化可以方便地实现对象存储和传输。</strong></p><p>序列化类的对象时，要求该类必须实现<code>java.io.Serializable</code>接口</p><h5 id="接口定义如"><a href="#接口定义如" class="headerlink" title="接口定义如"></a>接口定义如</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>非常有意思的是， 此接口中没有定义任何方法，所以又称为标识接口，表示该类具备序列化的能力。</p><p>对象的类实现Serializable接口之后，可以分别使用类<code>ObjectInputStream</code>和<code>ObjectOutputStream</code>类存储、读取数据。</p><h6 id="0bjectInputStream类主要方法"><a href="#0bjectInputStream类主要方法" class="headerlink" title="0bjectInputStream类主要方法"></a>0bjectInputStream类主要方法</h6><table><thead><tr><th>方法</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public ObjectInputStream (InputStream in)</td><td>构造方法</td><td>构造输入对象</td></tr><tr><td>public final Object readObject ()</td><td>方法</td><td>从指定位置读取对象</td></tr></tbody></table><h6 id="0bjectOutputStream类主要方法"><a href="#0bjectOutputStream类主要方法" class="headerlink" title="0bjectOutputStream类主要方法"></a>0bjectOutputStream类主要方法</h6><table><thead><tr><th>方法</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public ObjectOutputStream (OutputStream out)</td><td>构造方法</td><td>构造输出对象</td></tr><tr><td>public final void writeObject(Object o)</td><td>方法</td><td>输出对象到指定位置</td></tr></tbody></table><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><p> 1.定义可序列化的类，该类必须实现Serializable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> Grade grade;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pubic <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.编写序列化及反序列化方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test8</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">writeObject();</span><br><span class="line">readObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(outputStream);</span><br><span class="line"><span class="comment">// 创建序列化对象</span></span><br><span class="line">Student tom = <span class="keyword">new</span> Student();</span><br><span class="line">tom.setAge(<span class="number">20</span>);</span><br><span class="line">tom.setName(<span class="string">"tom"</span>);</span><br><span class="line">Grade grade = <span class="keyword">new</span> Grade();</span><br><span class="line">grade.setId(<span class="number">1000</span>);</span><br><span class="line">grade.setName(<span class="string">"S150"</span>);</span><br><span class="line">tom.setGrade(grade);</span><br><span class="line"><span class="comment">// 进行写操作</span></span><br><span class="line">os.writeObject(tom);</span><br><span class="line">outputStream.close();</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">Object object = in.readObject();</span><br><span class="line"><span class="comment">// 强制类型转换</span></span><br><span class="line">Student tom = (Student) object;</span><br><span class="line">System.out.println(<span class="string">"姓名:"</span> + tom.getName());</span><br><span class="line">System.out.println(<span class="string">"年龄:"</span> + tom.getAge());</span><br><span class="line">System.out.println(<span class="string">"班级:"</span> + tom.getGrade().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">姓名:tom</span><br><span class="line">年龄:<span class="number">20</span></span><br><span class="line">班级:S150</span><br></pre></td></tr></table></figure><h4 id="字符输入输出流"><a href="#字符输入输出流" class="headerlink" title="字符输入输出流"></a>字符输入输出流</h4><h5 id="Reader和Writer"><a href="#Reader和Writer" class="headerlink" title="Reader和Writer"></a>Reader和Writer</h5><p>由于Java中的字符采用Unicode编码，所以InputStream类和OutputStream类用于处理字节，但不适合处理字符文本。</p><p>Java为字符文本的输入和输出专门提供了Reader和Writer类，二者均为抽象类且与InputStream类和OutputStream相对应。</p><p>其继承层次图如下图所示：</p><p><img src="/2019/09/10/IO1/5.png" alt="img"></p><h6 id="Reader类主要方法"><a href="#Reader类主要方法" class="headerlink" title="Reader类主要方法"></a>Reader类主要方法</h6><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public abstract void close()</td><td>关闭输入流</td></tr><tr><td>public int read()</td><td>读取单个字符</td></tr><tr><td>public intread(char [] c)</td><td>将内容读取到字符数组中，并返回读取的长度</td></tr></tbody></table><p><img src="/2019/09/10/IO1/6.png" alt="img"></p><h6 id="Writer类主要方法"><a href="#Writer类主要方法" class="headerlink" title="Writer类主要方法"></a>Writer类主要方法</h6><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public abstract void close()</td><td>关闭输出流</td></tr><tr><td>public void write (String str)</td><td>输出字符串到流中</td></tr><tr><td>public void write (char [ ] c)</td><td>输出字符数组到流中</td></tr><tr><td>public abstract void flush ()</td><td>强制清空缓存</td></tr></tbody></table><p>与OutputStream和InputStream类似，Reader和Writer也是抽象类，所以需要根据文件类型的子类来选择具体的子类来实现读取操作。</p><p>eg:</p><p>以字符形式操作文件时，可以选择FileReader和FileWriter。</p><p>当我们看到Reader和Writer时，千万别有一种自己被加重了负担的感觉，而是要当成一个帮手，看到他们请嘴角上扬。</p><h5 id="FileReader和FileWriter"><a href="#FileReader和FileWriter" class="headerlink" title="FileReader和FileWriter"></a>FileReader和FileWriter</h5><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>FileReader和FileWriter是Reader和Writer的实现子类，可用于读写文本文件，现在请编码使用FileWriter向D:/hello/2.txt中写入hello world，并使用FileReader来读取并显示hello world！</p><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">FileWriter out = <span class="keyword">new</span> FileWriter(f);</span><br><span class="line">out.write(<span class="string">"hello world!"</span>);</span><br><span class="line">out.close();</span><br><span class="line">FileReader reader = <span class="keyword">new</span> FileReader(f);</span><br><span class="line"><span class="keyword">char</span>[]  c= <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = reader.read(c);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(c, <span class="number">0</span>, len));</span><br><span class="line">reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="InputStreamReader和OutputStreamWriter"><a href="#InputStreamReader和OutputStreamWriter" class="headerlink" title="InputStreamReader和OutputStreamWriter"></a>InputStreamReader和OutputStreamWriter</h5><p>InputStreamReader和OutputStreamWriter分别为Reader和Writer类的子类，二者用于字节流和字符流之间的转换。</p><p>其中InputStreamReader用于将输入的字节流转变为字符流</p><p>而OutputStreamWriter用于将输出的字符流转变为字节流。</p><p>创建使用默认字符编码的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">OutputStreamWriter <span class="title">OutputStreamWriter</span> <span class="params">(OutputStream out)</span></span></span><br></pre></td></tr></table></figure><p>创建使用指定字符集的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">OutputStreamWriter <span class="title">OutputStreamWriter</span> <span class="params">(OutputStream out,String charsetName)</span></span></span><br></pre></td></tr></table></figure><h6 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h6><p>使用<code>OutputStreamWriter</code>向D:/hello/2.txt中，写入一段文本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">testOutputStreamWriter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testOutputStreamWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">FileOutputStream s = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">OutputStreamWriter w = <span class="keyword">new</span> OutputStreamWriter(s);</span><br><span class="line">w.write(<span class="string">"今日的痛苦是明日最甜美的回忆"</span>);</span><br><span class="line">w.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个使用默认字符集的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">InputStreamReader <span class="title">InputStreamReader</span><span class="params">(InputStream in)</span></span></span><br></pre></td></tr></table></figure><p>创建使用指定字符集的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">InputStreamReader <span class="title">InputStreamReader</span><span class="params">(InputStream in, String charsetName)</span></span></span><br></pre></td></tr></table></figure><p>任务：</p><p>使用OutputStreamWriter从D:/hello/2.txt中读取内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">testInputStreamWriter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInputStreamWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileInputStream s = <span class="keyword">new</span> FileInputStream(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">InputStreamReader r = <span class="keyword">new</span> InputStreamReader(s);</span><br><span class="line"><span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];<span class="comment">// 一次最多多1024个</span></span><br><span class="line"><span class="keyword">int</span> len = r.read(c);<span class="comment">// 实际读到的字数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(c, <span class="number">0</span>, len));</span><br><span class="line">r.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出结果: 今日的痛苦是明日最甜美的回忆</span><br></pre></td></tr></table></figure><p>注意：</p><p>频繁的转换字符与字节将影响程序的效率，所以实际应用中应尽量避免直接使用InputStreamReader和OutputStreamWriter类进行转换。</p><p>必须进行频繁的转换时，建议使用BufferedWriter和BufferedReader类包装InputStreamReader和OutputStreamWriter。</p><h5 id="BufferedWriter和BufferedReader"><a href="#BufferedWriter和BufferedReader" class="headerlink" title="BufferedWriter和BufferedReader"></a>BufferedWriter和BufferedReader</h5><p>BufferedWriter和BufferedReader是带缓冲区的Reader和Writer。使用BufferedReader读取文件时，将首先从文件中读取字符数据并存入缓冲区中，然后调用read()方法，先从缓冲区开始读取，缓冲区数据不足时再从文件中读取；使用BufferedWriter时，写入的数据将先存储到缓冲区中，在缓冲区饱和的情况下将一次性写入目的地。通过缓冲区可以减少对硬盘的输入或输出操作，提高文件存取效率。</p><h6 id="BufferedReader类的主要方法："><a href="#BufferedReader类的主要方法：" class="headerlink" title="BufferedReader类的主要方法："></a>BufferedReader类的主要方法：</h6><table><thead><tr><th>方法</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public BufferedReader(Reader in)</td><td>构造方法</td><td>接收Reader类实例</td></tr><tr><td>public String readLine()</td><td>方法</td><td>从缓冲区读取一行文本</td></tr><tr><td>public int read()</td><td>方法</td><td>读取单个字符</td></tr><tr><td>public int read(char[] cbuf,int off,int len)</td><td>方法</td><td>将字符读入数组的某一部分</td></tr></tbody></table><h6 id="BufferedWriter类主要方法："><a href="#BufferedWriter类主要方法：" class="headerlink" title="BufferedWriter类主要方法："></a>BufferedWriter类主要方法：</h6><table><thead><tr><th>方法</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>public BufferedWriter(Writer out)</td><td>构造方法</td><td>接收Writer类实例</td></tr><tr><td>public void newLine()</td><td>方法</td><td>写入一个行分隔符</td></tr><tr><td>public void write(int c)</td><td>方法</td><td>写入单个字符</td></tr><tr><td>public void write(char[] c,int off,int len)</td><td>方法</td><td>写入字符数组的某一部分</td></tr><tr><td>public void write(String s,int off,int len)</td><td>方法</td><td>写入字符串的某一部分</td></tr></tbody></table><h6 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h6><p>通过BufferedWriter向D:/hello/2.txt文件中写入一段文本，再使用BufferedReader从D:/hello/2.txt文件中读入数据并显示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">testBuffterWriter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBuffterWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">FileWriter writer=<span class="keyword">new</span> FileWriter(f);</span><br><span class="line">BufferedWriter bufferedWriter =<span class="keyword">new</span> BufferedWriter(writer);</span><br><span class="line">bufferedWriter.write(<span class="string">"肖战"</span>);</span><br><span class="line">bufferedWriter.close();</span><br><span class="line">    writer.close();</span><br><span class="line">    FileReader reader=<span class="keyword">new</span> FileReader(f);</span><br><span class="line">    BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">    String content=bufferedReader.readLine();</span><br><span class="line">    System.out.println(content);</span><br><span class="line">    bufferedReader.close();</span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边代码纯粹是为了给大家演示使用过程而设置，在实际项目中一般不会有这样的业务。</p><p>有两点需要关注：</p><p>a.BufferedWriter对象和BufferedReader对象的构建过程。</p><p><img src="/2019/09/10/IO1/7.png" alt="img"></p><p>b.文件关闭(Close)的顺序：先关闭外层缓冲对象，再关闭内层对象。</p><h5 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h5><p>PrintWriter是Writer的子类，其作用是将格式化的数据或对象输出到一个文本输出流.</p><h6 id="PrintWriter类构造方法"><a href="#PrintWriter类构造方法" class="headerlink" title="PrintWriter类构造方法"></a>PrintWriter类构造方法</h6><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>PrintWriter(File file)</td><td>使用指定文件创建不具有自动行刷新的新 PrintWriter</td></tr><tr><td>PrintWriter(File file, String csn))</td><td>创建具有指定文件和字符集且不带自动刷行新的新 PrintWriter</td></tr><tr><td>PrintWriter(OutputStream out)</td><td>根据现有的 OutputStream 创建不带自动刷新的新 PrintWriter</td></tr><tr><td>PrintWriter(OutputStream out,boolean autoFlush)</td><td>通过现有的 OutputStream 创建新的 PrintWriter</td></tr><tr><td>PrintWriter(String fileName)</td><td>创建具有指定文件名称且不带自动行刷新的新 PrintWriter</td></tr><tr><td>PrintWriter(String fileName, String csn)</td><td>创建具有指定文件名称和字符集且不带自动行刷新的新 PrintWriter</td></tr><tr><td>PrintWriter(Writer out)</td><td>创建不带自动行刷新的新 PrintWriter</td></tr><tr><td>PrintWriter(Writer w, boolean autoFlush)</td><td>创建新 PrintWriter</td></tr></tbody></table><p>PrintWriter类中的主要方法是print()和write()，二者均提供类型丰富的参数，可以实现多种形式多种终端的格式化输出操作。</p><h6 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h6><p>使用PrintWriter类向D:/hello/2.txt文件中，写入字符串数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testPrintWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/hello/2.txt"</span>);</span><br><span class="line">PrintWriter pw=<span class="keyword">new</span> PrintWriter(f);</span><br><span class="line">pw.println(<span class="string">"hello world"</span>);</span><br><span class="line">pw.write(<span class="string">"java"</span>);</span><br><span class="line">    pw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行后，打开D:/hello/2.txt文件，如图所示。</p><p><img src="/2019/09/10/IO1/8.png" alt="img"></p><p>怎么没有数据呢？这是因为PrintWriter内置缓冲区，缓冲区还有空间时，是不会进行写入的文件的，你有以下几种方式来让缓冲区中内容进入文件：</p><p>a.在调用print()或write()方法后，调用flush()方法强制刷新缓冲区，将文字写入文件。</p><p>b.在创建PrintWriter对象时开启自动刷新选项（例如：第216行被注释的代码）</p><p><img src="/2019/09/10/IO1/9.png" alt="img"></p><p>c.调用close方法，也会将缓冲区内容写入文件之中。</p><p>程序运行后，打开D盘下面的test.txt文件，如图所示：</p><p><img src="/2019/09/10/IO1/10.png" alt="img"></p><h4 id="字节流与字符流区别"><a href="#字节流与字符流区别" class="headerlink" title="字节流与字符流区别"></a>字节流与字符流区别</h4><table><thead><tr><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>以字节为单位输入和输出数据</td><td>以字符为单位输入和输出数据</td></tr><tr><td>操作时不会用到缓冲区（内存）</td><td>操作时使用了缓冲区（内存）</td></tr><tr><td>字节流按照8位传输</td><td>字符流按照16位传输1个字符=2个字节</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven介绍</title>
      <link href="/2019/09/10/maven1/"/>
      <url>/2019/09/10/maven1/</url>
      
        <content type="html"><![CDATA[<h5 id="Maven相关概念"><a href="#Maven相关概念" class="headerlink" title="Maven相关概念"></a><a href="https://baike.baidu.com/item/Maven/6094909?fr=aladdin" target="_blank" rel="noopener">Maven相关概念</a></h5><p>Maven是一个<a href="https://baike.baidu.com/item/项目管理工具" target="_blank" rel="noopener">项目管理工具</a>，它包含了一个项目对象模型 (Project Object Model)，一组标准集合，一个<a href="https://baike.baidu.com/item/项目生命周期" target="_blank" rel="noopener">项目生命周期</a>(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中[插件]目标(goal)的逻辑。当你使用Maven的时候，你用一个明确定义的项目对象模型来描述你的项目，然后Maven可以应用横切的逻辑，这些逻辑来自一组共享的（或者自定义的）插件。</p><a id="more"></a><p>Maven 有一个生命周期，当你运行 mvn install 的时候被调用。这条命令告诉 Maven 执行一系列的有序的步骤，直到到达你指定的生命周期。遍历生命周期旅途中的一个影响就是，Maven 运行了许多默认的[插件]目标，这些目标完成了像编译和创建一个 JAR 文件这样的工作。</p><h5 id="Dependency-依赖"><a href="#Dependency-依赖" class="headerlink" title="Dependency(依赖)"></a><strong>Dependency(依赖)</strong></h5><p>各种项目需要依赖的jar包,在没使用Maven时需要把各种框架的jar包都导入进项目的lib目录下,但有了maven之后就可以通过在pom.xml配置文件中通过依赖管理(<code>&lt;dependencies&gt;</code>)配置相关的依赖项(<code>&lt;dependency&gt;</code>)即可. maven不但可以提供直接的依赖管理,比如直接依赖Junit、Spring MVC,还可以提供所有传递依赖管理,这是一个透明的过程,也就是这里写了依赖Spring的Web MVC框架,那么Spring MVC所依赖的其他包,Maven也会为我们自动载入.</p><h5 id="坐标——-——唯一标识一个产品"><a href="#坐标——-——唯一标识一个产品" class="headerlink" title="坐标—— ——唯一标识一个产品"></a>坐标<strong>—— ——</strong>唯一标识一个产品</h5><p><img src="/2019/09/10/maven1/1.png" alt="img"></p><h5 id="Maven安装并测试步骤"><a href="#Maven安装并测试步骤" class="headerlink" title="Maven安装并测试步骤"></a><strong>Maven安装并测试步骤</strong></h5><blockquote><p>1、下载并解压meaven.zip(百度谷歌搜索Maven)；</p><p> 2、系统变量下新建系统变量， M2_HOME ，值是meaven安装目录；</p><p> 3、path：%M2_HOME%\bin；</p><p> 4、测试cmd：mvn -version</p></blockquote><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a><strong>修改配置文件</strong></h5><p>1.maven安装目录中，<code>conf--&gt;seeting</code>复制到.m2文件夹下</p><p>2.修改<code>setting</code>中的<code>localRepository</code> ，即修改本地仓库位置</p><p>3.<code>mirror</code> 修改中央仓库的替代仓库地网址（Maven 的核心仓库的副本就是一个mirror。配置之后，每次访问都去这个仓库访问）如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;UK&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;UK Central&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http:<span class="comment">//uk.maven.org/maven2&lt;/url&gt;</span></span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;/mirror&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt; </span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt; </span><br><span class="line">      &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt; </span></span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; </span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p><strong>好处:</strong></p><blockquote><p>每次升级Maven版本不需要修改Maven自己的配置文件</p><p>自由的选择Maven仓库的位置</p><p>为了避免Maven下载中心负载过重，可以选择其他的下载中心，比如：英国的/阿里云</p></blockquote><h5 id="用Maven创建项目"><a href="#用Maven创建项目" class="headerlink" title="用Maven创建项目"></a><strong>用Maven创建项目</strong></h5><p>1.在继承Maven的eclipse(4.3版本  <a href="www.eclipse.org/downloads/packages/release/Kepler/SR2">kepler</a>)中</p><p> <code>windows---&gt;prefrences----&gt;Maven---&gt;Installation---&gt;</code> 将新下载的maven文件add进去，确保在user Setings中 配置文件的路径是之前配置了mirror的配置文件setting.xml  </p><p><strong>2.运行命令创建项目(注意：需要指定创建项目的路径)</strong> </p><p><strong>例如</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\Workspaces\Eclipse <span class="number">10</span> </span><br><span class="line">命令：</span><br><span class="line">mvn archetype:generate -DgroupId=imooc-arthur -DartifactId=spring-mvc-study</span><br><span class="line">-DarchetypeArtifactId=maven-archetype-webapp</span><br></pre></td></tr></table></figure><p><strong>参数解释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">archetype:generate           调用插件 </span><br><span class="line">groupId                      坐标</span><br><span class="line">artifactId                   坐标的一个元素，目录结构的根目录名称</span><br><span class="line">archetypeArtifactId          目录类型的一个类型，此为webapp的类型</span><br></pre></td></tr></table></figure><h5 id="eclipse创建Maven项目"><a href="#eclipse创建Maven项目" class="headerlink" title="eclipse创建Maven项目"></a>eclipse创建Maven项目</h5><p>eclipse –&gt; File –&gt; New –&gt; Maven Project(勾选Create a simple project) –&gt; Next –&gt; 填写相关信息 –&gt; Finish  POM.xml添加对应的需要的约束</p><p><img src="/2019/09/10/maven1/2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具及技术 </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于tomcat8在windows2008下高并发下问题的解决方案</title>
      <link href="/2019/09/10/tomcat2/"/>
      <url>/2019/09/10/tomcat2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/cctcc/article/details/45458929" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><p>关于tomcat8在windows2008下高并发下问题的解决方案</p><p>因为客户服务器特殊的环境问题，只能使用windows2008r2服务器，然而配置过后，网站的高访问量很快就出现了各种问题，以下是解决的问题汇总。</p><p>服务器环境：windows2008R2+jdk8.0+tomcat8.0.21+sqlserver2008r2(以上软件环境均是64位)</p><a id="more"></a><p>1、首先建议安装jdk8.0(64位)以能获取较高的JVM内存设置，不然网站访问并发过高，内存很快就会出现不足，也就是常说的java heap space不足了。<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载地址</a></p><p>记得一定要选择：jdk-8u45-windows-x64.exe</p><p>2、安装64位的tomcat8.0,</p><p>3、修改连接器协议，<strong>默认是HTTP/1.1</strong>，该默认设置不能支持过高的并发量，不然会出现io错误。</p><p>方法是修改conf/server.xml将</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span>  <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>4、优化jar包，如果一个jar文件出现在多个WEB应用中的话，可以将该jar文件统一放到一个目录下，以 避免被tomcat 多次加载，耗用内存占用。方法是：</p><p>修改：<strong>/conf/catalina.properties</strong>文件</p><p>将：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">common.loader="$&#123;catalina.base&#125;/lib","$&#123;catalina.base&#125;/lib/*.jar",</span><br><span class="line">"$&#123;catalina.home&#125;/lib","$&#123;catalina.home&#125;/lib/*.jar</span><br><span class="line">后面增加："$&#123;catalina.home&#125;/share/lib/*.jar"</span><br></pre></td></tr></table></figure><p>然后将共用的jar文件放到tomcat下share目录里的lib文件夹里即可。</p><p>5、tomcat8默认会缓存图片资源，当并发过高时，会提示warn信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING [http-nio-<span class="number">80</span>-exec-<span class="number">43</span>] org.apache.catalina.webresources.Cache.</span><br><span class="line">getResource Unable to add the resource at.....</span><br></pre></td></tr></table></figure><p>这个本身没有什么问题，只是不断在日志中写入信息，日志文件不断增加，感觉不好，干脆设置不缓存，方法是：修改META-INF下的context.xml文件，在Context中增加一行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resources</span> <span class="attr">cachingAllowed</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">Resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、设置jvm较大内存，编辑bin/catalina.bat，找到以下代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rem Guess CATALINA_HOME <span class="keyword">if</span> not defined</span><br></pre></td></tr></table></figure><p>在其上面增加代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_OPTS=-Xms512m -Xmx4096m -XX:PermSize=128M -XX:MaxPermSize=256m</span><br></pre></td></tr></table></figure><p>这里设置的Xmx为4G内存，如果安装的不是64位的JDK，那么在设置最大内存的时候，就会提示不支持(好像最多能设置到1G多点，要知道服务器内存是64G)。所以第一步为什么要安装64位的操作系统了。</p><p>7、设置tomcat最大并发数，方法：修改conf/server.xml，在Connector下增加以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span>  <span class="attr">maxThreads</span>=<span class="string">"1000"</span>  <span class="attr">minSpareThreads</span>=<span class="string">"100"</span> <span class="attr">maxSpareThreads</span>=<span class="string">"300"</span>  <span class="attr">acceptCount</span>=<span class="string">"100"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>以下是我的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">maxThreads</span>=<span class="string">"1000"</span> <span class="attr">minSpareThreads</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxSpareThreads</span>=<span class="string">"300"</span>  <span class="attr">acceptCount</span>=<span class="string">"100"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"GBK"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>  /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>org.springframework.web.context.ContextLoaderListener</title>
      <link href="/2019/09/10/tomcat1/"/>
      <url>/2019/09/10/tomcat1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u011781521/article/details/72936830" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li>一启动Tomcat就报错:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="number">1892</span>)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:<span class="number">1735</span>)</span><br><span class="line">at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:<span class="number">504</span>)</span><br><span class="line">at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:<span class="number">486</span>)</span><br><span class="line">at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:<span class="number">113</span>)</span><br><span class="line">at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:<span class="number">5034</span>)</span><br><span class="line">at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:<span class="number">5634</span>)</span><br><span class="line">at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:<span class="number">145</span>)</span><br><span class="line">at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="number">1571</span>)</span><br><span class="line">at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:<span class="number">1561</span>)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>解决方法</li></ul><ol><li>Maven项目构建的,报错的原因就是:启动的时候,没有把项目的JAR包一起发布.</li><li>解决方法就是,右键项目—-&gt;Deployment Assembly—-&gt;Add添加JAR到项目中去</li></ol><p><img src="/2019/09/10/tomcat1/1.png" alt></p><p>然后点击Apply就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Packet for query is too large</title>
      <link href="/2019/09/10/mysql10/"/>
      <url>/2019/09/10/mysql10/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jb51.net/article/140790.htm" target="_blank" rel="noopener">原文链接</a></p><blockquote><p><strong>报错信息：</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.PacketTooBigException: </span><br><span class="line"><span class="function">Packet <span class="keyword">for</span> query is too <span class="title">large</span> <span class="params">(<span class="number">1354</span> &gt; <span class="number">1024</span>)</span>.</span></span><br><span class="line"><span class="function">You can change <span class="keyword">this</span> value on the server by setting the max_allowed_packet' variable</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>MySQL根据配置文件会限制Server接受的数据包大小。有时候插入、更新或查询时数据包的大小，会受 <code>max_allowed_packet</code> 参数限制，导致操作失败。(<strong>查询数据库返回的数据包太大，超过了默认值</strong>)</p><blockquote><p><strong>初步探索:</strong></p></blockquote><p>查看 <code>max_allowed_packet</code> 参数：</p><p>在客户端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show VARIABLES like &apos;%max_allowed_packet%&apos;;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+-------------------+ </span><br><span class="line">| Variable_name      | Value  | </span><br><span class="line">+--------------------+-------------------+ </span><br><span class="line">| max_allowed_packet | 1024   | </span><br><span class="line">+--------------------+-------------------+</span><br></pre></td></tr></table></figure><blockquote><p><strong>修改方法</strong>：</p></blockquote><p>(1)修改配置文件</p><p>可以编辑<strong>my.cnf</strong>来修改(在windows下my.ini中),在<strong>[mysqld]</strong>段或者mysql的<strong>server配置</strong>段进行修改。</p><p><code>max_allowed_packet = 20M</code> </p><p>如果找不到my.cnf可以通过</p><p><code>mysql --help | grep my.cnf</code> </p><p>去寻找<strong>my.cnf</strong>文件。linux下该文件在<strong>/etc/</strong>下</p><p>(2)在mysql命令行中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global max_allowed_packet = 2*1024*1024*10 </span><br><span class="line">//这里的数值为字节数，这里改为20M，需要重新登陆客户端起作用</span><br></pre></td></tr></table></figure><p><strong>注：在客户端用命令修改后，只能暂时起作用，重新启动MYSQL后，会恢复原来的值</strong></p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cannot find template location(s) [classpathtemplates]</title>
      <link href="/2019/09/10/springboot5/"/>
      <url>/2019/09/10/springboot5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/testcs_dn/article/details/80914838" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><p>SpringBoot 项目启动后，可能在控制台看到这样一个警告：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WARN <span class="number">8904</span> --- [  restartedMain] o.s.b.a.f.FreeMarkerAutoConfiguration </span><br><span class="line"><span class="function">Cannot find template <span class="title">location</span><span class="params">(s)</span>: [classpath:/templates/]</span></span><br><span class="line"><span class="function"><span class="params">(please add some templates, check your FreeMarker configuration,</span></span></span><br><span class="line"><span class="function"><span class="params">or set spring.freemarker.checkTemplateLocation=<span class="keyword">false</span>)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><p>其实你可以忽略不必管它。但你如果不想看到它。</p><p><strong>解决方法(二选一):</strong></p><p>（1）在项目的 <strong>/src/main/resources/templates</strong> 目录下添加一个模板文件，比如 <strong>.jsp 或 .ftl</strong> 文件。</p><p>（2）打开项目配置文件 <code>application.properties</code>，有的人可能喜欢使用 .yml 格式的。</p><p>添加配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.freemarker.checkTemplateLocation=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理相关内容及日志</title>
      <link href="/2019/09/09/exception2/"/>
      <url>/2019/09/09/exception2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/09/09/exception2/1.jpg" alt="img"></p><h4 id="异常处理-概念"><a href="#异常处理-概念" class="headerlink" title="异常处理(概念)"></a><strong>异常处理(概念)</strong></h4><p>出现异常(<strong>程序在运行过程中所发生的不正常事件，它会中断正在运行的程序，java中控制台里显示了问题的描述信息和发生问题的位置</strong>)时采取的一系列的措施，使系统能够继续正常运行.</p><p><strong>注：</strong>java中所有的异常类型都以<strong>Exception</strong>单词结尾。</p><h4 id="三大错误"><a href="#三大错误" class="headerlink" title="三大错误"></a><strong>三大错误</strong></h4><h5 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h5><p>例如少写分号、使用中文双引号等，此类错误最易被解决，随着学习的深入，这些都将不再是问题。</p><a id="more"></a><h5 id="逻辑错误"><a href="#逻辑错误" class="headerlink" title="逻辑错误"></a>逻辑错误</h5><p>例如用错了运算符，结果是有的但是可能给我们预期的不一样，通过调试通常能解决这个问题。</p><h5 id="运行时错误（也可以叫异常"><a href="#运行时错误（也可以叫异常" class="headerlink" title="运行时错误（也可以叫异常)"></a>运行时错误（也可以叫异常)</h5><p>正常情况，或者正常输入都不会有问题，只有在某些特殊情况（比如：网络断了、硬盘电源线接触不良了等）或者特殊输入时（比如：输入了边界值），程序出现问题甚至崩溃。这种问题，最难被发现，有些问题甚至经过严格的测试，也不容易出现，java中必须提供相应的包含机制来搞定这类错误。</p><h4 id="表示异常情况"><a href="#表示异常情况" class="headerlink" title="表示异常情况"></a><strong>表示异常情况</strong></h4><p><strong>eg:</strong></p><blockquote><p>假如你开车不小心闯红灯，这时候一个交警向你敬个礼说：你好，你触犯《道路交通安全法》第26条：“红灯表示禁止通行”，依据《道路交通安全法》第90条：“处警告或者二十元以上二百元以下罚款”；对你罚款200元。如下图所示。这就是一个异常，怎么表示这个异常呢？</p></blockquote><p>这个异常<strong>有罚款金额200元，罚款原因：闯红灯，责任人：司机，处理人：交警张华</strong>。</p><p>Java语言是按照<strong>面向对象</strong>的思想来处理异常，使得程序具有更好的<strong>可维护性</strong>。</p><h4 id="Java异常处理机制具有以下优点"><a href="#Java异常处理机制具有以下优点" class="headerlink" title="Java异常处理机制具有以下优点"></a>Java异常处理机制具有以下优点</h4><p>​        1.把各种不同类型的异常情况进行分类，用Java类来表示异常情况，这种类被称为<strong>异常类</strong>。把异常情况表示成异常类，可以充分发挥类的<strong>可扩展</strong>和<strong>可重用</strong>的优势。</p><p>​         2.异常流程的代码和正常流程的代码分离，提高了程序的<strong>可读性</strong>，简化了程序的结构。</p><p>​         3.可以灵活地处理异常,<strong>如果当前方法有能力处理异常，就捕获并处理它,否则只需抛出异常,由方法调用者来处理它</strong>。</p><p><strong>Java已经把程序在运行中出现的大部分异常都设计好了，我们只需要直接拿着使用就行了</strong>。</p><h4 id="Java的异常体系结构"><a href="#Java的异常体系结构" class="headerlink" title="Java的异常体系结构"></a>Java的异常体系结构</h4><p><img src="/2019/09/09/exception2/2.png" alt="img"></p><p><strong>Exception</strong>是<strong>异常类的祖先</strong>，处于继承关系的<strong>最顶层</strong>.</p><p><img src="/2019/09/09/exception2/3.jpg" alt="img"></p><h4 id="如何控制处理异常的流程"><a href="#如何控制处理异常的流程" class="headerlink" title="如何控制处理异常的流程"></a>如何控制处理异常的流程</h4><p>正确运用Java提供的一套<strong>完整的异常处理机制</strong>，有助于提供程序的<strong>健壮性</strong>。</p><p>所谓程序的<strong>健壮性</strong>，就是指程序在正常情况下返回正确结果；如果遇到异常情况，程序也能采取周到的解决措施。相反，<strong>不健壮</strong>的程序则不能事先预计到可能会出现的异常，或没有提供强大的异常处理措施，导致<strong>程序终止</strong>或返回<strong>错误结果</strong>，很难检测到异常原因。</p><p>Java的异常处理机制主要是通过<strong>五个关键字</strong>来实现的：</p><p>1.<code>try</code>：我们通常把<strong>可能出现问题的代码</strong>放到try块中。</p><p>2.<code>catch</code>：如果try块中的代码在执行过程中，真的出现了异常，则<strong>catch用来捕获这个异常</strong>，从而让系统恢复正常不至于崩溃；如果<strong>try块中没有出现异常，则catch块中的代码，不会被执行</strong>。你可以认为catch是一个消防部门。</p><p><img src="/2019/09/09/exception2/4.png" alt="img"></p><p>注:catch后的小括号中是需要捕捉的异常类型参数.</p><ul><li>输入被除数为10.0  ：</li></ul><p>出现了两个异常：<strong><code>InputMismatchException</code></strong>和<strong><code>ArithmeticException</code></strong>。但程序并没有因为异常的出现而中断。</p><p><img src="/2019/09/09/exception2/5.png" alt="img"></p><ul><li>输入除数为0：</li></ul><p><img src="/2019/09/09/exception2/6.png" alt="img"></p><p><strong>实际应用中try-catch语句块分三种情况：</strong></p><p><strong>1、try语句块未出现异常</strong></p><p>如果try语句块中的代码在运行时<strong>没有发生异常</strong>，那么catch语句块中的所有语句将<strong>被忽略</strong>，不会执行</p><p><strong>2、 try语句块出现异常</strong></p><p>如果try语句块的代码在运行时<strong>出现异常</strong>，那么在try语句块中，出现异常的那行代码之后的代码将不会执行，而catch块中的语句<strong>都会执行</strong>.</p><p><strong>3.try语句块出现异常，catch不匹配 ？？</strong></p><p>如果try语句块的代码在运行时出现了异常，但是这个异常与catch中捕捉的<strong>异常类型不匹配</strong>，这时程序就中断（崩溃）。</p><p><img src="/2019/09/09/exception2/7.png" alt="img"></p><p><img src="/2019/09/09/exception2/8.png" alt="img"></p><p>最后一句“System.out.println(“程序执行完毕！”);”并没有执行；程序直接中断执行。</p><p><strong>注：当异常真正发生时，之后的代码不会再被执行。</strong></p><p><strong>多重catch块：</strong></p><p><img src="/2019/09/09/exception2/9.png" alt="img"></p><p><strong>注意：</strong></p><p>1.当try语句块出现异常时，Java系统会<strong>自上而下</strong>分别对每个catch块进行异常类型匹配，并执行<strong>第一个</strong>与异常类型<strong>匹配</strong>的catch块，这个catch块一旦执行，其后的所有catch块都会<strong>被忽略</strong>。</p><p>2.多重catch块正常的编写顺序是<strong>先子类后父类</strong>，最后一个一般都是顶层的<strong>Exception</strong>类。</p><p><strong>eg:</strong></p><p><img src="/2019/09/09/exception2/10.png" alt="img"></p><p>3.<code>finally</code>:try块或catch块的代码执行后，如果存在finally块，则执行此块中代码。</p><blockquote><p>释放资源的代码一般写在finally中。</p><p>finally{</p><ul><li><p>在所有其他的错误过程发生之后被无条件执行的语句</p></li><li><p>可以在异常发生或未发生的之后<strong>无条件释放资源</strong>。</p></li><li><p>包含异常处理程序和<strong>清理</strong>代码。</p></li></ul><p>}</p></blockquote><p><img src="/2019/09/09/exception2/11.png" alt="img"></p><p>关闭水龙头将<strong>不被执行</strong>，这样的流程显然是<strong>不安全</strong>的，必须要保证关闭水龙头在任何情况下都要被执行。</p><p><strong>Finally</strong>代码块能保证特定的操作<strong>总会被执行</strong>。放在该语句块中的代码不管try语句是否出现异常都会被执行，特别是当try-catch语句块中有<strong>return</strong>语句时，finally块还是会<strong>被执行</strong>。return语句会在finally语句块<strong>之后</strong>执行。</p><p><img src="/2019/09/09/exception2/12.png" alt="img"></p><p><img src="/2019/09/09/exception2/13.png" alt="img"></p><p>4.<code>throw</code>：程序员可以利用此关键字来<strong>自己抛出一个异常</strong>。在某些时候是非常有必要的。</p><p><img src="/2019/09/09/exception2/14.png" alt="img"></p><p><img src="/2019/09/09/exception2/15.png" alt="img"></p><p>5.<code>throws</code>：用在方法前声明此方法可能会产生某种类型异常，它强制要求方法的调用者必须用try-catch来处理。</p><p><img src="/2019/09/09/exception2/16.jpg" alt="img"></p><p>throws关键字后面可以同时声明<strong>多个异常</strong>，中间用<strong>逗号隔开</strong>。</p><h5 id="Exception类自带的方法"><a href="#Exception类自带的方法" class="headerlink" title="Exception类自带的方法"></a>Exception类自带的方法</h5><p>可以帮我们<strong>了解异常的相关信息</strong>：</p><p><img src="/2019/09/09/exception2/17.jpg" alt="img"></p><p><strong>eg：</strong></p><p><img src="/2019/09/09/exception2/18.png" alt="img"></p><p><img src="/2019/09/09/exception2/19.png" alt="img"></p><h4 id="异常处理语句的语法规则"><a href="#异常处理语句的语法规则" class="headerlink" title="异常处理语句的语法规则"></a>异常处理语句的语法规则</h4><ol><li><p><strong>try代码块不能脱离catch代码块或finally代码块而单独存在。</strong>try代码块后面至少有一个catch代码块或finally代码块；否则编译出错.</p></li><li><p><strong>try代码块后面可以零个或多个catch代码块，还可以有零个或至多一个finally代码块</strong>。如果catch代码块和finally代码块并存，finally代码块必须在catch代码块后面。</p></li><li><p><strong>try代码块后面可以只跟finally代码块</strong>。</p></li><li><p><strong>在try代码块中定义的变量的作用域为try代码块，在catch代码块和finally代码块不能访问该变量</strong>。</p></li></ol><p><img src="/2019/09/09/exception2/20.png" alt="img"></p><p>5.<strong>当try代码块后面有多个catch代码块时，Java虚拟机会把实际抛出的异常对象依次和各个catch代码块声明的异常类型匹配，如果异常对象为某个异常类型或其子类的实例，就执行这个catch代码块，而不会再执行其他的catch代码块</strong>。</p><p>在以下代码块中文件读写的语句会抛出<code>FileNotFoundException</code>异常，<code>FileNotFoundException</code>类是<code>IOException</code>类的子类，而<code>IOException</code>类是<code>Exception</code>的子类。Java系统把<code>FileNotFoundException</code>对象于<code>IOException</code>类匹配，因此当出现<code>FileNotFoundException</code>时，程序的打印结果为“文件读写错误”。</p><p><img src="/2019/09/09/exception2/21-1.jpg" alt="img"></p><p>6.<strong>如果一个方法可能出现检查异常，要么用try…catch语句捕获，要么用throws字句声明将其抛出，否则会导致编译错误</strong>。</p><p><img src="/2019/09/09/exception2/22.jpg" alt="img"></p><p><strong>使用try…catch语句处理异常？？？？</strong></p><p><img src="/2019/09/09/exception2/23.png" alt="img"></p><p><strong>使用throws语句声明抛出异常</strong></p><p><img src="/2019/09/09/exception2/24.png" alt="img"></p><p>7.<strong>throw语句后面不允许紧跟其他的语句，因为这些语句永远不会被执行</strong>.</p><p><img src="/2019/09/09/exception2/25.png" alt="img"></p><h5 id="throw-与-throws"><a href="#throw-与-throws" class="headerlink" title="throw 与  throws"></a>throw 与  throws</h5><ul><li><p>throw:用于语句中抛出异常，后跟一个异常对象，只能抛出一个。</p></li><li><p>throws:用于抛出异常，将异常抛出方法体外，后跟异常类型，可抛多个。</p></li></ul><h4 id="方法退出有几种方式"><a href="#方法退出有几种方式" class="headerlink" title="方法退出有几种方式"></a>方法退出有几种方式</h4><p>1.正常执行完退出。</p><p>2.遇到return退出。</p><p>3.遇到Exception(异常)退出。</p><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><blockquote><p>把软件系统在运行期间产生的异常信息记录到一个文件</p></blockquote><h5 id="log4j日志工具"><a href="#log4j日志工具" class="headerlink" title="log4j日志工具"></a><strong>log4j日志工具</strong></h5><p><strong>简介</strong>log4j是<strong>Apache</strong>的一个开源项目，也是一个非常优秀的日志记录工具。通过使用log4j，我们可以很方便的控制日志的<strong>输出级别</strong>、<strong>格式</strong>以及<strong>目的地</strong>。 log4j官方站点是<a href="http://logging.apache.org/log4j/" target="_blank" rel="noopener">http://logging.apache.org/log4j/</a>要使用log4j，首先需要到官方网站上下载log4j的Jar文件。 <strong>Jar即Java Archive，称之为Java 归档文件</strong>。它是一种与平台无关的文件格式，可以把许多文件组合成一个压缩文件，可以简单的认为Jar就是Java中的rar文件。我们使用普通的压缩包软件就可以把Jar文件进行解压。下图就是log4j的Jar被解压后的文件。</p><p><img src="/2019/09/09/exception2/26.jpg" alt="img"></p><p>我们可以看到Jar里面大部分都是编译好的class文件，将来使用log4j时就需要用到其中的<strong>Logger.class</strong>。</p><h5 id="使用log4j"><a href="#使用log4j" class="headerlink" title="使用log4j"></a><strong>使用log4j</strong></h5><p><strong>eg:</strong></p><p>将提供给大家的log4j-1.2.17.jar文件，导入到项目中，使用Logger对象，记录异常信息到文件中的同时，把异常信息一并显示到控制台界面中。</p><p>实现步骤：</p><p>​        a. 把log4j的Jar文件导入到项目中。在Eclipse中的项目上单击右键，然后在右键菜单中单击最后一项【Properties】打开如下图所示的对话框。</p><p><img src="/2019/09/09/exception2/27.jpg" alt="img"></p><p>​    在对话框中先选择左边的【Java Build Path】节点，然后单击右边的【Libraries】选项卡，最后单击【Add External JARs…】选择本机上log4j的Jar文件就行了。</p><p>​         b.创建和编写log4j.properties文件。  <strong>注意，请把此配置文件放到src目录下</strong>，该文件是log4j的配置文件，用来配置日志的相关信息，例如日志的输出格式、级别和目的地等。下面实例给出了该配置文件的一个参考代码，各配置项的具体含义会在后面做详细讲解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将日志信息输出到控制台</span></span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j**.ConsoleAppender**</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout</span><br><span class="line"></span><br><span class="line"><span class="comment">//将日志信息输出到test.log</span></span><br><span class="line"></span><br><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line"></span><br><span class="line">log4j.appender.file.File=**test.log**</span><br><span class="line"></span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %l %m%n</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置日志的输出级别和目的地</span></span><br><span class="line"></span><br><span class="line">log4j.rootLogger=**debug**, stdout,file</span><br></pre></td></tr></table></figure><p>​        c.在程序中使用log4j编码实现记录日志，<strong>注意</strong>：第8行的<strong>log</strong>为当前类的类名，如果你的类名为<strong>Test</strong>，则需要修改为Test。</p><p><img src="/2019/09/09/exception2/28.jpg" alt="img"></p><p>在上述代码中，我们首先创建了一个Logger对象，这个对象是用来替代System.out 的日志记录器。它提供了很多方法来输出不同级别的日志信息，见下表。</p><table><thead><tr><th><strong>方法列表</strong></th><th>级别</th></tr></thead><tbody><tr><td>public void fatal(Objectmsg)</td><td>致命的</td></tr><tr><td><strong>public void error(Objectmsg)</strong></td><td>错误的</td></tr><tr><td>public void warn(Objectmsg)</td><td>警告的</td></tr><tr><td>public void info(Objectmsg)</td><td>信息提示的</td></tr><tr><td>public void debug(Object msg)</td><td>调试的</td></tr></tbody></table><p>运行时我们先输入一个10.0产生一个异常，然后再次运行程序输入10和0会再产生一个异常，最后打开test.log文件就能看到日志信息，如下图所示。</p><p><img src="/2019/09/09/exception2/29.jpg" alt="img"></p><h5 id="log4j配置文件"><a href="#log4j配置文件" class="headerlink" title="log4j配置文件"></a><strong>log4j配置文件</strong></h5><p>​        通过上面的例子我们发现在项目中使用log4j非常简单，其中一个很关键的地方就是那个log4j.properties配置文件。下面我们就对这个配置文件进行详细讲解。</p><h6 id="配置日志的输出级别和有效目的地"><a href="#配置日志的输出级别和有效目的地" class="headerlink" title="配置日志的输出级别和有效目的地"></a>配置日志的输出级别和有效目的地</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置日志的输出级别和有效目的地</span></span><br><span class="line">log4j.rootLogger=debug,stdout,file</span><br></pre></td></tr></table></figure><p>log4j.rootLogger属性的值有三个，用逗号进行了分隔。第一个值表示输出日志的<strong>级别</strong>，后面两个值表示哪些<strong>目的地</strong>有效。log4j的主要输出级别有：<code>fatal、error、warn、info、debug</code>， 它们的优先级<strong>从高到低</strong>依次为：<strong><code>fatal &gt; error &gt; warn &gt; info &gt;debug</code></strong>。 这些级别与上表中的方法有对应关系，日志记录器（Logger对象）将只输出那些级别<strong>高于</strong>或<strong>等于</strong>它的级别的信息。</p><p><strong>eg:</strong></p><p>如果级别设置为info，那么在程序中调用<strong>fatal(Object msg)</strong>、<strong>error(Object msg)</strong> 、<strong>warn(Object msg)</strong>、<strong>info(Object msg)</strong>方法将输出日志信息，而调用<strong>debug(Object msg)</strong>方法将不会输出日志信息。</p><h6 id="配置日志输出目的地"><a href="#配置日志输出目的地" class="headerlink" title="配置日志输出目的地"></a>配置日志输出目的地</h6><p>log4j允许将日志输出到多个目的地，一个输出目的地被称作一个appender。log4j中最常用的<strong>appender</strong>有以下两种：</p><p> a.<strong><code>ConsoleAppender</code></strong>：</p><p>输出日志信息到控制台，可以通过属性log4j.appender.stdout进 行配置，与之相关的<strong>log4j.appender.stdout.Target</strong>属性的默认值是<strong>System.out</strong>。</p><p>b.<strong><code>FileAppender</code></strong>：</p><p>输出日志信息到一个文件，可以通过属性log4j.appender.file进行配 置，与之相关的<strong>log4j.appender.file.File</strong>属性可以配置该文件的<strong>路径</strong>及<strong>名称</strong>，该文件不需要我们事先创建好，如果不存在，log4j会<strong>自动创建</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将日志信息输出到控制台</span></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line"></span><br><span class="line"><span class="comment">//将日志信息输出到文件</span></span><br><span class="line"></span><br><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line"></span><br><span class="line">log4j.appender.file.File=test.log</span><br></pre></td></tr></table></figure><h6 id="日志布局及格式"><a href="#日志布局及格式" class="headerlink" title="日志布局及格式"></a>日志布局及格式</h6><p>log4j可以配置日志的布局及格式，最常用的有以下三种：</p><p>(1) <strong><code>HTMLLayout</code></strong>：将日志信息输出为HTML表格。参考代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.file=org.apache.log4j.FileAppender</span><br><span class="line">log4j.appender.file.File=test.html</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.HTMLLayout</span><br></pre></td></tr></table></figure><p>运行结果如下图所示。</p><p><img src="/2019/09/09/exception2/30.jpg" alt="img"></p><p>(2) <strong><code>SimpleLayout</code></strong>：这是最简单的一种输出格式，只输出了日志级别和异常提示信息。</p><p>(3) <strong><code>PatternLayout</code></strong>：自定义输出格式，需要通过log4j.appender.file.layout.ConversionPattern属性来设置格式，常用的参数如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%d：用来设置输出日志的日期和时间格式，默认格式为IS08601，也可以自定义格 式，例如%d&#123;yyyy-MM-dd HH : mm : ss&#125;，输出格式类似于<span class="number">2010</span>-<span class="number">03</span>-<span class="number">0917</span> : <span class="number">51</span>。</span><br><span class="line"></span><br><span class="line">%m：用来输出代码中设置的异常提示信息。</span><br><span class="line"></span><br><span class="line">%n：用来输出一个回车换行符。</span><br><span class="line"></span><br><span class="line">%I：用来输出日志事件的发生位置，包括类名、发生错误的行号等信息。</span><br><span class="line"></span><br><span class="line">%F：用来输出文件名。</span><br><span class="line"></span><br><span class="line">%M：用来输出方法名。</span><br><span class="line"></span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line">log4j.appender.file.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss&#125; %l %m%n</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><code>log4j.properties</code>文件<strong>不能</strong>随意命名，而且<strong>必须</strong>放置在<strong>src根目录</strong>下。</p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
            <tag> Log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图形展示状态码</title>
      <link href="/2019/09/09/http2/"/>
      <url>/2019/09/09/http2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/09/09/http2/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP-IP</title>
      <link href="/2019/09/09/tcp-ip/"/>
      <url>/2019/09/09/tcp-ip/</url>
      
        <content type="html"><![CDATA[<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p> <a href="https://www.cnblogs.com/qishui/p/5428938.html" target="_blank" rel="noopener"><strong>OSI七层模型与TCP/IP五层模型</strong></a></p><p> <a href="https://www.runoob.com/tcpip/tcpip-tutorial.html" target="_blank" rel="noopener"><strong>TCP/IP教程</strong></a></p><p> PS:大致内容：OSI参考模型 、PDU、对等通信、TCP/IP 、协议族</p><h4 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h4><ul><li>OSI（Open System Interconnect）,即开放式系统互联。 一般都叫OSI参考模型,是ISO（国际标准化组织）组织在1985年研究的网络互连模型。ISO为了更好的使网络应用更为普及,推出了OSI参考模型。其含义就是推荐所有公司使用这个规范来控制网络。这样所有公司都有相同的规范,就能互联了。</li><li>OSI定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层、应用层）,即ISO开放互连系统参考模型。</li></ul><a id="more"></a><p><img src="/2019/09/09/tcp-ip/t1.png" alt="img"></p><hr><h5 id="协议数据单元PDU"><a href="#协议数据单元PDU" class="headerlink" title="协议数据单元PDU"></a><a href="#">协议数据单元</a>PDU</h5><p>(Protocol Data Unit)是指对等<a href="#">层次</a>之间传递的数据单位。 协议数据单元(Protocol Data Unit )物理层的 PDU是<a href="#">数据位</a>(bit),<a href="#">数据链路层</a>的 PDU是<a href="#">数据帧</a>(frame),网络层的PDU是<a href="#">数据包</a>(packet),<a href="#">传输层</a>的 PDU是<a href="#">数据段</a>(segment)其他更高层次的PDU是报文(message)</p><blockquote><p><strong>Q：什么时候有PDU？</strong></p><p><strong>A：当需要跟别人通信时候才有。</strong></p></blockquote><p>整个过程以公司A和公司B的一次商业报价单发送为例子进行讲解。</p><h6 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h6><p>OSI参考模型中最靠近用户的一层,是<strong>为计算机用户提供应用接口(软件)</strong>,也<strong>为用户直接提供各种网络服务</strong>。我们常见应用层的网络服务协议有：HTTP,HTTPS,FTP,POP3,SMTP等。<code>公司A的老板就是我们所述的用户,而他要发送的商业报价单,就是应用层提供的一种网络服务,当然,老板也可以选择其他服务,比如说:发一份商业合同,发一份询价单,等等</code></p><h6 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h6><p><strong>提供各种用于应用层数据的编码和转换功能</strong>,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要,该层可提供一种标准表示形式,用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。<code>由于公司A和公司B是不同国家的公司，他们之间的商定统一用英语作为交流的语言，所以此时表示层(公司的文秘),就是将应用层的传递信息转翻译成英语。同时为了防止别的公司看到,公司A的人也会对这份报价单做一些加密的处理。这就是表示的作用,将应用层的数据转换翻译等</code></p><h6 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h6><p><strong>负责建立、管理和终止表示层实体之间的通信会话</strong>。该层的通信由不同设备中的应用程序之间的服务请求和响应组成.<code>会话层的同事拿到表示层的同事转换后资料,（会话层的同事类似公司的外联部）,会话层的同事那里可能会掌握本公司与其他好多公司的联系方式，这里公司就是实际传递过程中的实体。他们要管理本公司与外界好多公司的联系会话。当接收到表示层的数据后，会话层将会建立并记录本次会话，他首先要找到公司B的地址信息，然后将整份资料放进信封,并写上地址和联系方式。准备将资料寄出。等到确定公司B接收到此份报价单后,此次会话就算结束了,外联部的同事就会终止此次会话</code></p><h6 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h6><p>传输层建立了主机端到端的链接,传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务,包括处理差错控制和流量控制等问题,<strong>用于实现数据的可靠传输</strong>。该层向高层屏蔽了下层数据通信的细节,使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的TCP、 UDP就是在这一层。端口号既是这里的“端”。<code>传输层就相当于公司中的负责快递邮件收发的人,公司自己的投递员,他们负责将上一层的要寄出的资料投递到快递公司或邮局</code></p><h6 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h6><p>本层通过IP寻址来建立两个节点之间的连接,为源端的运输层送来的分组,选择合适的路由和交换节点,正确无误地按照地址传送给目的端的运输层(提供三层寻址/IP地址和三层通信-路由器功能)。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。<code>网络层就相当于快递公司庞大的快递网络,全国不同的集散中心,比如说,从深圳发往北京的顺丰快递(陆运为例啊，空运好像直接就飞到北京了),首先要到顺丰的深圳集散中心,从深圳集散中心再送到武汉集散中心,从武汉集散中心再寄到北京顺义集散中心。这个每个集散中心,就相当于网络中的一个IP节点</code></p><h6 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h6><p>(提供二层寻址/MAC地址和二层通信-交换机功能)将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。数据链路层又分为2个子层：逻辑链路控制子层(LLC)和媒体访问控制子层(MAC)。MAC子层处理CSMA/CD算法、数据出错校验、成帧等;LLC子层定义了一些字段使上次协议能共享数据链路层。 在实际使用中，LLC子层并非必需的。</p><h6 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h6><p>实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的<strong>传输介质</strong>。<code>快递寄送过程中的交通工具,就相当于我们的物理层，例如汽车、火车、飞机、船</code></p><h4 id="通信特点：对等通信"><a href="#通信特点：对等通信" class="headerlink" title="通信特点：对等通信"></a>通信特点：对等通信</h4><p>对等通信,为了使数据分组从源传送到目的地,源端OSI模型的每一层都必须与目的端的对等层进行通信,这种通信方式称为对等层通信。在每一层通信过程中,使用本层自己协议进行通信。</p><h5 id="TCP-IP-是因特网的通信协议"><a href="#TCP-IP-是因特网的通信协议" class="headerlink" title="TCP/IP 是因特网的通信协议"></a>TCP/IP 是因特网的通信协议</h5><ul><li>TCP/IP 通信协议定义了电子设备(比如计算机)如何连入因特网,以及数据如何在它们之间传输的标准。</li><li>浏览器使用 TCP/IP 协议进入服务器,服务器使用 TCP/IP 协议来发送 HTML 到浏览器。</li><li>在 TCP/IP 中包含一系列用于处理数据通信的协议：</li><li>TCP (传输控制协议) - 应用程序之间通信</li><li>UDP (用户数据报协议) - 应用程序之间的简单通信</li><li>IP (网际协议) - 计算机之间的通信</li><li>ICMP (因特网消息控制协议) - 针对错误和状态</li><li>DHCP (动态主机配置协议) - 针对动态寻址</li><li>TCP 使用固定的连接</li></ul><p>TCP 用于应用程序之间的通信。当应用程序希望通过 TCP 与另一个应用程序通信时,它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方”握手”之后,TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。UDP 和 TCP 很相似,但是更简单,同时可靠性低于 TCP。</p><ul><li>IP 是无连接的</li></ul><p>IP 用于计算机之间的通信。IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。IP 负责将每个包路由至它的目的地。</p><ul><li>IP 路由器</li></ul><p>当一个 IP 包从一台计算机被发送，它会到达一个 IP 路由器。IP 路由器负责将这个包路由至它的目的地，直接地或者通过其他的路由器。在一个相同的通信中，一个包所经由的路径可能会和其他的包不同。而路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址。</p><ul><li>TCP/IP 意味着 TCP 和 IP 在一起协同工作。</li></ul><blockquote><p><strong>TCP 负责应用软件(比如您的浏览器)和网络软件之间的通信。IP 负责计算机之间的通信。</strong></p><p><strong>TCP 负责将数据分割并装入 IP 包,然后在它们到达的时候重新组合它们。IP 负责将包发送至接受者。</strong></p></blockquote><h5 id="TCP-IP五层协议和OSI的七层协议对应关系如下"><a href="#TCP-IP五层协议和OSI的七层协议对应关系如下" class="headerlink" title="TCP/IP五层协议和OSI的七层协议对应关系如下"></a>TCP/IP五层协议和OSI的七层协议对应关系如下</h5><p><img src="/2019/09/09/tcp-ip/t2.png" alt="img"></p><ul><li>在每一层都工作着不同的设备：</li></ul><p><img src="/2019/09/09/tcp-ip/t3.png" alt="img"></p><ul><li>在每一层实现的协议也各不同，即每一层的服务也不同.下图列出了每层主要的协议：</li></ul><p><img src="/2019/09/09/tcp-ip/t4.png" alt="img"></p><h4 id="协议族"><a href="#协议族" class="headerlink" title="协议族"></a>协议族</h4><p>TCP/IP 是基于 TCP 和 IP 这两个最初的协议之上的不同的通信协议的大集合。</p><table><thead><tr><th>协议</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>TCP</td><td>传输控制协议(Transmission Control Protocol)</td><td>用于从应用程序到网络的数据传输控制,负责在数据传送之前将它们分割为 IP 包,然后在它们到达的时候将它们重组</td></tr><tr><td>IP</td><td>网际协议(Internet Protocol)</td><td>负责计算机之间的通信,负责在因特网上发送和接收数据包</td></tr><tr><td>HTTP</td><td>超文本传输协议(Hyper Text Transfer Protocol)</td><td>负责 web 服务器与 web 浏览器之间的通信,用于从 web 客户端（浏览器）向 web 服务器发送请求，并从 web 服务器向 web 客户端返回内容（网页）</td></tr><tr><td>HTTPS</td><td>安全的 HTTP(HTTP Secure)</td><td>负责在 web 服务器和 web 浏览器之间的安全通信,作为有代表性的应用，HTTPS 会用于处理信用卡交易和其他的敏感数据</td></tr><tr><td>SSL</td><td>安全套接字层(Secure Sockets Layer)</td><td>用于为安全数据传输加密数据</td></tr><tr><td>SMTP</td><td>简易邮件传输协议(Simple Mail Transfer Protocol)</td><td>用于电子邮件的传输,可以传送纯文本，但是无法传输诸如图片、声音或者电影之类的二进制数据(SMTP 使用 MIME 协议通过 TCP/IP 网络来发送二进制数据。MIME 协议会将二进制数据转换为纯文本)</td></tr><tr><td>MIME</td><td>多用途因特网邮件扩展(Multi-purpose Internet Mail Extensions)</td><td>使 SMTP 有能力通过 TCP/IP 网络传输多媒体文件,包括声音、视频和二进制数据</td></tr><tr><td>IMAP</td><td>因特网消息访问协议(Internet Message Access Protocol)</td><td>用于存储和取回电子邮件(有能力在下载邮件之前先通过邮件服务器端查看他们。通过 IMAP,可以选择下载这些邮件或者仅仅是删除它们)</td></tr><tr><td>POP</td><td>邮局协议(Post Office Protocol)</td><td>用于从电子邮件服务器向个人电脑下载电子邮件(一旦它连接上邮件服务器，您的所有的邮件都会被下载到邮件程序中)</td></tr><tr><td>FTP</td><td>文件传输协议(File Transfer Protocol)</td><td>负责计算机之间的文件传输</td></tr><tr><td>NTP</td><td>网络时间协议(Network Time Protocol)</td><td>用于在计算机之间同步时间(钟)</td></tr><tr><td>DHCP</td><td>动态主机配置协议(Dynamic Host Configuration Protocol)</td><td>用于向网络中的计算机分配动态 IP 地址</td></tr><tr><td>SNMP</td><td>简单网络管理协议(Simple Network Management Protocol)</td><td>用于计算机网络的管理</td></tr><tr><td>LDAP</td><td>轻量级的目录访问协议(Lightweight Directory Access Protocol)</td><td>用于从因特网搜集关于用户和电子邮件地址的信息</td></tr><tr><td>ICMP</td><td>因特网消息控制协议(Internet Control Message Protocol)</td><td>负责网络中的错误处理</td></tr><tr><td>ARP</td><td>地址解析协议(Address Resolution Protocol)</td><td>用于通过 IP 来查找基于 IP 地址的计算机网卡的硬件地址</td></tr><tr><td>RARP</td><td>反向地址转换协议(Reverse Address Resolution Protocol)</td><td>用于通过 IP 查找基于硬件地址的计算机网卡的 IP 地址</td></tr><tr><td>BOOTP</td><td>自举协议(Boot Protocol)</td><td>用于从网络启动计算机</td></tr><tr><td>PPTP</td><td>点对点隧道协议(Point to Point Tunneling Protocol)</td><td>用于私人网络之间的连接(隧道)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> TCP </category>
          
          <category> IP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NatApp免费使用需知</title>
      <link href="/2019/09/09/natapp1/"/>
      <url>/2019/09/09/natapp1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/fly910905/article/details/85244006" target="_blank" rel="noopener">原文链接</a></p><h4 id="NatApp注册安装使用"><a href="#NatApp注册安装使用" class="headerlink" title="NatApp注册安装使用"></a>NatApp注册安装使用</h4><p><img src="/2019/09/09/natapp1/1.png" alt="img"></p><blockquote><p><strong>NatApp免费内网穿透，需要支付宝实名认证（笔者于2018年12月25日操作【2019也可参考】）；</strong></p><p><strong>NatApp免费内网穿透，会不定时强制更换域名/端口；</strong></p><p><strong>NatApp免费内网穿透，免费隧道/HK_2型隧道不支持https；</strong></p><p><strong>NatApp免费内网穿透使用，需要下载客户端（如：windows下的natapp.exe）和配置config.ini文件</strong></p></blockquote><a id="more"></a><h5 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h5><p>在NatApp上注册账号：<a href="https://natapp.cn/register" target="_blank" rel="noopener">https://natapp.cn/register</a> </p><p><img src="/2019/09/09/natapp1/2.png" alt="img"></p><h5 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h5><p>我的账户–实名认证–支付宝扫码确认 </p><p><img src="/2019/09/09/natapp1/15.png" alt="img"></p><h5 id="购买隧道"><a href="#购买隧道" class="headerlink" title="购买隧道"></a>购买隧道</h5><p>1.点击左边 购买隧道,免费</p><p><img src="/2019/09/09/natapp1/3.png" alt="img"></p><p>2.选择端口（如：8080）进行内网穿透，并免费购买</p><p>一个注册用户可<strong>免费拥有2条不同协议的隧道</strong></p><p>隧道协议:</p><p>Web: 普通型http(s)隧道穿透,用于搭建网站,微信开发等穿透到本地web服务.  TCP: 端口转发 应用于SSH,数据库,远程桌面,GAME等基于TCP连接的一切应用任您想象~ UDP: 端口转发 应用于游戏,远程开机等基于UDP协议的一切应用 选定后不可更改 </p><p><img src="/2019/09/09/natapp1/4.png" alt="img"></p><h5 id="客户端下载和运行"><a href="#客户端下载和运行" class="headerlink" title="客户端下载和运行"></a>客户端下载和运行</h5><p>1.下载客户端</p><p>在 natapp.cn 根据您的本机下载对应的客户端,比如我的本机是win7,64位,则下载Windows 64位的客户端</p><p>客户端地址：<a href="https://natapp.cn/#download" target="_blank" rel="noopener">https://natapp.cn/#download</a> </p><p><img src="/2019/09/09/natapp1/5.png" alt="img"></p><p>下载之后,解压至任意目录,得到natapp.exe</p><p><img src="/2019/09/09/natapp1/6.png" alt="img"></p><h5 id="取得authtoken"><a href="#取得authtoken" class="headerlink" title="取得authtoken"></a>取得authtoken</h5><p>在网站后台,我的隧道处,可以看到刚才购买的隧道</p><p>点击复制,即可得到 authtoken 这个authtoken便是您的隧道登录凭证</p><p><img src="/2019/09/09/natapp1/7.png" alt="img"></p><h5 id="运行natapp"><a href="#运行natapp" class="headerlink" title="运行natapp"></a>运行natapp</h5><h6 id="a-config-ini方式-推荐"><a href="#a-config-ini方式-推荐" class="headerlink" title="a) config.ini方式 (推荐)"></a>a) config.ini方式 (推荐)</h6><p>config.ini文件下载地址：<a href="https://natapp.cn/article/config_ini" target="_blank" rel="noopener">https://natapp.cn/article/config_ini</a> </p><p>根据操作系统下载不同的config.ini文件，到刚才下载的natapp.exe同级目录 【注意：将config.ini放在客户端的同级目录】</p><p>将得到的authtoken填进去 (其他地方都不填),然后保存 </p><p><img src="/2019/09/09/natapp1/8.png" alt="img"></p><p><img src="/2019/09/09/natapp1/9.png" alt="img"></p><p>windows下,直接双击natapp.exe 即可.</p><blockquote><p><strong>在Linux/Mac 下 需要先给执行权限   chmod a+x natapp 然后再运行./natapp</strong> </p></blockquote><h6 id="b-cmd-authtoken-参数方式运行"><a href="#b-cmd-authtoken-参数方式运行" class="headerlink" title="b) cmd -authtoken= 参数方式运行"></a>b) cmd -authtoken= 参数方式运行</h6><p>windows ,点击开始-&gt;运行-&gt;命令行提示符 后进入 natapp.exe的目录</p><p> <strong>natapp -authtoken=9ab6b9040a624f40</strong> </p><p> linux ,同样给予可执行权限之后,运行  <strong>./natapp -authtoken=9ab6b9040a624f40</strong> </p><p><strong>注意</strong>参数输入正确性,不要有多余的空格等!</p><p>运行成功,都可以得到如下界面:</p><p><img src="/2019/09/09/natapp1/10.png" alt="img"></p><table><thead><tr><th>Tunnel Status :Online</th><th>代表链接成功</th></tr></thead><tbody><tr><td>Version</td><td>当前客户端版本,如果有新版本,会有提示</td></tr><tr><td>Forwarding</td><td>当前穿透 网址 或者端口</td></tr><tr><td>Web Interface</td><td>是本地Web管理界面,可在隧道配置打开或关闭,仅用于web开发测试</td></tr><tr><td>Total Connections</td><td>总连接数</td></tr></tbody></table><h5 id="本机建立web服务并启动"><a href="#本机建立web服务并启动" class="headerlink" title="本机建立web服务并启动"></a><strong>本机建立web服务并启动</strong></h5><p>本机建立启动web服务,如 nginx/apache/iis 等，端口为隧道中配置的端口（如：8080）</p><p>确保 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> 可以访问</p><p><img src="/2019/09/09/natapp1/11.png" alt="img"></p><h5 id="使用Natapp分配的网址"><a href="#使用Natapp分配的网址" class="headerlink" title="使用Natapp分配的网址"></a>使用Natapp分配的网址</h5><p>将natapp分配的网址(运行成功中的Forwarding )，鼠标选定然后复制下来(选定之后单击鼠标右键)，</p><p>在浏览器中访问,可以看到内网穿透成功了!</p><p><img src="/2019/09/09/natapp1/12.png" alt="img"></p><h5 id="NatApp修改映射IP"><a href="#NatApp修改映射IP" class="headerlink" title="NatApp修改映射IP"></a>NatApp修改映射IP</h5><p>我的渠道，找到需要修改映射IP的渠道，点击配置</p><p><img src="/2019/09/09/natapp1/13.png" alt="img"></p><p>本地地址中修改，默认127.0.0.1 可改为其他内网地址</p><p><img src="/2019/09/09/natapp1/14.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具及技术 </category>
          
          <category> NatApp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NatApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse导出Maven项目生成war包</title>
      <link href="/2019/09/09/eclipse1/"/>
      <url>/2019/09/09/eclipse1/</url>
      
        <content type="html"><![CDATA[<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p><a href="https://www.cnblogs.com/qlqwjy/p/8231032.html" target="_blank" rel="noopener">https://www.cnblogs.com/qlqwjy/p/8231032.html</a></p><p><a href="https://blog.csdn.net/lt_yl/article/details/78458538" target="_blank" rel="noopener">https://blog.csdn.net/lt_yl/article/details/78458538</a></p><h5 id="第一种方法：maven-build"><a href="#第一种方法：maven-build" class="headerlink" title="第一种方法：maven  build"></a>第一种方法：maven  build</h5><p>①eclipse中，在需要打包的项目名上右击选中，然后把鼠标光标指向弹出框中的“run as”：会看到在这个弹出框的右侧会出现一个悬浮窗，如下：</p><a id="more"></a><p><img src="/2019/09/09/eclipse1/2.png" alt="img"></p><p>②在上边的第二个悬浮窗鼠标点击“maven  clean”，maven会清除掉之前对这个项目的打包信息；执行以后在eclipse的控制台console会看到如下信息：</p><p><img src="/2019/09/09/eclipse1/3.png" alt="img"></p><p>③重复第一、二步，选择“maven  build”，会看到如下弹出界面，在“Goals”后的文本框内输入<strong>“-X package”</strong>,勾选上下方的<strong>“update snapshots”和“skip tests”</strong>，然后点击右下方的“run”.</p><p>④Run之后可以看到eclipse控制台输出如下内容，代表打包成功：</p><p><img src="/2019/09/09/eclipse1/4.png" alt="img"></p><p>⑤然后在项目名上右击，选择“refresh”刷新，再打开项目目录，可以看到在项目下的target下已经生成了一个“你的项目名.war”的文件，.war结尾，项目名开头。把这个.war结尾的文件拷贝到服务器中，例如tomcat的webapps目录下，启动tomcat服务器，然后就可以在浏览器中正常访问这个web项目了。</p><p><img src="/2019/09/09/eclipse1/5.png" alt="img"></p><p><strong>项目名称修改时候的war包注意事项：</strong></p><p>①正常打包，生成的文件名就是项目名，但是如果我们更改过项目名，那么打包后的文件名依旧是之前的项目名，而不是更改后的；例如我把下面的planSystem1项目名改为myPlanSystem，再打包，就会看到生成的文件依旧是planSystem1.war,如图：</p><p><img src="/2019/09/09/eclipse1/6.png" alt="img"></p><p>②这时候需要打开上图中另一个箭头所指的“pom.xml”修改一些东西，打开pom.xml，在如下界面中点击箭头所指的地方，在出现的代码区域搜索“finalName”，会看到finalName中间依旧是之前的项目名：</p><p><img src="/2019/09/09/eclipse1/7.png" alt="img"></p><p>③把这里的名称改为更改之后的项目名，如图：</p><p><img src="/2019/09/09/eclipse1/8.png" alt="img"></p><p>④保存后重新执行打包操作，之后再查看就会看到.war文件名已经成功变成了更改后的项目名：</p><p><img src="/2019/09/09/eclipse1/9.png" alt="img"></p><h5 id="第二种方法-利用Eclipse的export-功能"><a href="#第二种方法-利用Eclipse的export-功能" class="headerlink" title="第二种方法:利用Eclipse的export 功能"></a>第二种方法:利用Eclipse的export 功能</h5><p>但是需要修改.classpath 中的maven classpth的配置信息：</p><p><img src="/2019/09/09/eclipse1/10.png" alt="img"></p><p>把原来的配置信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;classpathentry kind=<span class="string">"con"</span> path=<span class="string">"org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER"</span>/&gt;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;classpathentry   exported="true" kind="con"  path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER"&gt; &lt;attributes&gt; &lt;attributename="org.eclipse.jst.component.dependency"   value="/WEB-INF/lib"/&gt; &lt;/attributes&gt; </span><br><span class="line">&lt;/classpathentry&gt;</span><br></pre></td></tr></table></figure><p>然后再export 就可以成功导出war包，这样才会同时把lib包一起导出来.</p><p><img src="/2019/09/09/eclipse1/1.png" alt="img"></p><h5 id="第三种-利用maven的插件"><a href="#第三种-利用maven的插件" class="headerlink" title="第三种:利用maven的插件"></a>第三种:利用maven的插件</h5><p><strong>pom.xml中:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- tomcat插件 --&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;port&gt;80&lt;/port&gt;</span><br><span class="line">                   &lt;path&gt;/SSM&lt;/path&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p><strong>run as :tomcat7:exec-war或者tomcat7:exec-war-only</strong></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具及技术 </category>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程</title>
      <link href="/2019/09/09/bingfa1/"/>
      <url>/2019/09/09/bingfa1/</url>
      
        <content type="html"><![CDATA[<h2 id="线程基础、线程之间的共享和协作"><a href="#线程基础、线程之间的共享和协作" class="headerlink" title="线程基础、线程之间的共享和协作"></a>线程基础、线程之间的共享和协作</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="CPU核心数和线程数的关系"><a href="#CPU核心数和线程数的关系" class="headerlink" title="CPU核心数和线程数的关系"></a><a href="https://blog.csdn.net/aiwech/article/details/79059761" target="_blank" rel="noopener">CPU核心数和线程数的关系</a></h4><p><strong>核心数:线程数=1:1  ;使用了超线程技术后—&gt; 1:2</strong></p><blockquote><p>我们在选购电脑的时候，CPU是一个需要考虑到核心因素，因为它决定了电脑的性能等级。CPU从早期的单核，发展到现在的双核，多核。CPU除了核心数之外，还有线程数之说，下面笔者就来解释一下CPU的核心数与线程数的关系和区别。 </p><p>简单地说，CPU的核心数是指物理上，也就是硬件上存在着几个核心。比如，双核就是包括2个相对独立的CPU核心单元组，四核就包含4个相对独立的CPU核心单元组，等等，依次类推。 </p><p>线程数是一种逻辑的概念，简单地说，就是模拟出的CPU核心数。比如，可以通过一个CPU核心数模拟出2线程的CPU，也就是说，这个单核心的CPU被模拟成了一个类似双核心CPU的功能。我们从任务管理器的性能标签页中看到的是两个CPU。 </p><p>比如Intel 赛扬G460是单核心，双线程的CPU，Intel 酷睿i3 3220是双核心 四线程，Intel 酷睿i7 4770K是四核心 八线程 ，Intel 酷睿i5 4570是四核心 四线程等等。 </p><p>对于一个CPU，线程数总是大于或等于核心数的。一个核心最少对应一个线程，但通过超线程技术，一个核心可以对应两个线程，也就是说它可以同时运行两个线程。 </p><p>CPU的线程数概念仅仅只针对Intel的CPU才有用，因为它是通过Intel超线程技术来实现的，最早应用在Pentium4上。如果没有超线程技术，一个CPU核心对应一个线程。所以，对于AMD的CPU来说，只有核心数的概念，没有线程数的概念。 </p><p>CPU之所以要增加线程数，是源于多任务处理的需要。线程数越多，越有利于同时运行多个程序，因为线程数等同于在某个瞬间CPU能同时并行处理的任务数。 </p></blockquote><a id="more"></a><p>在Windows中，在cmd命令中输入<code>wmic</code>,然后在出现的新窗口中输入<code>cpu get *</code> 即可查看物理CPU数、CPU核心数、线程数。其中:</p><blockquote><p>Name:表示物理CPU数  </p><p>NumberOfCores：表示CPU核心数</p><p> NumberOfLogicalProcessors：表示CPU线程数 </p></blockquote><h4 id="CPU时间片轮转机制"><a href="#CPU时间片轮转机制" class="headerlink" title="CPU时间片轮转机制"></a><a href="http://c.biancheng.net/view/1247.html" target="_blank" rel="noopener">CPU时间片轮转机制</a></h4><p>又称RR调度，会导致上下文切换.</p><p>时间片轮转（RR）调度算法是专门为分时系统设计的。它类似于 <strong>FCFS调度</strong>，但是增加了抢占以切换进程。该算法中，将一个较小时间单元定义为时间量或时间片。时间片的大小通常为 10~100ms。就绪队列作为循环队列。CPU 调度程序循环整个就绪队列，为每个进程分配不超过一个时间片的 CPU。</p><p>为了实现 RR 调度，我们再次将就绪队列视为进程的 FIFO 队列。新进程添加到就绪队列的尾部。CPU 调度程序从就绪队列中选择第一个进程，将定时器设置在一个时间片后中断，最后分派这个进程。</p><p>接下来，有两种情况可能发生。进程可能只需少于时间片的 CPU 执行。对于这种情况，进程本身会自动释放 CPU。调度程序接着处理就绪队列的下一个进程。否则，如果当前运行进程的 CPU 执行大于一个时间片，那么定时器会中断，进而中断操作系统。然后，进行上下文切换，再将进程加到就绪队列的尾部，接着 CPU 调度程序会选择就绪队列内的下一个进程。</p><p>不过，采用 RR 策略的平均等待时间通常较长。假设有如下一组进程，它们在时间 0 到达，其 CPU 执行以 ms 计：</p><table><thead><tr><th>进程</th><th>执行时间</th></tr></thead><tbody><tr><td>P1</td><td>24</td></tr><tr><td>P2</td><td>3</td></tr><tr><td>P3</td><td>3</td></tr></tbody></table><p>如果使用 4ms 的时间片，那么 P1 会执行最初的 4ms。由于它还需要 20ms，所以在第一个时间片之后它会被抢占，而 CPU 就交给队列中的下一个进程。由于 P2 不需要 4ms，所以在其时间片用完之前就会退出。CPU 接着交给下一个进程，即进程 P3。在每个进程都得到了一个时间片之后，CPU 又交给了进程 P1 以便继续执行。因此，RR 调度结果如下：</p><p><img src="/2019/09/09/bingfa1/1.png" alt="img"></p><p>现在，我们计算这个调度的平均等待时间。P1 等待 10-4 = 6ms，P2 等待 4ms，而 P3 等待 7ms。因此，平均等待时间为 17/3 = 5.66ms。</p><p>在 RR 调度算法中，没有进程被连续分配超过一个时间片的 CPU（除非它是唯一可运行的进程）。如果进程的 CPU 执行超过一个时间片，那么该进程会被抢占，并被放回到就绪队列。因此，RR调度算法是抢占的。</p><p>如果就绪队列有 n 个进程，并且时间片为 q，那么每个进程会得到 1/n 的 CPU 时间，而且每次分得的时间不超过 q 个时间单元。每个进程等待获得下一个 CPU 时间片的时间不会超过 (n-1)q 个时间单元。例如，如果有 5 个进程，并且时间片为 20ms，那么每个进程每 100ms 会得到不超过 20ms 的时间。</p><p>RR 算法的性能很大程度取决于时间片的大小。在一种极端情况下，如果时间片很大，那么 RR 算法与 FCFS 算法一样。相反，如果时间片很小（如 1ms），那么 RR 算法可以导致大量的上下文切换。</p><p>例如，假设我们只有一个需要 10 个时间单元的进程。如果时间片为 12 个时间单元，那么进程在一个时间片不到就能完成，而且没有额外开销。如果时间片为 6 个时间单元，那么进程需要 2 个时间片，并且还有一个上下文切换。如果时间片为 1 个时间单元，那么就会有 9 个上下文切换，相应地使进程执行更慢（图 1)。</p><p><img src="/2019/09/09/bingfa1/2.png" alt="img"></p><p>​                                                          <center> 图 1 更小时间片如何增加上下文切换</center></p><p>因此，我们希望时间片远大于上下文切换时间。如果上下文切换时间约为时间片的 10%，那么约 10% 的 CPU 时间会浪费在上下文切换上。在实践中，大多数现代操作系统的时间片为 10~100ms，上下文切换的时间一般少于 10ms；因此，上下文切换的时间仅占时间片的一小部分。</p><p>周转时间也依赖于时间片大小。正如从图 2 中所看到的，随着时间片大小的增加，一组进程的平均周转时间不一定会改善。一般情况下，如果大多数进程能在一个时间片内完成，那么平均周转时间会改善。</p><p><img src="/2019/09/09/bingfa1/3.png" alt="img"></p><p>​                                        <center>图 2 周转时间如何随着时间片大小而改变</center></p><p>例如，假设有三个进程，都需要 10 个时间单元。如果时间片为 1 个时间单元，那么平均周转时间为 29；如果时间片为 10，那么平均周转时间会降为 20；如果再考虑上下文切换时间，那么平均周转时间对于较小时间片会增加，这是因为需要更多的上下文切换。</p><p>尽管时间片应该比上下文切换时间要大，但也不能太大。如果时间片太大，那么 RR 调度就演变成了 FCFS 调度。根据经验，80% 的 CPU 执行应该小于时间片。</p><h4 id="FCFS调度算法"><a href="#FCFS调度算法" class="headerlink" title="FCFS调度算法"></a><a href="http://c.biancheng.net/view/1242.html" target="_blank" rel="noopener">FCFS调度算法</a></h4><p>毫无疑问，最简单的 CPU 调度算法是<strong>先来先服务（FCFS）调度箅法</strong>。釆用这种方案，先请求 CPU 的进程首先分配到 CPU。</p><p>FCFS 策略可以通过 FIFO 队列容易地实现。当一个进程进入就绪队列时，它的 PCB 会被链接到队列尾部。当 CPU 空闲时，它会分配给位于队列头部的进程，并且这个运行进程从队列中移去。FCFS 调度代码编写简单并且理解容易。</p><p>FCFS 策略的缺点是，平均等待时间往往很长。假设有如下一组进程，它们在时间 0 到达，CPU 执行长度按 ms 计：</p><table><thead><tr><th>进程</th><th>执行时间</th></tr></thead><tbody><tr><td>P1</td><td>24</td></tr><tr><td>P2</td><td>3</td></tr><tr><td>P3</td><td>3</td></tr></tbody></table><p>如果进程按 P1、P2、P3 的顺序到达，并且按 FCFS 顺序处理，那么得到如下 Gantt 图所示的结果（这种 Gantt 图为条形图，用于显示调度情况，包括每个进程的开始与结束时间）：</p><p><img src="/2019/09/09/bingfa1/4.png" alt="img"></p><p> 进程 P1 的等待时间为 0ms，进程 P2 的等待时间为 24ms，而进程 P3 的等待时间为 27ms。因此，平均等待时间为 (0 + 24 + 27)/3 = 171ms。不过，如果进程按 P2、P3、P1 的顺序到达，那么结果如以下 Gantt 图所示：</p><p><img src="/2019/09/09/bingfa1/5.png" alt="img"></p><p> 现在平均等待时间为 (6 + 0+3)/3 = 3ms。这个减少是相当大的。因此，FCFS 策略的平均等待时间通常不是最小，而且如果进程的 CPU 执行时间变化很大，那么平均等待时间的变化也会很大。</p><p>另外，考虑动态情况下的 FCFS 调度性能。假设有一个 CPU 密集型进程和多个 I/O 密集型进程。随着进程在系统中运行，可能发生如下情况：CPU 密集型进程得到 CPU，并使用它。在这段时间内，所有其他进程会处理完它们的 I/O，并转移到就绪队列来等待 CPU。当这些进程在就绪队列中等待时，I/O 设备空闲。最终，CPU 密集型进程完成 CPU 执行并且移到 I/O 设备。所有 I/O 密集型进程，由于只有很短的 CPU 执行，故很快执行完并移回到 I/O 队列。这时，CPU 空闲。之后，CPU 密集型进程会移回到就绪队列并分配到 CPU。再次，所有 I/O 进程会在就绪队列中等待 CPU 密集型进程的完成。由于所有其他进程都等待一个大进程释放 CPU，故称之为护航效果。与让较短进程先进行相比，这会导致 CPU 和设备的使用率降低。</p><p>也要注意，FCFS 调度算法是非抢占的。一旦 CPU 分配给了一个进程，该进程就会使用 CPU 直到释放 CPU 为止，即程序终止或是请求 I/O。FCFS 算法对于分时系统（每个用户需要定时得到一定的 CPU 时间）是特别麻烦的。允许一个进程使用 CPU 过长将是个严重错误。</p><h3 id="什么是进程和线程"><a href="#什么是进程和线程" class="headerlink" title="什么是进程和线程"></a><strong>什么是进程和线程</strong></h3><p>进程：程序运行资源分配的最小单位，进程内部有多个线程，会共享这个进程的资源</p><p>线程：CPU调度的最小单位，必须依赖进程而存在。本身不拥有资源.</p><h3 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a><strong>并行和并发</strong></h3><p>并行：<strong>同一时刻</strong>，可以同时处理事情的能力</p><p>并发：与单位时间相关，在<strong>单位时间内</strong>可以处理事情的能力</p><blockquote><p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。</p><p>你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发.(不一定是同时的)</p><p>你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。  </p></blockquote><p>并发的关键是你有处理多个任务的能力，不一定要同时.</p><p>并行的关键是你有同时处理多个任务的能力。  </p><p>所以我认为它们最关键的点就是：<strong>是否是『同时』</strong></p><p><a href="https://blog.csdn.net/weixin_30363263/article/details/80732156" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><h3 id="高并发编程的意义、好处和注意事项"><a href="#高并发编程的意义、好处和注意事项" class="headerlink" title="高并发编程的意义、好处和注意事项"></a><strong>高并发编程的意义、好处和注意事项</strong></h3><p>好处：充分利用cpu的资源、加快用户响应的时间，程序模块化，异步化.</p><p>问题：</p><ol><li>线程共享资源，存在冲突；</li><li>容易导致死锁；</li><li>启用太多的线程，就有搞垮机器的可能</li></ol><h3 id="认识Java里的线程"><a href="#认识Java里的线程" class="headerlink" title="认识Java里的线程"></a>认识Java里的线程</h3><p> <strong>新启线程的方式</strong></p><h4 id="JAVA里的程序天生就是多线程的"><a href="#JAVA里的程序天生就是多线程的" class="headerlink" title="JAVA里的程序天生就是多线程的."></a>JAVA里的程序天生就是多线程的.</h4><p>eg:如下简单的main方法-并不是只有Main主线程.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//虚拟机线程管理的接口(可以拿去线程信息)</span></span><br><span class="line">ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();</span><br><span class="line">ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class="line">System.out.println(<span class="string">"["</span>+threadInfo.getThreadId()+<span class="string">"]"</span></span><br><span class="line">+<span class="string">"  "</span>+threadInfo.getThreadName());</span><br><span class="line">&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>]  Attach Listener   <span class="comment">//获取当前程序运行相关信息</span></span><br><span class="line">[<span class="number">4</span>]  Signal Dispatcher <span class="comment">//分发虚拟机信号处理</span></span><br><span class="line">[<span class="number">3</span>]  Finalizer  <span class="comment">//调用Finalizer方法的线程,虚拟机不一定会执行</span></span><br><span class="line">[<span class="number">2</span>]  Reference Handler  <span class="comment">//负责清除引用线程</span></span><br><span class="line">[<span class="number">1</span>]  main  <span class="comment">//主线程(入口)</span></span><br></pre></td></tr></table></figure><h4 id="有三种启动线程的方式"><a href="#有三种启动线程的方式" class="headerlink" title="有三种启动线程的方式"></a><strong>有三种启动线程的方式</strong></h4><h5 id="类Thread-单继承-–-gt-接口Runnable-接口Callable"><a href="#类Thread-单继承-–-gt-接口Runnable-接口Callable" class="headerlink" title="类Thread(单继承)–&gt;接口Runnable,接口Callable"></a><strong>类Thread(单继承)–&gt;接口Runnable,接口Callable</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年9月1日 上午10:56:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@explain</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I'm extends Thread"</span>);</span><br><span class="line">   &#125;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"I'm implemets Runnable"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"CallResult"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">UseThread u = <span class="keyword">new</span> UseThread();</span><br><span class="line">u.start();</span><br><span class="line"></span><br><span class="line">UserRunable u1 = <span class="keyword">new</span> UserRunable();</span><br><span class="line"><span class="keyword">new</span> Thread(u1).start();</span><br><span class="line">  </span><br><span class="line">UserCall u2 = <span class="keyword">new</span> UserCall();</span><br><span class="line"><span class="comment">// 包装成runnable</span></span><br><span class="line">FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(u2);</span><br><span class="line"><span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">         <span class="comment">//futureTask.get()时是阻塞的,上面执行完才会执行下面</span></span><br><span class="line">System.out.println(futureTask.get());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m extends Thread </span></span><br><span class="line"><span class="string">I'</span>m implemets Runnable</span><br><span class="line">CallResult</span><br></pre></td></tr></table></figure><h4 id="怎么样才能让Java里的线程安全停止工作呢"><a href="#怎么样才能让Java里的线程安全停止工作呢" class="headerlink" title="怎么样才能让Java里的线程安全停止工作呢"></a>怎么样才能让Java里的线程安全停止工作呢</h4><ul><li>线程自然终止：自然执行完或抛出未处理异常</li><li>stop()，resume(),suspend()已不建议使用,stop()会导致线程不会正确释放资源，suspend()线程不释放资源,容易导致死锁。</li></ul><h4 id="java线程是协作式，而非抢占式"><a href="#java线程是协作式，而非抢占式" class="headerlink" title="java线程是协作式，而非抢占式"></a><strong>java</strong>线程是协作式，而非抢占式</h4><ul><li>调用一个线程的interrupt() 方法中断一个线程，<strong>并不是强行关闭</strong>这个线程，只是跟这个线程打个招呼，将线程的中断标志位置为true，线程是否中断，由线程本身决定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread t=<span class="keyword">new</span> Thread(); </span><br><span class="line">t.interrupt();<span class="comment">//该线程有可能不会理会</span></span><br></pre></td></tr></table></figure><ul><li>isInterrupted() 判定当前线程是否处于中断状态。</li><li>static方法interrupted() 判定当前线程是否处于中断状态，同时中断标志位改为false。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年9月1日 上午10:56:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@explain</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UseThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String threadName = Thread.currentThread().getName();</span><br><span class="line"><span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">System.out.println(threadName + <span class="string">" is run!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(threadName + <span class="string">" interrput flag is "</span> + isInterrupted());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRunable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String threadName = Thread.currentThread().getName();</span><br><span class="line"><span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">System.out.println(threadName + <span class="string">" is run2!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(threadName + <span class="string">" interrput2 flag is "</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"><span class="comment">/*Thread u = new UseThread("endThread");</span></span><br><span class="line"><span class="comment">u.start();</span></span><br><span class="line"><span class="comment">Thread.sleep(20);</span></span><br><span class="line"><span class="comment">u.interrupt();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">UserRunable u1 = <span class="keyword">new</span> UserRunable();</span><br><span class="line">Thread uii = <span class="keyword">new</span> Thread(u1);</span><br><span class="line">uii.start();</span><br><span class="line">Thread.sleep(<span class="number">20</span>);</span><br><span class="line">uii.interrupt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法里如果抛出InterruptedException，线程的中断标志位会被复位成false，如果确实是需要中断线程，要求我们自己在catch语句块里再次调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> PE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年9月1日 上午10:56:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@explain</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UseThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String threadName = Thread.currentThread().getName();</span><br><span class="line"><span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">System.out.println(threadName + <span class="string">" interrput flag is "</span> + isInterrupted());</span><br><span class="line"><span class="comment">//要求我们自己在catch语句块里再次调用,防止出现Console下的情况</span></span><br><span class="line">                        interrupt();</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(threadName);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(threadName + <span class="string">" interrput flag is "</span> + isInterrupted());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException  </span>&#123;</span><br><span class="line">Thread u = <span class="keyword">new</span> UseThread(<span class="string">"endThread"</span>);</span><br><span class="line">u.start();</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">u.interrupt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try..catch 中未手动加入interrupt();</span></span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread interrput flag is <span class="keyword">false</span></span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at Test$UseThread.run(Test.java:<span class="number">22</span>)</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">.....</span><br><span class="line"><span class="comment">//try..catch 中手动interrupt();</span></span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread</span><br><span class="line">endThread interrput flag is <span class="keyword">false</span></span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">endThread</span><br><span class="line">endThread interrput flag is <span class="keyword">true</span>at java.lang.Thread.sleep(Native Method)</span><br><span class="line">at Test$UseThread.run(Test.java:<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h3 id="对Java里的线程再多一点点认识"><a href="#对Java里的线程再多一点点认识" class="headerlink" title="对Java里的线程再多一点点认识"></a><strong>对Java里的线程再多一点点认识</strong></h3><h4 id="线程常用方法和线程的状态"><a href="#线程常用方法和线程的状态" class="headerlink" title="线程常用方法和线程的状态"></a><strong>线程常用方法和线程的状态</strong></h4><p><img src="/2019/09/09/bingfa1/6.png" alt="img"></p><p><strong>线程只有</strong>5种状态。整个生命周期就是这几种状态的切换。</p><p>run()和start() ：run方法就是普通对象的普通方法，只有调用了start()后，Java才会将线程对象和操作系统中实际的线程进行映射，再来执行run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiangxue.ch1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> Mark老师 </span></span><br><span class="line"><span class="comment"> ThreadRun 首先是对象,然后再有特殊性,调用start,虚拟机才会将线程对象</span></span><br><span class="line"><span class="comment"> 和操作系统中实际的线程进行映射</span></span><br><span class="line"><span class="comment"> *类说明：start和run方法的区别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartAndRun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadRun</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">90</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ms(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">"I am "</span>+Thread.currentThread().getName()</span><br><span class="line">                +<span class="string">" and now the i="</span>+i--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按毫秒数休眠</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 毫秒数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">ms</span><span class="params">(<span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(seconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadRun beCalled = <span class="keyword">new</span> ThreadRun();</span><br><span class="line">    beCalled.setName(<span class="string">"BeCalled"</span>);</span><br><span class="line">    <span class="comment">//beCalled.run();</span></span><br><span class="line">    beCalled.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run()方法</span></span><br><span class="line">I am main and now the i=<span class="number">90</span></span><br><span class="line">I am main and now the i=<span class="number">89</span></span><br><span class="line">I am main and now the i=<span class="number">88</span></span><br><span class="line">I am main and now the i=<span class="number">87</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">//start()方法</span></span><br><span class="line">I am BeCalled and now the i=<span class="number">90</span></span><br><span class="line">I am BeCalled and now the i=<span class="number">89</span></span><br><span class="line">I am BeCalled and now the i=<span class="number">88</span></span><br><span class="line">I am BeCalled and now the i=<span class="number">87</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>yield() ：让出cpu的执行权，将线程从运行转到可运行状态，但是下个时间片，该线程依然有可能被再次选中运行。</p><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a><strong>线程的优先级</strong></h4><p>取值为1~10，缺省为5，但线程的优先级不可靠，不建议作为线程开发时候的手段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beCalled.setPriority(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a><strong>守护线程</strong></h4><p>和主线程不一定同生但一定共死，finally不能保证一定执行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiangxue.ch1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark老师</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  类说明：守护线程的使用和守护线程中的finally语句块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" I am extends Thread."</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() </span><br><span class="line">+ <span class="string">" interrupt flag is "</span> + isInterrupted());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"...........finally"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, </span></span><br><span class="line"><span class="function">ExecutionException </span>&#123;</span><br><span class="line">UseThread useThread = <span class="keyword">new</span> UseThread();</span><br><span class="line"><span class="comment">//是否设置为守护线程</span></span><br><span class="line">           <span class="comment">// useThread.setDaemon(true);</span></span><br><span class="line">useThread.start();</span><br><span class="line">Thread.sleep(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//useThread.interrupt();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useThread.setDaemon(false);+ useThread.interrupt();</span></span><br><span class="line">Thread-<span class="number">0</span> I am extends Thread.</span><br><span class="line">.....</span><br><span class="line">Thread-<span class="number">0</span> I am extends Thread.</span><br><span class="line">Thread-<span class="number">0</span> interrupt flag is <span class="keyword">true</span></span><br><span class="line">...........<span class="keyword">finally</span></span><br><span class="line"><span class="comment">//useThread.setDaemon(true);</span></span><br><span class="line">Thread-<span class="number">0</span> I am extends Thread.</span><br><span class="line">.....</span><br><span class="line">Thread-<span class="number">0</span> I am extends Thread.</span><br><span class="line">Thread-<span class="number">0</span> interrupt flag is <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h4 id="线程间的共享"><a href="#线程间的共享" class="headerlink" title="线程间的共享"></a><strong>线程间的共享</strong></h4><h5 id="synchronized内置锁"><a href="#synchronized内置锁" class="headerlink" title="synchronized内置锁"></a><strong>synchronized</strong>内置锁</h5><h5 id="对象锁，锁的是类的对象实例"><a href="#对象锁，锁的是类的对象实例" class="headerlink" title="对象锁，锁的是类的对象实例"></a>对象锁，锁的是类的对象实例</h5><h5 id="类锁-锁的是每个类的的Class对象"><a href="#类锁-锁的是每个类的的Class对象" class="headerlink" title="类锁,锁的是每个类的的Class对象"></a>类锁,锁的是每个类的的Class对象</h5><p>(每个类的的Class对象在一个虚拟机中只有一个，所以类锁也只有一个)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xiangxue.tools.SleepTools;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> Mark老师</span></span><br><span class="line"><span class="comment"> *类说明：演示对象锁和类锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynClzAndInst</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用类锁的线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynClass</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"TestClass is running..."</span>);</span><br><span class="line">            synClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//使用对象锁的线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceSyn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> SynClzAndInst synClzAndInst;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InstanceSyn</span><span class="params">(SynClzAndInst synClzAndInst)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.synClzAndInst = synClzAndInst;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"TestInstance is running..."</span>+synClzAndInst);</span><br><span class="line">            synClzAndInst.instance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//使用对象锁的线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Instance2Syn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> SynClzAndInst synClzAndInst;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Instance2Syn</span><span class="params">(SynClzAndInst synClzAndInst)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.synClzAndInst = synClzAndInst;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"TestInstance2 is running..."</span>+synClzAndInst);</span><br><span class="line">            synClzAndInst.instance2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SleepTools.second(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"synInstance is going..."</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">        SleepTools.second(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"synInstance ended "</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instance2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SleepTools.second(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"synInstance2 is going..."</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">        SleepTools.second(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"synInstance2 ended "</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//类锁，实际是锁类的class对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SleepTools.second(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"synClass going..."</span>);</span><br><span class="line">        SleepTools.second(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"synClass end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynClzAndInst synClzAndInst = <span class="keyword">new</span> SynClzAndInst();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> InstanceSyn(synClzAndInst));</span><br><span class="line">    <span class="comment">//不同对象锁可以并行运行.</span></span><br><span class="line">    <span class="comment">//SynClzAndInst synClzAndInst2 = new SynClzAndInst();</span></span><br><span class="line">    <span class="comment">//同一对象锁,需要排队</span></span><br><span class="line">    <span class="comment">//Thread t2 = new Thread(new Instance2Syn(synClzAndInst));</span></span><br><span class="line">    t1.start();</span><br><span class="line">    <span class="comment">//t2.start();</span></span><br><span class="line">    <span class="comment">//类锁和对象锁可以并行运行</span></span><br><span class="line">    SynClass synClass = <span class="keyword">new</span> SynClass();</span><br><span class="line">    synClass.start();</span><br><span class="line">    SleepTools.second(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="volatile关键字-最轻量的同步机制"><a href="#volatile关键字-最轻量的同步机制" class="headerlink" title="volatile关键字(最轻量的同步机制)"></a><strong>volatile</strong>关键字(最轻量的同步机制)</h5><p>适合于只有一个线程写，多个线程读的场景，因为它只能确保<strong>可见性</strong>(多个线程写,不能保证原子性,安全性低)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiangxue.ch1.vola;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> Mark老师</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *类说明：演示violate无法提供操作的原子性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileUnsafe</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileVar</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String threadName = Thread.currentThread().getName();</span><br><span class="line">    a = a++;</span><br><span class="line">    System.out.println(threadName+<span class="string">":======"</span>+a);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    a = a+<span class="number">1</span>;</span><br><span class="line">    System.out.println(threadName+<span class="string">":======"</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    VolatileVar v = <span class="keyword">new</span> VolatileVar();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(v);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(v);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(v);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(v);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Console:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">2</span>:======<span class="number">0</span></span><br><span class="line">Thread-<span class="number">3</span>:======<span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span>:======<span class="number">0</span></span><br><span class="line">Thread-<span class="number">1</span>:======<span class="number">0</span></span><br><span class="line">Thread-<span class="number">2</span>:======<span class="number">2</span></span><br><span class="line">Thread-<span class="number">3</span>:======<span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span>:======<span class="number">3</span></span><br><span class="line">Thread-<span class="number">1</span>:======<span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="ThreadLocal线程变量"><a href="#ThreadLocal线程变量" class="headerlink" title="ThreadLocal线程变量"></a>ThreadLocal线程变量</h5><p><strong>可以理解为是个map，类型</strong> <strong>Map&lt;Thread,Integer&gt;.</strong></p><p>每个线程都拥有自己的副本.</p><p>优点:共享同一个变量时,线程之间不会起冲突.</p><p>缺点:,存储东西比较大,占有内存资源非常大.(用空间换取安全性)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> Mark老师</span></span><br><span class="line"><span class="comment"> *类说明：演示ThreadLocal的使用(线程池)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThreadLocal</span> </span>&#123;</span><br><span class="line"><span class="comment">//可以理解为 一个map，类型 Map&lt;Thread,Integer&gt; </span></span><br><span class="line"><span class="keyword">static</span> ThreadLocal&lt;Integer&gt; threadLaocl = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运行3个线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartThreadArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread[] runs = <span class="keyword">new</span> Thread[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;runs.length;i++)&#123;</span><br><span class="line">            runs[i]=<span class="keyword">new</span> Thread(<span class="keyword">new</span> TestThread(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;runs.length;i++)&#123;</span><br><span class="line">            runs[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *类说明：测试线程，线程的工作是将ThreadLocal变量的值变化，</span></span><br><span class="line"><span class="comment">     *并写回，看看线程之间是否会互相影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TestThread</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":start"</span>);</span><br><span class="line">            Integer s = threadLaocl.get();<span class="comment">//获得变量的值</span></span><br><span class="line">            s = s+id;</span><br><span class="line">            threadLaocl.set(s);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":"</span></span><br><span class="line">            +threadLaocl.get());</span><br><span class="line">            <span class="comment">//threadLaocl.remove();并不是必须的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    UseThreadLocal test = <span class="keyword">new</span> UseThreadLocal();</span><br><span class="line">        test.StartThreadArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 线程 </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当tomcat端口被占用怎么查看占用程序</title>
      <link href="/2019/09/09/xzs2/"/>
      <url>/2019/09/09/xzs2/</url>
      
        <content type="html"><![CDATA[<p>注意:<strong>管理员操作</strong></p><p>1.netstat -aon|findstr “端口号”</p><p>2.tasklist|findstr “查询出的 listening”</p><p>3.taskkill  /f  /t  /im 查询出占用程序名称,显示已终止即成功(注意:有空格)</p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql函数</title>
      <link href="/2019/09/09/mysql9/"/>
      <url>/2019/09/09/mysql9/</url>
      
        <content type="html"><![CDATA[<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a><strong>数学函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ABS(x)                   返回x的绝对值</span><br><span class="line">BIN(x)                   返回x的二进制（OCT返回八进制，HEX返回十六进制）</span><br><span class="line">CEILING(x)               返回大于x的最小整数值</span><br><span class="line">EXP(x)                   返回值e（自然对数的底）的x次方 </span><br><span class="line">FLOOR(x)                 返回小于x的最大整数值 </span><br><span class="line">GREATEST(x1,x2,...,xn)   返回集合中最大的值 </span><br><span class="line">LEAST(x1,x2,...,xn)      返回集合中最小的值</span><br><span class="line">LN(x)                    返回x的自然对数 </span><br><span class="line">LOG(x,y)                 返回x的以y为底的对数 </span><br><span class="line">MOD(x,y)                 返回x/y的模（余数） </span><br><span class="line">PI()                     返回pi的值（圆周率） </span><br><span class="line">RAND()                   返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line">ROUND(x,y)               返回参数x的四舍五入的有y位小数的值</span><br><span class="line">SIGN(x)                  返回代表数字x的符号的值 </span><br><span class="line">SQRT(x)                  返回一个数的平方根 </span><br><span class="line">TRUNCATE(x,y)            返回数字x截短为y位小数的结果</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="聚合函数(常用于GROUP BY从句的SELECT查询中)"></a><strong>聚合函数(常用于GROUP BY从句的SELECT查询中)</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AVG(col)            返回指定列的平均值 </span><br><span class="line">COUNT(col)          返回指定列中非NULL值的个数 </span><br><span class="line">MIN(col)            返回指定列的最小值 </span><br><span class="line">MAX(col)            返回指定列的最大值 </span><br><span class="line">SUM(col)            返回指定列的所有值之和 </span><br><span class="line">GROUP_CONCAT(col)   返回由属于一组的列值连接组合而成的结果</span><br></pre></td></tr></table></figure><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a><strong>字符串函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ASCII(char)                    返回字符的ASCII码值 </span><br><span class="line">BIT_LENGTH(str)                返回字符串的比特长度 </span><br><span class="line">CONCAT(s1,s2...,sn)            将s1,s2...,sn连接成字符串 </span><br><span class="line">CONCAT_WS(sep,s1,s2...,sn)     将s1,s2...,sn连接成字符串，并用sep字符间隔 INSERT(str,x,y,instr)          将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果 FIND_IN_SET(str,list)          分析逗号分隔的list列表，如果发现str，返回str在list中的位置 LCASE(str)或LOWER(str)         返回将字符串str中所有字符改变为小写后的结果 </span><br><span class="line">LEFT(str,x)                    返回字符串str中最左边的x个字符 </span><br><span class="line">LENGTH(s)                      返回字符串str中的字符数 </span><br><span class="line">LTRIM(str)                     从字符串str中切掉开头的空格 </span><br><span class="line">POSITION(substr,str)           返回子串substr在字符串str中第一次出现的位置 </span><br><span class="line">QUOTE(str)                     用反斜杠转义str中的单引号 </span><br><span class="line">REPEAT(str,srchstr,rplcstr)    返回字符串str重复x次的结果 </span><br><span class="line">REVERSE(str)                   返回颠倒字符串str的结果 </span><br><span class="line">RIGHT(str,x)                   返回字符串str中最右边的x个字符 </span><br><span class="line">RTRIM(str)                     返回字符串str尾部的空格 </span><br><span class="line">STRCMP(s1,s2)                  比较字符串s1和s2 </span><br><span class="line">TRIM(str)                      去除字符串首部和尾部的所有空格 </span><br><span class="line">UCASE(str)或UPPER(str)         返回将字符串str中所有字符转变为大写后的结果</span><br></pre></td></tr></table></figure><h4 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a><strong>日期和时间函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CURDATE()或CURRENT_DATE()            返回当前的日期 </span><br><span class="line">CURTIME()或CURRENT_TIME()            返回当前的时间 </span><br><span class="line">DATE_ADD(date,INTERVAL int keyword)  返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECTDATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DATE_FORMAT(date,fmt)                依照指定的fmt格式格式化日期date值 </span><br><span class="line">DATE_SUB(date,INTERVAL int keyword)  返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECTDATE_SUB(CURRENT_DATE,INTERVAL 6 MONTH);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DAYOFWEEK(date)        返回date所代表的一星期中的第几天(1~7) </span><br><span class="line">DAYOFMONTH(date)       返回date是一个月的第几天(1~31) </span><br><span class="line">DAYOFYEAR(date)        返回date是一年的第几天(1~366) </span><br><span class="line">DAYNAME(date)          返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE); FROM_UNIXTIME(ts,fmt)  根据指定的fmt格式，格式化UNIX时间戳ts </span><br><span class="line">HOUR(time)             返回time的小时值(0~23) </span><br><span class="line">MINUTE(time)           返回time的分钟值(0~59) </span><br><span class="line">MONTH(date)            返回date的月份值(1~12) </span><br><span class="line">MONTHNAME(date)        返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE); </span><br><span class="line">NOW()                  返回当前的日期和时间 </span><br><span class="line">QUARTER(date)          返回date在一年中的季度(1~4)，如SELECT QUARTER(CURRENT_DATE); </span><br><span class="line">WEEK(date)             返回日期date为一年中第几周(0~53) </span><br><span class="line">YEAR(date)             返回日期date的年份(1000~9999)</span><br></pre></td></tr></table></figure><p>一些示例：获取当前系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT FROM_UNIXTIME(UNIX_TIMESTAMP()); </span><br><span class="line">SELECT EXTRACT(YEAR_MONTH FROM CURRENT_DATE);</span><br><span class="line">SELECT EXTRACT(DAY_SECOND FROM CURRENT_DATE); </span><br><span class="line">SELECT EXTRACT(HOUR_MINUTE FROM CURRENT_DATE);</span><br></pre></td></tr></table></figure><p>返回两个日期值之间的差值(月数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT PERIOD_DIFF(200302,199802);</span><br></pre></td></tr></table></figure><p>在Mysql中计算年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(NOW())-TO_DAYS(birthday)),&apos;%Y&apos;)+0 AS age FROM employee;</span><br></pre></td></tr></table></figure><p>这样，如果Brithday是未来的年月日的话，计算结果为0。</p><p>下面的SQL语句计算员工的绝对年龄，即当Birthday是未来的日期时，将得到负值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_FORMAT(NOW(), &apos;%Y&apos;)-DATE_FORMAT(birthday,&apos;%Y&apos;)-(DATE_FORMAT(NOW(),&apos;00-%m-%d&apos;) &lt;DATE_FORMAT(birthday, &apos;00-%m-%d&apos;))AS age from employee</span><br></pre></td></tr></table></figure><h4 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a><strong>加密函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AES_ENCRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储 </span><br><span class="line">AES_DECRYPT(str,key)  返回用密钥key对字符串str利用高级加密标准算法解密后的结果 </span><br><span class="line">DECODE(str,key)       使用key作为密钥解密加密字符串str </span><br><span class="line">ENCRYPT(str,salt)     使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str </span><br><span class="line">ENCODE(str,key)       使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储 </span><br><span class="line">MD5()                 计算字符串str的MD5校验和 </span><br><span class="line">PASSWORD(str)         返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。 </span><br><span class="line">SHA()                 计算字符串str的安全散列算法(SHA)校验和</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT ENCRYPT(&apos;root&apos;,&apos;salt&apos;); </span><br><span class="line">SELECT ENCODE(&apos;xufeng&apos;,&apos;key&apos;); </span><br><span class="line">SELECT DECODE(ENCODE(&apos;xufeng&apos;,&apos;key&apos;),&apos;key&apos;);#加解密放在一起 </span><br><span class="line">SELECT AES_ENCRYPT(&apos;root&apos;,&apos;key&apos;); </span><br><span class="line">SELECT AES_DECRYPT(AES_ENCRYPT(&apos;root&apos;,&apos;key&apos;),&apos;key&apos;); </span><br><span class="line">SELECT MD5(&apos;123456&apos;); SELECT SHA(&apos;123456&apos;);</span><br></pre></td></tr></table></figure><h4 id="控制流函数"><a href="#控制流函数" class="headerlink" title="控制流函数"></a><strong>控制流函数</strong></h4><p>MySQL有4个函数是用来进行条件操作的，这些函数可以实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台。</p><p>MySQL控制流函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE WHEN[test1] THEN [result1]...ELSE [default] END </span><br><span class="line">如果testN是真，则返回resultN，否则返回default </span><br><span class="line">CASE [test] WHEN[val1] THEN [result]...ELSE [default]END   </span><br><span class="line">如果test和valN相等，则返回resultN，否则返回default </span><br><span class="line">IF(test,t,f)         如果test是真，返回t；否则返回f </span><br><span class="line">IFNULL(arg1,arg2)    如果arg1不是空，返回arg1，否则返回arg2 </span><br><span class="line">NULLIF(arg1,arg2)    如果arg1=arg2返回NULL；否则返回arg1</span><br></pre></td></tr></table></figure><p>这些函数的第一个是IFNULL()，它有两个参数，并且对第一个参数进行判断。如果第一个参数不是NULL，函数就会向调用者返回第一个参数；如果是NULL,将返回第二个参数。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(1,2), IFNULL(NULL,10),IFNULL(4*NULL,&apos;false&apos;);</span><br></pre></td></tr></table></figure><p>NULLIF()函数将会检验提供的两个参数是否相等，如果相等，则返回NULL，如果不相等，就返回第一个参数。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NULLIF(1,1),NULLIF(&apos;A&apos;,&apos;B&apos;),NULLIF(2+3,4+1);</span><br></pre></td></tr></table></figure><p>和许多脚本语言提供的IF()函数一样，MySQL的IF()函数也可以建立一个简单的条件测试，这个函数有三个参数，第一个是要被判断的表达式，如果表达式为真，IF()将会返回第二个参数，如果为假，IF()将会返回第三个参数。</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECTIF(1&lt;10,2,3),IF(56&gt;100,&apos;true&apos;,&apos;false&apos;);</span><br></pre></td></tr></table></figure><p>IF()函数在只有两种可能结果时才适合使用。然而，在现实世界中，我们可能发现在条件测试中会需要多个分支。在这种情况下，MySQL提供了CASE函数，它和PHP及Perl语言的switch-case条件例程一样。</p><p>CASE函数的格式有些复杂，通常如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CASE [expression to be evaluated] </span><br><span class="line">WHEN [val 1] THEN [result 1] </span><br><span class="line">WHEN [val 2] THEN [result 2] </span><br><span class="line">WHEN [val 3] THEN [result 3] ...... </span><br><span class="line">WHEN [val n] THEN [result n] </span><br><span class="line">ELSE [default result] </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>这里，第一个参数是要被判断的值或表达式，接下来的是一系列的WHEN-THEN块，每一块的第一个参数指定要比较的值，如果为真，就返回结果。所有的WHEN-THEN块将以ELSE块结束，当END结束了所有外部的CASE块时，如果前面的每一个块都不匹配就会返回ELSE块指定的默认结果。如果没有指定ELSE块，而且所有的WHEN-THEN比较都不是真，MySQL将会返回NULL。</p><p>CASE函数还有另外一种句法，有时使用起来非常方便，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE </span><br><span class="line">WHEN [conditional test 1] THEN [result 1] </span><br><span class="line">WHEN [conditional test 2] THEN [result 2] </span><br><span class="line">ELSE [default result] </span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>这种条件下，返回的结果取决于相应的条件测试是否为真。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql </span><br><span class="line">SELECT CASE &apos;green&apos; </span><br><span class="line">WHEN &apos;red&apos; THEN &apos;stop&apos;</span><br><span class="line">WHEN &apos;green&apos; THEN &apos;go&apos; END;</span><br><span class="line">SELECT CASE 9 WHEN 1 THEN &apos;a&apos; WHEN 2 THEN &apos;b&apos; ELSE &apos;N/A&apos; END;</span><br><span class="line">SELECT CASE WHEN (2+2)=4 THEN &apos;OK&apos; WHEN(2+2)&lt;&gt;4 THEN &apos;not OK&apos; END ASSTATUS;</span><br><span class="line">SELECT Name,IF((IsActive = 1),&apos;已激活&apos;,&apos;未激活&apos;) AS RESULT FROMUserLoginInfo; </span><br><span class="line">SELECT fname,lname,(math+sci+lit) AS total,</span><br><span class="line">CASE </span><br><span class="line">WHEN (math+sci+lit) &lt; 50 THEN &apos;D&apos; </span><br><span class="line">WHEN (math+sci+lit) BETWEEN 50 AND 150 THEN &apos;C&apos;</span><br><span class="line">WHEN (math+sci+lit) BETWEEN 151 AND 250 THEN &apos;B&apos; </span><br><span class="line">ELSE &apos;A&apos;</span><br><span class="line">END  AS grade FROM marks; </span><br><span class="line">SELECT IF(ENCRYPT(&apos;sue&apos;,&apos;ts&apos;)=upass,&apos;allow&apos;,&apos;deny&apos;)  AS LoginResultFROM users</span><br><span class="line">WHERE uname = &apos;sue&apos;;#一个登陆验证</span><br></pre></td></tr></table></figure><h4 id="格式化函数"><a href="#格式化函数" class="headerlink" title="格式化函数"></a><strong>格式化函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATE_FORMAT(date,fmt)  依照字符串fmt格式化日期date值 </span><br><span class="line">FORMAT(x,y)            把x格式化为以逗号隔开的数字序列，y是结果的小数位数 </span><br><span class="line">INET_ATON(ip)          返回IP地址的数字表示 </span><br><span class="line">INET_NTOA(num)         返回数字所代表的IP地址 </span><br><span class="line">TIME_FORMAT(time,fmt)  依照字符串fmt格式化时间time值</span><br></pre></td></tr></table></figure><p>其中最简单的是FORMAT()函数，它可以把大的数值格式化为以逗号间隔的易读的序列。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT FORMAT(34234.34323432,3); </span><br><span class="line">SELECT DATE_FORMAT(NOW(),&apos;%W,%D %M %Y %r&apos;);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&apos;%Y-%m-%d&apos;); </span><br><span class="line">SELECT DATE_FORMAT(19990330,&apos;%Y-%m-%d&apos;); </span><br><span class="line">SELECT DATE_FORMAT(NOW(),&apos;%h:%i %p&apos;); </span><br><span class="line">SELECT INET_ATON(&apos;10.122.89.47&apos;);</span><br><span class="line">SELECT INET_NTOA(175790383);</span><br></pre></td></tr></table></figure><h4 id="类型转化函数"><a href="#类型转化函数" class="headerlink" title="类型转化函数"></a><strong>类型转化函数</strong></h4><p>为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：</p><p><code>BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED</code> </p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0; </span><br><span class="line">SELECT &apos;f&apos;=BINARY &apos;F&apos;,&apos;f&apos;=CAST(&apos;F&apos; AS BINARY);</span><br></pre></td></tr></table></figure><h4 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a><strong>系统信息函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASE()             返回当前数据库名 </span><br><span class="line">BENCHMARK(count,expr)  将表达式expr重复运行count次 </span><br><span class="line">CONNECTION_ID()        返回当前客户的连接ID </span><br><span class="line">FOUND_ROWS()           返回最后一个SELECT查询进行检索的总行数 </span><br><span class="line">USER()或SYSTEM_USER()  返回当前登陆用户名 </span><br><span class="line">VERSION()              返回MySQL服务器的版本</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE(),VERSION(),USER();</span><br><span class="line">SELECTBENCHMARK(9999999,LOG(RAND()*PI()));</span><br><span class="line">#该例中,MySQL计算LOG(RAND()*PI())表达式9999999次。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是OOM，为什么会OOM及一些解决方法</title>
      <link href="/2019/09/09/oom/"/>
      <url>/2019/09/09/oom/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是OOM？"><a href="#什么是OOM？" class="headerlink" title="什么是OOM？"></a><strong>什么是OOM？</strong></h4><p> OOM,全称”Out Of Memory”,翻译成中文就是“内存用完了”,来源java.lang.OutOfMemoryError。看下关于的官方说明： </p><blockquote><p>Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector.</p></blockquote><a id="more"></a><p> 意思就是说，当JVM因为没有足够的内存来为对象分配空间并且垃圾回收器也已经没有空间可回收时，就会抛出这个error（注：<strong>非exception</strong>，因为这个问题已经严重到不足以被应用处理）</p><h4 id="为什么会OOM-没有内存了呢-？"><a href="#为什么会OOM-没有内存了呢-？" class="headerlink" title="为什么会OOM(没有内存了呢)？"></a><strong>为什么会OOM(没有内存了呢)？</strong></h4><p>JVM内存过小、程序不严密，产生了过多的垃圾。</p><ol><li>分配的少了：比如虚拟机本身可使用的内存（一般通过启动时的VM参数指定）太少。</li><li>应用用的太多，并且用完没释放，浪费了。此时就会造成内存泄露或者内存溢出。</li></ol><h5 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a><strong>内存泄露</strong></h5><p>申请使用完的内存没有释放，导致虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被虚拟机分配给别人用。</p><h5 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a><strong>内存溢出</strong></h5><p>申请的内存超出了JVM能提供的内存大小，此时称之为溢出。</p><p>在之前没有垃圾自动回收的日子里，比如C语言和C++语言，我们必须亲自负责内存的申请与释放操作，如果申请了内存，用完后又忘记了释放，比如C++中的new了但是没有delete，那么就可能造成内存泄露。偶尔的内存泄露可能不会造成问题，而大量的内存泄露可能会导致内存溢出。</p><p>而在Java语言中，由于存在了垃圾自动回收机制，所以，我们一般不用去主动释放不用的对象所占的内存，也就是理论上来说，是不会存在“内存泄露”的。但是，如果编码不当，比如，将某个对象的引用放到了全局的Map中，虽然方法结束了，但是由于垃圾回收器会根据对象的引用情况来回收内存，导致该对象不能被及时的回收。如果该种情况出现次数多了，就会导致内存溢出，比如系统中经常使用的缓存机制。Java中的内存泄露，不同于C++中的忘了delete，往往是逻辑上的原因泄露。</p><blockquote><p><strong>在解决java内存溢出问题之前，需要对jvm（java虚拟机）的内存管理有一定的认识</strong></p></blockquote><h4 id="JVM管理的内存大致包括三种不同类型的内存区域（大概介绍）："><a href="#JVM管理的内存大致包括三种不同类型的内存区域（大概介绍）：" class="headerlink" title="JVM管理的内存大致包括三种不同类型的内存区域（大概介绍）："></a><strong>JVM管理的内存大致包括三种不同类型的内存区域（大概介绍）：</strong></h4><h5 id="Permanent-Generation-space（永久保存区域）"><a href="#Permanent-Generation-space（永久保存区域）" class="headerlink" title="Permanent Generation space（永久保存区域）"></a><strong>Permanent Generation space（永久保存区域）</strong></h5><p>主要存放Class（类）和Meta的信息，Class第一次被Load的时候被放入PermGen space区域，Class需要存储的内容主要包括方法和静态属性。</p><h5 id="Heap-space-堆区域"><a href="#Heap-space-堆区域" class="headerlink" title="Heap space(堆区域)"></a><strong>Heap space(堆区域)</strong></h5><p>用来存放Class的实例（即对象），对象需要存储的内容主要是非静态属性。每次用new创建一个对象实例后，对象实例存储在堆区域中，这部分空间也被jvm的垃圾回收机制管理。</p><h5 id="Java-Stacks-Java栈）"><a href="#Java-Stacks-Java栈）" class="headerlink" title="Java Stacks(Java栈）"></a><strong>Java Stacks(Java栈）</strong></h5><p>跟大多数编程语言包括汇编语言的栈功能相似，主要基本类型变量以及方法的输入输出参数。Java程序的每个线程中都有一个独立的堆栈。</p><p>容易发生内存溢出问题的内存空间包括：Permanent Generation space和Heap space。</p><blockquote><p><strong>JVM内存模型：按照JVM规范</strong></p></blockquote><h4 id="JAVA虚拟机在运行时会管理以下的内存区域-详细介绍"><a href="#JAVA虚拟机在运行时会管理以下的内存区域-详细介绍" class="headerlink" title="JAVA虚拟机在运行时会管理以下的内存区域(详细介绍)"></a><strong>JAVA虚拟机在运行时会管理以下的内存区域(详细介绍)</strong></h4><table><thead><tr><th>程序计数器</th><th>当前线程执行的字节码的行号指示器，线程私有</th></tr></thead><tbody><tr><td>JAVA虚拟机栈</td><td>Java方法执行的内存模型，每个Java方法的执行对应着一个栈帧的进栈和出栈的操作</td></tr><tr><td>本地方法栈</td><td>类似“ JAVA虚拟机栈 ”，但是为native方法的运行提供内存环境</td></tr><tr><td>JAVA堆</td><td>对象内存分配的地方，内存垃圾回收的主要区域，所有线程共享。可分为新生代，老生代</td></tr><tr><td>方法区</td><td>用于存储已经被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。Hotspot中的“永久代”</td></tr><tr><td>运行时常量池</td><td>方法区的一部分，存储常量信息，如各种字面量、符号引用等</td></tr><tr><td>直接内存</td><td>并不是JVM运行时数据区的一部分， 可直接访问的内存， 比如NIO会用到这部分</td></tr></tbody></table><p>按照JVM规范，除了程序计数器不会抛出OOM外，其他各个内存区域都可能会抛出OOM。</p><h4 id="导致OutOfMemoryError异常的常见原因有以下几种"><a href="#导致OutOfMemoryError异常的常见原因有以下几种" class="headerlink" title="导致OutOfMemoryError异常的常见原因有以下几种"></a><strong>导致OutOfMemoryError异常的常见原因有以下几种</strong></h4><ol><li>内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</li><li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；</li><li>代码中存在死循环或循环产生过多重复的对象实体；</li><li>使用的第三方软件中的BUG；</li><li>启动参数内存值设定的过小；</li></ol><h4 id="此错误常见的错误提示"><a href="#此错误常见的错误提示" class="headerlink" title="此错误常见的错误提示"></a><strong>此错误常见的错误提示</strong></h4><ol><li><code>java.lang.OutOfMemoryError: PermGen space</code></li><li><code>java.lang.OutOfMemoryError: Java heap space</code></li><li><code>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</code></li><li><code>resin:java.lang.OutOfMemoryError</code></li><li><code>java:java.lang.OutOfMemoryError</code></li><li><code>java.lang.StackOverflowError</code> ——&gt; 不会抛OOM error，但也是比较常见的Java内存溢出。JAVA虚拟机栈溢出，一般是由于程序中存在死循环或者深度递归调用造成的，栈大小设置太小也会出现此种溢出。可以通过虚拟机参数-Xss来设置栈的大小。</li></ol><h4 id="OOM分析"><a href="#OOM分析" class="headerlink" title="OOM分析"></a><strong>OOM分析</strong></h4><p>解决java.lang.OutOfMemoryError的方法有如下几种：</p><h5 id="增加jvm的内存大小"><a href="#增加jvm的内存大小" class="headerlink" title="增加jvm的内存大小"></a><strong>增加jvm的内存大小</strong></h5><p>方法有：</p><ul><li>在执行某个class文件时候，可以使用</li></ul><p>java -Xmx256M aa.class </p><p>​             来设置运行aa.class时jvm所允许占用的最大内存为256M。</p><ul><li>对tomcat容器，可以在启动时对jvm设置内存限度。对tomcat，可以在catalina.bat中添加：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set CATALINA_OPTS=-Xms128M -Xmx256M </span><br><span class="line">set JAVA_OPTS=-Xms128M -Xmx256M </span><br><span class="line">或者把</span><br><span class="line">%CATALINA_OPTS%和%JAVA_OPTS% </span><br><span class="line">代替为-Xms128M -Xmx256M</span><br></pre></td></tr></table></figure><ul><li><p>对resin容器，同样可以在启动时对jvm设置内存限度。在bin文件夹下创建一个startup.bat文件，</p><p>内容如下：<code>@echo off call &quot;httpd.exe&quot;  &quot;-Xms128M&quot; &quot;-Xmx256M&quot; :end</code> </p></li></ul><p>其中”-Xms128M”为最小内存，”-Xmx256M”为最大内存。</p><h5 id="优化程序，释放垃圾"><a href="#优化程序，释放垃圾" class="headerlink" title="优化程序，释放垃圾"></a><strong>优化程序，释放垃圾</strong></h5><p>导致java.lang.OutOfMemoryError的根本原因是<strong>程序不健壮</strong>。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间。 遇到该错误的时候要仔细检查程序，遇多一次这种问题之后，以后写程序就会小心多了。</p><h5 id="Java代码导致OutOfMemoryError错误的解决"><a href="#Java代码导致OutOfMemoryError错误的解决" class="headerlink" title="Java代码导致OutOfMemoryError错误的解决"></a><strong>Java代码导致OutOfMemoryError错误的解决</strong></h5><p>需要重点排查以下几点：</p><ul><li>检查代码中是否有死循环或递归调用。</li><li>检查是否有大循环重复产生新对象实体。</li><li>检查对数据库查询中，是否有一次获得全部数据的查询。一般来说，如果一次取十万条记录到内存，就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出问题，上线后，数据库中数据多了，一次查询就有可能引起内存溢出。因此对于数据库查询尽量采用分页的方式查询。</li><li>检查List、MAP等集合对象是否有使用完后，未清除的问题。List、MAP等集合对象会始终存有对对象的引用，使得这些对象不能被GC回收<strong>。</strong></li></ul><h5 id="tomcat中java-lang-OutOfMemoryError-PermGen-space异常处理"><a href="#tomcat中java-lang-OutOfMemoryError-PermGen-space异常处理" class="headerlink" title="tomcat中java.lang.OutOfMemoryError: PermGen space异常处理"></a><strong>tomcat中java.lang.OutOfMemoryError: PermGen space异常处理</strong></h5><p>PermGen space的全称是<strong>Permanent Generation space</strong></p><p>是指内存的永久保存区域,这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGen space中, 它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用中有很多CLASS的话,就很可能出现PermGen space错误, 这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下<strong>，</strong>系统的代码非常多或引用的第三方包非常多、或代码中使用了大量的常量、或通过intern注入常量、或者通过动态代码加载等方法，导致常量池的膨胀。虽然JDK 1.5以后可以通过设置对永久带进行回收，但是我们希望的是这个地方是不做GC的，它够用就行，所以一般情况下今年少做类似的操作.</p><p>解决方法： 手动设置MaxPermSize大小，修改TOMCAT_HOME/bin/catalina.sh在</p><p><code>echo &quot;Using CATALINA_BASE:   $CATALINA_BASE&quot;</code> </p><p><strong>上面加入以下行：</strong></p><p>JAVA_OPTS=”-server -XX:PermSize=64M -XX:MaxPermSize=128m </p><p>建议：将相同的第三方jar文件移置到tomcat/shared/lib目录下，这样可以达到减少jar 文档重复占用内存的目的。</p><h5 id="weblogic中java-lang-OutOfMemoryError异常处理"><a href="#weblogic中java-lang-OutOfMemoryError异常处理" class="headerlink" title="weblogic中java.lang.OutOfMemoryError异常处理"></a><strong>weblogic中java.lang.OutOfMemoryError异常处理</strong></h5><p><strong>错误提示： <u>Root cause of ervletException java.lang.OutOfMemoryError</u></strong> </p><p>解决办法：调整bea/weblogic/common中CommEnv中参数</p><blockquote><p>:sun  if “%PRODUCTION_MODE%” == “true” goto sun_prod_mode 　　</p><p>set JAVA_VM=-client 　set MEM_ARGS=-Xms256m -Xmx512m -XX:MaxPermSize=256m 　</p><p>set JAVA_OPTIONS=%JAVA_OPTIONS% -Xverify:none   goto continue 　　</p><p>:sun_prod_mode 　set JAVA_VM=-server 　　</p><p>set MEM_ARGS=-Xms256m -Xmx512m -XX:MaxPermSize=256m 　goto continue </p></blockquote><h5 id="Resin下java-lang-OutOfMemoryError异常处理"><a href="#Resin下java-lang-OutOfMemoryError异常处理" class="headerlink" title="Resin下java.lang.OutOfMemoryError异常处理"></a><strong>Resin下java.lang.OutOfMemoryError异常处理</strong></h5><p>出现这个错误，一般是因为JVM物理内存过小。默认的Java虚拟机最大内存仅为64兆，这在开发调试过程中可能没有问题，但在实际的应用环境中是远远不能满足需要的，除非你的应用非常小，也没什么访问量。否则你可能会发现程序运行一段时间后包java.lang.OutOfMemoryError的错误。因此我们需要提升resin可用的虚拟机内存的大小。</p><p>解决方法：</p><p>修改/usr/local/resin/bin/httpd.sh中的args选项 添加参数-Xms（初始内存）和-Xmx（最大能够使用内存大小）可以用来限制JVM的物理内存使用量。例如：</p><p>args=”-Xms128m -Xmx256m” </p><p>设置后，JVM初始物理内存是128m，最大能使用物理内存为256m。这两个值应该由系统管理员根据服务器的实际情况进行设置。</p><p><code>java.lang.OutOfMemoryError: ......java heap space.....</code></p><p>也就是当你看到heap相关的时候就肯定是<strong>堆栈溢出</strong>了，此时如果代码没有问题的情况下，适当调整-Xmx和-Xms是可以避免的，不过一定是代码没有问题的前提，为什么会溢出呢，要么代码有问题，要么访问量太多并且每个访问的时间太长或者数据太多，导致数据释放不掉，因为垃圾回收器是要找到那些是垃圾才能回收，这里它不会认为这些东西是垃圾，自然不会去回收了；主意这个溢出之前，可能系统会提前先报错关键字为：</p><p><code>java.lang.OutOfMemoryError:GC over head limit exceeded</code> </p><p>这种情况是当系统处于高频的GC状态(即程序在垃圾回收上花费了98%的时间，却收集不回2%的空间，通常这样的异常伴随着CPU的冲高)，而且回收的效果依然不佳的情况，就会开始报这个错误，这种情况一般是产生了很多不可以被释放的对象，有可能是引用使用不当导致，或申请大对象导致，但是java heap space的内存溢出有可能提前不会报这个错误，也就是可能就内存不够导致，而不是高频GC.</p><h5 id="第三类内存溢出"><a href="#第三类内存溢出" class="headerlink" title="第三类内存溢出"></a><strong>第三类内存溢出</strong></h5><p><strong>在使用ByteBuffer中的allocateDirect()的时候会用到，很多javaNIO的框架中被封装为其他的方法</strong></p><p><strong>溢出关键字：</strong></p><p><strong><code>java.lang.OutOfMemoryError: Direct buffer memory</code></strong> </p><p>如果你在直接或间接使用了ByteBuffer中的allocateDirect方法的时候，而不做clear的时候就会出现类似的问题，常规的引用程序IO输出存在一个内核态与用户态的转换过程，也就是对应直接内存与非直接内存，如果常规的应用程序你要将一个文件的内容输出到客户端需要通过OS的直接内存转换拷贝到程序的非直接内存（也就是heap中），然后再输出到直接内存由操作系统发送出去，而直接内存就是由OS和应用程序共同管理的，而非直接内存可以直接由应用程序自己控制的内存，jvm垃圾回收不会回收掉直接内存这部分的内存，所以要注意了哦。</p><p>如果经常有类似的操作，可以考虑设置参数：-XX:MaxDirectMemorySize </p><h5 id="java-lang-StackOverflowError"><a href="#java-lang-StackOverflowError" class="headerlink" title="java.lang.StackOverflowError"></a><strong>java.lang.StackOverflowError</strong></h5><p>这个参数直接说明一个内容，就是-Xss太小了，我们申请很多局部调用的栈针等内容是存放在用户当前所持有的线程中的，线程在jdk 1.4以前默认是256K，1.5以后是1M，如果报这个错，只能说明-Xss设置得太小，当然有些厂商的JVM不是这个参数，本文仅仅针对Hotspot VM而已；不过在有必要的情况下可以对系统做一些优化，使得-Xss的值是可用的。</p><h5 id="java-lang-OutOfMemoryError-unable-to-create-new-native-thread"><a href="#java-lang-OutOfMemoryError-unable-to-create-new-native-thread" class="headerlink" title="java.lang.OutOfMemoryError: unable to create new native thread"></a><strong>java.lang.OutOfMemoryError: unable to create new native thread</strong></h5><p>这种怪事是因为JVM已经被系统分配了大量的内存(比如1.5G)，并且它至少要占用可用内存的一半。有人发现，在线程个数很多的情况下，你分配给JVM的内存越多，那么，上述错误发生的可能性就越大。</p><p>那么是什么原因造成这种问题呢？  每一个32位的进程最多可以使用2G的可用内存，因为另外2G被操作系统保留。这里假设使用1.5G给JVM，那么还余下500M可用内存。 这500M内存中的一部分必须用于系统dll的加载，那么真正剩下的也许只有400M，现在关键的地方出现了:当你使用Java创建一个线程，在JVM的内存里也会创建一个Thread对象，但是同时也会在操作系统里创建一个真正的物理线程(参考JVM规范)，操作系统会在余下的400兆内存里创建这个物理线程，而不是在JVM的1500M的内存堆里创建。在jdk1.4里头，默认的栈大小是256KB，但是在jdk1.5里头，默认的栈大小为1M每线程，因此，在余下400M的可用内存里边我们最多也只能创建400个可用线程。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(MaxProcessMemory - JVMMemory - ReservedOsMemory) / (ThreadStackSize) = Number of threads</span><br></pre></td></tr></table></figure><table><thead><tr><th>MaxProcessMemory</th><th>指的是一个进程的最大内存</th></tr></thead><tbody><tr><td>JVMMemory</td><td>JVM内存</td></tr><tr><td>ReservedOsMemory</td><td>保留的操作系统内存</td></tr><tr><td>ThreadStackSize</td><td>线程栈的大小</td></tr></tbody></table><p>这样结论就出来了，系统可创建线程数量与分配给JVM内存大小成反比,要想创建更多的线程，你必须减少分配给JVM的最大内存。还有一种做法是让JVM宿主在你的JNI代码里边。 给出一个有关能够创建线程的最大个数的估算公式：</p><p>对于jdk1.5而言，假设操作系统保留120M内存：  </p><blockquote><p>1.5GB  JVM: (2GB-1.5Gb-120MB)/(1MB) = ~380 threads </p><p>1.0GB JVM: (2GB-1.0Gb-120MB)/(1MB) = ~880 threads  </p></blockquote><p> 对于栈大小为256KB的jdk1.4而言，</p><blockquote><p>1.5GB allocated to JVM: ~1520 threads </p><p>1.0GB allocated to JVM: ~3520 threads   </p></blockquote><p>对于这个异常我们首先需要判断下，发生内存溢出时进程中:</p><p>到底都有什么样的线程，这些线程是否是应该存在的，是否可以通过优化来降低线程数； </p><p>另外一方面默认情况下java为每个线程分配的栈内存大小是1M，通常情况下，这1M的栈内存空间是足足够用了，因为在通常在栈上存放的只是基础类型的数据或者对象的引用，这些东西都不会占据太大的内存.</p><ol><li>我们可以通过调整jvm参数，降低为每个线程分配的栈内存大小来解决问题，例如在jvm参数中添加-Xss128k将线程栈内存大小设置为128k。</li><li>查看是否操作系统限制了可创建线程数量</li></ol><p>执行ulimit -u 可以查看当前用户可创建线程量，如果不满足要求，可以通过修改配置文件调整其大小：相关配置文件在etc/security/limit.d/XX-nproc.conf中.</p><h5 id="java-lang-OutOfMemoryError-request-byte-for-out-of-swap"><a href="#java-lang-OutOfMemoryError-request-byte-for-out-of-swap" class="headerlink" title="java.lang.OutOfMemoryError: request {} byte for {}out of swap"></a><strong>java.lang.OutOfMemoryError: request {} byte for {}out of swap</strong></h5><p>这类错误一般是由于地址空间不够而导致。</p><h4 id="要dump堆的内存镜像，可以采用如下两种方式"><a href="#要dump堆的内存镜像，可以采用如下两种方式" class="headerlink" title="要dump堆的内存镜像，可以采用如下两种方式"></a><strong>要dump堆的内存镜像，可以采用如下两种方式</strong></h4><ol><li>设置JVM参数<code>-XX:+HeapDumpOnOutOfMemoryError</code>，设定当发生OOM时自动dump出堆信息。不过该方法需要JDK5以上版本。</li><li>使用JDK自带的jmap命令.”jmap -dump:format=b,file=heap.bin”其中pid可以通过jps获取。</li></ol><p>dump堆内存信息后，需要对dump出的文件进行分析，从而找到OOM的原因。常用的工具有：</p><ol><li><p>mat: eclipse memory analyzer, 基于eclipse RCP的内存分析工具。</p><p>详细信息参见: <a href="http://www.eclipse.org/mat" target="_blank" rel="noopener"><strong>推荐使用</strong></a></p></li><li><p>jhat：JDK自带的java heap analyze tool，可以将堆中的对象以html的形式显示出来，包括对象的数量，大小等等，并支持对象查询语言OQL，分析相关的应用后，可以通过来 <a href="http://localhost:7000" target="_blank" rel="noopener"><strong>访问</strong></a> 分析结果。不推荐使用，因为在实际的排查过程中，一般是先在生产环境 dump出文件来，然后拉到自己的开发机器上分析，所以，不如采用高级的分析工具比如前面的mat来的高效。</p></li></ol><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html" target="_blank" rel="noopener"><strong>这个链接</strong></a>中提供了一个采用mat分析的例子 。</p><p>注意：因为JVM规范没有对dump出的文件的格式进行定义，所以不同的虚拟机产生的dump文件并不是一样的。在分析时，需要针对不同的虚拟机的输出采用不同的分析工具（当然,有的工具可以兼容多个虚拟机的格式）。IBM HeapAnalyzer也是分析heap的一个常用的工具.</p><h4 id="利用gc-log进行OOM监控"><a href="#利用gc-log进行OOM监控" class="headerlink" title="利用gc.log进行OOM监控"></a><strong>利用gc.log进行OOM监控</strong></h4><p>针对JVM的监听，JDK默认提供了如jconsole、jvisualVM工具都非常好用，本节介绍利用打开gc的日志功能，进行OOM的监控。</p><p>首先需要对JAVA程序添加执行参数：</p><blockquote><p>-XX:+PrintGC 输出GC日志 </p><p>-XX:+PrintGCDetails 输出GC的详细日志 </p><p>-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）</p><p> -XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800） </p><p>-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息</p><p> -Xloggc:../logs/gc.log 日志文件的输出路径 </p></blockquote><p>示例参数配置：<code>-xmx100M -XX:+PrintGCDetails ``-Xloggc:../logs/gc.log -XX:+PrintGCDetails -Xmx设置堆内存</code> </p><p>输出日志的详细介绍：</p><p><img src="/2019/09/09/oom/clipboard.png" alt="img"></p><p>总共分配了100M堆内存空间，老年代+年轻代=堆</p><p>就堆内存，此次GC共回收了79186-75828=3356=3.279M内存，能回收空间已经非常少了。</p><p>同时从PSYoungGen回收10612-7254=3558=3.474M内存</p><p>3558-3356=202K，说明有202K的空间在年轻代释放，却传入年老代继续占用</p><p> 下一条日志输出：</p><blockquote><p> 2018-01-03T10:53:52.281+0800: 11.052: [Full GC (Allocation Failure)<br> [PSYoungGen: 7254K-&gt;7254K(24064K)]<br> [ParOldGen: 68574K-&gt;68486K(68608K)] 75828K-&gt;75740K(92672K),<br> [Metaspace: 3357K-&gt;3357K(1056768K)], 0.6010057 secs]<br> [Times: user=2.08 sys=0.00, real=0.60 secs] 0.6010057 se</p></blockquote><p>68574-68486=88K       75828-75740=88K</p><p>此次FullGC 只能释放老年代的88K空间</p><p>对于分析gc.log，提供一种图形化工具辅助分析gcviewer-1.3.6</p><p><strong>参考链接</strong></p><p><a href="https://blog.csdn.net/qq_42447950/article/details/81435080" target="_blank" rel="noopener"><strong>什么是OOM，为什么会OOM及一些解决方法</strong></a></p><p><a href="https://blog.csdn.net/change_on/article/details/77841989" target="_blank" rel="noopener"><strong>线上java.lang.OutOfMemoryError问题定位三板斧</strong></a></p><p><a href="https://blog.csdn.net/demo__/article/details/82665178" target="_blank" rel="noopener"><strong>java中的dump是什么？</strong></a></p><p><a href="https://blog.csdn.net/niyuelin1990/article/details/78033570" target="_blank" rel="noopener"><strong>java 获取内存dump 的几种方式</strong></a></p><p><a href="https://blog.csdn.net/zhangsanfeng2009/article/details/81001394" target="_blank" rel="noopener"><strong>Java 内存溢出（java.lang.OutOfMemoryError）的常见情况和处理方式总结</strong></a></p><p><a href="https://blog.csdn.net/wuzhiwei549/article/details/79974277" target="_blank" rel="noopener"><strong>Java 内存溢出（java.lang.OutOfMemoryError）常见情况和总结</strong></a></p><p><a href="https://blog.csdn.net/sunquan291/article/details/79109197" target="_blank" rel="noopener"><strong>几种OOM异常分析</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> OOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3常用属性</title>
      <link href="/2019/09/08/css2/"/>
      <url>/2019/09/08/css2/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="Css3设置边框属性"><a href="#Css3设置边框属性" class="headerlink" title="Css3设置边框属性"></a>Css3设置边框属性</h4></blockquote><h5 id="【box-shadow属性】"><a href="#【box-shadow属性】" class="headerlink" title="【box-shadow属性】"></a>【<strong>box-shadow属性</strong>】</h5><ul><li><p>作用: 可以设置一个或多个下拉阴影的框。</p></li><li><p>语法: <code>box-shadow:h-shadow  v-shadow   blur  spread  color</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td align="center">必需的。水平阴影的位置。允许负值</td></tr><tr><td align="center">v-shadow</td><td align="center">必需的。垂直阴影的位置。 先许负值</td></tr><tr><td align="center">blur</td><td align="center">可选。模糊距离</td></tr><tr><td align="center">spread</td><td align="center">可选。阴影的大小</td></tr><tr><td align="center">color</td><td align="center">可选。阴影的颜色</td></tr></tbody></table><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">     <span class="attribute">box-shadow</span>:<span class="number">20px</span> <span class="number">20px</span>  <span class="number">5px</span> <span class="number">#888888</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="selector-tag">input</span>&#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#E5E5E5</span>;</span><br><span class="line">      <span class="attribute">font-family</span>:<span class="string">'sans-serif'</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span>  <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">      <span class="attribute">border-color</span>: <span class="number">#c9c58a</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-tag">label</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999999</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="selector-class">.submit</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: auto;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">9px</span> <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#617798</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;h3&gt;box-shadow&lt;/h3&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;登录表单&lt;/h3&gt;</span><br><span class="line">&lt;<span class="selector-tag">form</span>&gt;</span><br><span class="line">  &lt;p class="name"&gt;</span><br><span class="line">    &lt;label for="name"&gt; 姓名 &lt;/label&gt;</span><br><span class="line">    &lt;input type="text" name="name" id="name"&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="email"&gt;</span><br><span class="line">    &lt;label for="email"&gt; 邮箱 &lt;/label&gt;</span><br><span class="line">    &lt;input type="text" name="email" id="email"&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class="submit"&gt;</span><br><span class="line">    &lt;input type="submit" value="提交"/&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/08/css2/kt1.png" alt></p><h5 id="【border-radius属性】"><a href="#【border-radius属性】" class="headerlink" title="【border-radius属性】"></a>【<strong>border-radius属性</strong>】</h5><ul><li>作用: 这个属性允许你为元素添加圆角边框。</li><li>语法: <code>border-radius:none|&lt;length&gt;{1,4}[/&lt;length&gt;{1,4}]</code></li><li>语法描述:length    定义弯道的形状, 由浮点数和单位标识符组成的长度值, 不可为负值 </li></ul><ul><li><strong>注意:每个半径的四个值的顺序是：左上角，右上角，右下角，左下角</strong></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">  &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#b3d4fc</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.bd1</span> &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">100px</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.bd2</span> &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.bd3</span> &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">15px</span> <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.bd4</span> &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.bd5</span> &#123;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;h3&gt;border-radius&lt;/h3&gt;</span><br><span class="line">&lt;span&gt;左上100px  右下100px 右上 0px 左下0px&lt;/span&gt;</span><br><span class="line">&lt;div class="bd1"&gt;&lt;/div&gt;</span><br><span class="line">&lt;span&gt;四角都为5px&lt;/span&gt;</span><br><span class="line">&lt;div class="bd2"&gt;&lt;/div&gt;</span><br><span class="line">&lt;span&gt;左上10px  右下10px 右上 15px 左下5px&lt;/span&gt;</span><br><span class="line">&lt;div class="bd3"&gt;&lt;/div&gt;</span><br><span class="line">&lt;span&gt;左上右下15px 右上左下5px&lt;/span&gt;</span><br><span class="line">&lt;div class="bd4"&gt;&lt;/div&gt;</span><br><span class="line">&lt;span&gt;左上15px 右下5px 右上左下10px&lt;/span&gt;</span><br><span class="line">&lt;div class="bd5"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/08/css2/2.png" alt></p><h5 id="【border-image属性】"><a href="#【border-image属性】" class="headerlink" title="【border-image属性】"></a>【<strong>border-image属性</strong>】</h5><ul><li><p>作用: 这个属性允许你为元素添加边框背景。</p></li><li><p>语法: <code>border-image:source slice width outset  repeat</code></p></li><li><p>语法插述:</p></li></ul><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">source</td><td align="center">定义边框的背景图片源, 即图像URL</td></tr><tr><td align="center">slice</td><td align="center">定义如何裁切背景图像</td></tr><tr><td align="center">width</td><td align="center">定义边框背景图像的显示大小 (即边框显示大小)</td></tr><tr><td align="center">outset</td><td align="center">定义边框背景图像的偏移位置(不支持)</td></tr><tr><td align="center">repeat</td><td align="center">定义边框背景图片的重复性,重复(repeat)、拉伸(stretch)或平铺(round)</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid transparent;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#round</span>&#123;</span><br><span class="line">    <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">"kk.jpeg"</span>)  <span class="number">200</span> round;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#stretch</span>&#123;</span><br><span class="line">    <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">"kk.jpeg"</span>) <span class="number">200</span> stretch;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;h3&gt;border-image&lt;/h3&gt;</span><br><span class="line">&lt;div id="round"&gt;使用round来填充容器&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">br</span>&gt;</span><br><span class="line">&lt;div id="stretch"&gt;使用stretch来填充容器&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/08/css2/ke1.png" alt></p><blockquote><h4 id="Css3设置背景属性"><a href="#Css3设置背景属性" class="headerlink" title="Css3设置背景属性"></a>Css3设置背景属性</h4></blockquote><h5 id="【background-size属性】"><a href="#【background-size属性】" class="headerlink" title="【background-size属性】"></a>【<strong>background-size属性</strong>】</h5><ul><li><p>作用:用来定义背景图像的大小</p></li><li><p>语法: <code>background-size:length|percentage|cover|contain</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设五背景图片高度和宽度。第一个值设置宽度, 第二个值设置的高度</td></tr><tr><td align="left">percentage</td><td align="left">将计算相对于背景定位区城的百分比。 第一个值设置宽度, 第二个值设置的高度</td></tr><tr><td align="left">cover</td><td align="left">此时会保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小(以y轴为主)</td></tr><tr><td align="left">contain</td><td align="left">此时会保持图像的纵横比并将图像缩放成将适合背景定位区域的最大大小(以x轴为主)</td></tr></tbody></table><h5 id="【background-origin属性】"><a href="#【background-origin属性】" class="headerlink" title="【background-origin属性】"></a>【<strong>background-origin属性</strong>】</h5><ul><li><p>作用:用来定义背景图像的定位区域</p></li><li><p>语法:<code>background-origin:padding-box|border-box|content-box</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="left">padding-box</th><th align="left">背景图像填充框的相对位置</th></tr></thead><tbody><tr><td align="left">border-box</td><td align="left">背景图像边界框的相对位置</td></tr><tr><td align="left">content-box</td><td align="left">背景图像的相对位置的内容框</td></tr></tbody></table><p><img src="/2019/09/08/css2/cq1.png" alt></p><h5 id="【background-clip属性】"><a href="#【background-clip属性】" class="headerlink" title="【background-clip属性】"></a>【<strong>background-clip属性</strong>】</h5><ul><li><p>作用:用来定义背景图像的裁剪区域</p></li><li><p>语法: <code>backgroud-clip:padding-box|border-box|content-box</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="left">border-box</th><th align="left">默认值,从边框区域向外裁剪背景</th></tr></thead><tbody><tr><td align="left">padding-box</td><td align="left">从补白区域向外裁剪背景</td></tr><tr><td align="left">content-box</td><td align="left">从内容区域向外裁剪背景</td></tr></tbody></table><blockquote><h4 id="CSS3文本相关"><a href="#CSS3文本相关" class="headerlink" title="CSS3文本相关"></a>CSS3文本相关</h4></blockquote><h5 id="【CSS3-font-face规则】"><a href="#【CSS3-font-face规则】" class="headerlink" title="【CSS3 @font-face规则】"></a>【<strong>CSS3 @font-face规则</strong>】</h5><ul><li><p>以前CSS的版本, 网页设计师不得不使用用户计算机上已经安装的字体。</p></li><li><p>使用CSS3, 网页设计师可以使用他/她喜欢的任何字体。</p></li><li><p>当你发现您要使用的字体文件时, 只需简单的将字体文件包含在网站中, 它会自动下载给需要的用户</p></li><li><p>我们要做的就是在@font-face规则中完成对字体的描述。</p></li><li><p><a href="https://www.cnblogs.com/hellman/p/6773461.html" target="_blank" rel="noopener"><strong>可参考链接</strong></a></p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: myFirstFont;</span><br><span class="line"><span class="attribute">src</span>:<span class="built_in">url</span>(sansation_bold.ttf); </span><br><span class="line"><span class="attribute">font-weight</span>:bold; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">font-family</th><th align="left">必需。规定字体的名称</th></tr></thead><tbody><tr><td align="left">src</td><td align="left">必需。定义字体文件的 URL</td></tr><tr><td align="left">font-style</td><td align="left">可选。定义字体的样式。默认是”normal”</td></tr><tr><td align="left">font-weight</td><td align="left">可选。定义字体的粗细。默认是”normal”</td></tr></tbody></table><p><strong>提示:</strong><a href="https://www.dafont.com/single-malta.font" target="_blank" rel="noopener"><strong>免费字体下载</strong></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    @<span class="keyword">font-face</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>: <span class="string">'Alex'</span>;</span><br><span class="line">      <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"KK.ttf"</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      <span class="attribute">font-style</span>: italic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.font-face-display</span>&#123;</span><br><span class="line">      <span class="attribute">font</span>:<span class="number">66px</span> Alex</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;div class="font-face-display"&gt;Take me to your heart&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/08/css2/1.png" alt></p><h5 id="【目前主要的几种网络字体】"><a href="#【目前主要的几种网络字体】" class="headerlink" title="【目前主要的几种网络字体】"></a>【<strong>目前主要的几种网络字体</strong>】</h5><ul><li>TrueType(.ttf)格式: 此字体是Windows和Mac的最常见的字体, 是一种RAW格式,  因此他不为网站优化, 支持这种手体的浏览器有[lE9+,Firefox3.5+,Chrome4+, Safari3+,Opera10+,iOS MobileSafari4.2+]</li><li>OpenType(.otf)格式: .otf字体被认为是一种原始的字体格式, 其内置在TrueType的基础上, 所以也提供了更多的功能,支持这种手体的浏览器有[Firefox3.5+,Chrome4.0+,Safari3.1+,Opera10.0+, iOS MobileSafari4. 2+]</li><li>Web Open Font Format(.woff)格式: woff字体是Web手体中最佳格式, 他是一个开放的TrueType/0penType的压缩版本。支持这种字体的浏览器有[lE9+, Firefox3.5+, Chrome6+, Safari3. 6+,0pera11.1+]</li><li>Embedded Open Type(.eot)格式:.eot字体是lE专用字体, 可以从TrueType创建此格式字体,支持这种字体的浏览器有[lE4+]</li></ul><h5 id="【word-wrap属性】"><a href="#【word-wrap属性】" class="headerlink" title="【word-wrap属性】"></a>【<strong>word-wrap属性</strong>】</h5><ul><li>作用: 用来定义文本超过指定容器的边界时是否断开转行</li><li>语法: <code>word-wrap:normal|break-word</code></li><li>语法描述:</li></ul><table><thead><tr><th align="left">normal</th><th align="left">只在先许的断字点换行 (浏览器保持默认处理)</th></tr></thead><tbody><tr><td align="left">break-word</td><td align="left">在长单词或 URL地址内部进行换行</td></tr></tbody></table><h5 id="【text-overflow属性】"><a href="#【text-overflow属性】" class="headerlink" title="【text-overflow属性】"></a>【<strong>text-overflow属性</strong>】</h5><ul><li><p>作用: 用来定义省略文本的处理方式</p></li><li><p>语法: <code>text-overflow:clip|ellipisis|string</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="left">clip</th><th align="left">修剪文本</th></tr></thead><tbody><tr><td align="left">ellipsis</td><td align="left">显示省略持号来代表被修剪的文本</td></tr><tr><td align="left">string</td><td align="left">使用给定的字符事来代表被修剪的文本(当前浏览器不支持)</td></tr></tbody></table><p><strong>注意</strong>: 实际上,text-overflow属性仅是内容注解, 表明当文本溢出时是否显示省略标记, 并不具备样式定义的特性。要实现溢出时产生省略号的效果, 我们应该再定义两个样式:强制文本一行内显示(white-space:nowrap)和溢出内容为隐藏(overflow:hidden)</p><blockquote><h4 id="颜色相关"><a href="#颜色相关" class="headerlink" title="颜色相关"></a>颜色相关</h4></blockquote><h5 id="【RGBA颜色值】"><a href="#【RGBA颜色值】" class="headerlink" title="【RGBA颜色值】"></a>【<strong>RGBA颜色值</strong>】</h5><ul><li><p>作用:它在红、绿、蓝三原色通道的基础上增加了不透明度参数。</p></li><li><p>语法:<code>RGBA(R,G,B,A)</code></p></li><li><p>语法插述:</p></li></ul><table><thead><tr><th align="center">取值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">R</td><td align="center">红色值,0-255</td></tr><tr><td align="center">G</td><td align="center">绿色值,0-255</td></tr><tr><td align="center">B</td><td align="center">蓝色值,0-255</td></tr><tr><td align="center">A</td><td align="center">透明度,0-1之间</td></tr></tbody></table><h5 id="【HSL颜色值】"><a href="#【HSL颜色值】" class="headerlink" title="【HSL颜色值】"></a>【<strong>HSL颜色值</strong>】</h5><ul><li><p>作用: 它通过对色调(H)、 他和度(S)和亮度(L) 3个颜色通道的变化以及它们相互之间的叠加来获得各种颜色 。</p></li><li><p>语法: <code>HSL(&lt;Hue&gt;,&lt;Saturation&gt;,&lt;Lightness&gt;)</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="center">Hue</th><th align="left">0(或360)表示红色, 120表示绿色, 240表示蓝色,也可取其他数值来指定颜色。取值为: 0-360</th></tr></thead><tbody><tr><td align="center">Saturation</td><td align="left">取值为: 0.0% -100.0%, 0%表示灰色,100%颜色最艳。</td></tr><tr><td align="center">Lightness</td><td align="left">取值为: 0.0%-100.0%,0%最暗,  显示为黑色,100%最亮, 显示为白色</td></tr></tbody></table><h5 id="【HSLA颜色值】"><a href="#【HSLA颜色值】" class="headerlink" title="【HSLA颜色值】"></a>【<strong>HSLA颜色值</strong>】</h5><ul><li><p>作用: 它通过对色调(H)、 他和度(S)和亮度(L) 3个要素基础上增加了不透明度参数。</p></li><li><p>语法: <code>HSL(&lt;Hue&gt;,&lt;Saturation&gt;,&lt;Lightness&gt;,&lt;alpha&gt;)</code></p></li><li><p>语法描述:</p></li></ul><table><thead><tr><th align="center">Hue</th><th align="left">0(或360)表示红色, 120表示绿色, 240表示蓝色,也可取其他数值来指定颜色。取值为: 0-360</th></tr></thead><tbody><tr><td align="center">Saturation</td><td align="left">取值为: 0.0% -100.0%, 0%表示灰色,100%颜色最艳。</td></tr><tr><td align="center">Lightness</td><td align="left">取值为: 0.0%-100.0%,0%最暗,  显示为黑色,100%最亮, 显示为白色</td></tr><tr><td align="center">alpha</td><td align="left">取值0~1之间</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.rgba1</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 0, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.rgba2</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 0, 0.8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.rgba3</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 0, 0.6);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.rgba4</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 0, 0.4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.rgba5</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 0, 0.2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span><span class="selector-class">.rgba6</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 0, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*HSL*/</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsl1</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsl</span>(320, 100%, 50%);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsl2</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsl</span>(320, 50%, 50%);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsl3</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsl</span>(320, 100%, 75%);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsl4</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsl</span>(202, 100%, 50%);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsl5</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsl</span>(202, 50%, 50%);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsl6</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsl</span>(202, 100%, 75%);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*HSLA*/</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsla1</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsla</span>(320, 100%, 50%, 0.2);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsla2</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsla</span>(320, 50%, 50%, 0.4);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsla3</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsla</span>(320, 100%, 75%, 0.6);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsla4</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsla</span>(202, 100%, 50%, 0.8);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsla5</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsla</span>(202, 50%, 50%, 1.0);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.hsla6</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">hsla</span>(202, 100%, 75%, 0);</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;h3&gt;Css3的RGBA效果&lt;/h3&gt;</span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;li class="rgba1"&gt;1&lt;/li&gt;</span><br><span class="line">  &lt;li class="rgba2"&gt;0.8&lt;/li&gt;</span><br><span class="line">  &lt;li class="rgba3"&gt;0.6&lt;/li&gt;</span><br><span class="line">  &lt;li class="rgba4"&gt;0.4&lt;/li&gt;</span><br><span class="line">  &lt;li class="rgba5"&gt;0.2&lt;/li&gt;</span><br><span class="line">  &lt;li class="rgba6"&gt;0&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;h3&gt;Css3的HSL效果&lt;/h3&gt;</span><br><span class="line">&lt;div class="hsl1"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsl2"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsl3"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsl4"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsl5"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsl6"&gt;&lt;/div&gt;</span><br><span class="line">&lt;h3&gt;Css3的HSLA效果&lt;/h3&gt;</span><br><span class="line">&lt;div class="hsla1"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsla2"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsla3"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsla4"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsla5"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="hsla6"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/08/css2/ke3.png" alt></p><h5 id="【transparent】"><a href="#【transparent】" class="headerlink" title="【transparent】"></a>【<strong>transparent</strong>】</h5><ul><li>作用:相当于使用了值为0的alpha通道,将背景、文字、边框等的颜色设定为完全透明。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:transparent;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid transparent;</span><br><span class="line"><span class="attribute">background</span>:transparent;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站语言切换</title>
      <link href="/2019/09/07/wz1/"/>
      <url>/2019/09/07/wz1/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://blog.csdn.net/CSDN_LQR/article/details/78026254" target="_blank" rel="noopener">这可能是目前最方便的网站中英文切换（理论支持所有语言）</a></p></li><li><p><a href="https://www.cnblogs.com/tu-0718/p/9977898.html" target="_blank" rel="noopener">实现网站中英文切换的三种方法</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取子节点所有父节点的name的拼接</title>
      <link href="/2019/09/07/ztree2/"/>
      <url>/2019/09/07/ztree2/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.cnblogs.com/liyang19910805/p/5806155.html" target="_blank" rel="noopener">原文链接</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取子节点，所有父节点的name的拼接字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilePath</span>(<span class="params">treeObj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(treeObj==<span class="literal">null</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> filename = treeObj.name;</span><br><span class="line"><span class="keyword">var</span> pNode = treeObj.getParentNode();</span><br><span class="line"><span class="keyword">if</span>(pNode!=<span class="literal">null</span>)&#123;</span><br><span class="line">filename = getFilePath(pNode) +<span class="string">"&gt;"</span>+ filename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ztree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ztree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$.fn.zTree is undefined</title>
      <link href="/2019/09/07/ztree1/"/>
      <url>/2019/09/07/ztree1/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5></blockquote><p><strong>在使用ztree做目录树功能的时候,在初始化的时候报 $.fn.zTree is undefined 错误</strong></p><blockquote><h5 id="原因及解决办法"><a href="#原因及解决办法" class="headerlink" title="原因及解决办法"></a>原因及解决办法</h5></blockquote><ul><li><p>在父页面引用的jquery相关js文件,layui弹出层引用页面,子页面同时引用了jquery和ztree相关的js</p><ul><li>​    子页面引入js库放到body标签中,保存后再运行</li></ul></li><li><p>把jquery的js放在了ztree的下面,ztree覆盖了jquery里面的一些内容</p><ul><li>​     把jquery的js放在前面即可</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> Ztree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ztree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layui相关问题推荐阅读</title>
      <link href="/2019/09/07/layui5/"/>
      <url>/2019/09/07/layui5/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://www.jb51.net/article/145615.htm" target="_blank" rel="noopener">解决Layui选择全部,换页checkbox复选框重新勾选的问题方法</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43233914/article/details/86525955" target="_blank" rel="noopener">layui admin table单击行勾选checkbox并高亮显示</a></p></li><li><p><a href="https://www.jianshu.com/p/5e526c9db035" target="_blank" rel="noopener">Layui select配合input实现可输入，可选择，可搜索</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>select组件设置下拉框的高度</title>
      <link href="/2019/09/07/layui4/"/>
      <url>/2019/09/07/layui4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layui-form-select</span> <span class="selector-tag">dl</span> &#123; <span class="attribute">max-height</span>:<span class="number">210px</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui表格内放置图片,并点击放大</title>
      <link href="/2019/09/07/layui3/"/>
      <url>/2019/09/07/layui3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/huangbaokang/article/details/80697341" target="_blank" rel="noopener">原文链接</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//layui  table:</span></span><br><span class="line">   done:<span class="function"><span class="keyword">function</span>(<span class="params">res,curr,count</span>)</span>&#123;</span><br><span class="line">            hoverOpenImg();<span class="comment">//显示大图</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//显示大图片</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hoverOpenImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img_show = <span class="literal">null</span>; <span class="comment">// tips提示</span></span><br><span class="line">    $(<span class="string">'td img'</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//alert($(this).attr('src'));</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="string">"&lt;img class='img_msg' src='"</span>+$(<span class="keyword">this</span>).attr(<span class="string">'src'</span>)+<span class="string">"' style='width:130px;' /&gt;"</span>;</span><br><span class="line">        img_show = layer.tips(img, <span class="keyword">this</span>,&#123;</span><br><span class="line">            tips:[<span class="number">2</span>, <span class="string">'rgba(41,41,41,.5)'</span>]</span><br><span class="line">            ,<span class="attr">area</span>: [<span class="string">'160px'</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        layer.close(img_show);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'td img'</span>).attr(<span class="string">'style'</span>,<span class="string">'max-width:70px'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出层父子页面事件相互调用方法</title>
      <link href="/2019/09/07/layui2/"/>
      <url>/2019/09/07/layui2/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://www.jb51.net/article/145817.htm" target="_blank" rel="noopener">原文链接</a></p></li><li><p><strong>父页面</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a data-url=<span class="string">"bbbb.html"</span> id=<span class="string">"parentIframe"</span>&gt;小小提示层&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;input id="shuzhi" /</span>&gt;</span><br><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"but_par"</span>&gt;父页面&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script src=<span class="string">"../jquery-1.9.1.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"layer/layer.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#parentIframe"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = $(<span class="keyword">this</span>).attr(<span class="string">"data-url"</span>);</span><br><span class="line">layer.open(&#123;</span><br><span class="line">type: <span class="number">2</span>,</span><br><span class="line">content: a,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">layero, index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> body = layer.getChildFrame(<span class="string">'body'</span>, index); <span class="comment">//获取子页面内容</span></span><br><span class="line"><span class="comment">//得到iframe页的窗口对象,执行iframe页的方法：iframeWin.method();</span></span><br><span class="line"><span class="keyword">var</span> iframeWin = <span class="built_in">window</span>[layero.find(<span class="string">'iframe'</span>)[<span class="number">0</span>][<span class="string">'name'</span>]];</span><br><span class="line">body.find(<span class="string">"#transmit"</span>).click(); <span class="comment">//执行子页面的方法</span></span><br><span class="line">body.find(<span class="string">'input'</span>).val(<span class="string">'Hi，我是从父页来的'</span>)</span><br><span class="line">$(<span class="string">".but_par"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="number">222</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>子页面</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input id=<span class="string">"name"</span> value=<span class="string">"不满意"</span> /&gt;</span><br><span class="line">&lt;button id=<span class="string">"transmit"</span>&gt;给父层传值&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>, <span class="string">"#transmit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">parent.$(<span class="string">"#shuzhi"</span>).val($(<span class="string">"#name"</span>).val());</span><br><span class="line">parent.location.reload();</span><br><span class="line">刷新父页面</span><br><span class="line"><span class="comment">//关闭layer弹出层</span></span><br><span class="line"><span class="keyword">var</span> index = parent.layer.getFrameIndex(<span class="built_in">window</span>.name); <span class="comment">//获取窗口索引</span></span><br><span class="line">parent.layer.close(index);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">window</span>.parent.$(<span class="string">".but_par"</span>).click(); <span class="comment">//执行父页面的事件</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layui 给数据表格加序号</title>
      <link href="/2019/09/07/layui1/"/>
      <url>/2019/09/07/layui1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_40319394/article/details/80657832" target="_blank" rel="noopener">原文链接</a></p><ul><li><strong>第一种需求,只给当前页加序号</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">,<span class="attr">cols</span>: [[</span><br><span class="line">    &#123;<span class="attr">field</span>:<span class="string">'tourPlayerId'</span>, <span class="attr">width</span>:<span class="number">80</span>, <span class="attr">title</span>: <span class="string">'ID1'</span>, <span class="attr">sort</span>: <span class="literal">true</span>,<span class="attr">fixed</span>: <span class="string">'left'</span>,&#125;</span><br><span class="line">    ,&#123;<span class="attr">field</span>:<span class="string">'zizeng'</span>, <span class="attr">width</span>:<span class="number">80</span>, <span class="attr">title</span>: <span class="string">'排名'</span>,<span class="attr">fixed</span>: <span class="string">'left'</span>,<span class="attr">templet</span>: <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> d.LAY_TABLE_INDEX+<span class="number">1</span>;&#125;&#125;</span><br><span class="line">    ]]</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>需注意:点击下一页时,只会重新从1开始排序</strong></p><ul><li><strong>第二种需求,包括分页的数据也加上序号(连续性排序)</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">,<span class="attr">cols</span>: [[</span><br><span class="line">    &#123;<span class="attr">field</span>:<span class="string">'tourPlayerId'</span>, <span class="attr">width</span>:<span class="number">80</span>, <span class="attr">title</span>: <span class="string">'ID1'</span>, <span class="attr">sort</span>: <span class="literal">true</span>,<span class="attr">fixed</span>: <span class="string">'left'</span>,&#125;</span><br><span class="line">    ,&#123;<span class="attr">field</span>:<span class="string">'zizeng'</span>, <span class="attr">width</span>:<span class="number">80</span>, <span class="attr">title</span>: <span class="string">'排名'</span>,<span class="attr">fixed</span>: <span class="string">'left'</span>,    <span class="attr">type</span>:<span class="string">'numbers'</span>&#125;</span><br><span class="line">    ]]</span><br></pre></td></tr></table></figure><p><strong>设定列类型。可选值有：normal(常规列,无需设定)、checkbox(复选框列)、space(空列)、numbers(序号列)</strong></p><p><strong>注意:该参数为 layui 2.2.0 新增。而如果是之前的版本,复选框列采用 checkbox:true、空列采用 space: true</strong></p>]]></content>
      
      
      <categories>
          
          <category> Layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dom对HTML元素的增删改操作</title>
      <link href="/2019/09/07/js6/"/>
      <url>/2019/09/07/js6/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/09/07/js6/bo8.png" alt><img src="/2019/09/07/js6/bo9.jpg" alt>为了动态地修改HTML元素,须先访问HTML元素。 </p><h4 id="DOM主要提供了两种方式来访问-HTML元素"><a href="#DOM主要提供了两种方式来访问-HTML元素" class="headerlink" title="DOM主要提供了两种方式来访问 HTML元素"></a>DOM主要提供了两种方式来访问 HTML元素</h4><ul><li><p>根据 l D访问HTML元素一通过document对象调用getE l ementById()方法来查找具有唯一id属性值的元素。</p></li><li><p>利用节点关系访问HTML元素。常用的属性和方法</p></li></ul><table><thead><tr><th align="center">parentNode</th><th align="left">返回当前节点的父节点</th></tr></thead><tbody><tr><td align="center">previousSibling</td><td align="left">返回当前节点的前一个兄弟节点</td></tr><tr><td align="center">nextSibling</td><td align="left">返回当前节点的后一个兄弟节点</td></tr><tr><td align="center">childNodes</td><td align="left">返回当前节点的所有子节点</td></tr><tr><td align="center">firstChild</td><td align="left">返回当前节点的第一个子节点</td></tr><tr><td align="center">lastChild</td><td align="left">返回当前节点的最后一个子节点</td></tr><tr><td align="center">getElementsByTagName(tagName)</td><td align="left">返回当前节点的具有指定标签名的所有子节点</td></tr><tr><td align="center"></td><td align="left"></td></tr></tbody></table><a id="more"></a><p><img src="/2019/09/07/js6/bo11.jpg" alt></p><blockquote><h4 id="DOM创建节点的方法"><a href="#DOM创建节点的方法" class="headerlink" title="DOM创建节点的方法"></a>DOM创建节点的方法</h4></blockquote><ul><li><strong>document.createElement(Tag),Tag必须是合法的HTML元素</strong></li></ul><blockquote><h4 id="DOM复制节点的方法"><a href="#DOM复制节点的方法" class="headerlink" title="DOM复制节点的方法"></a>DOM复制节点的方法</h4></blockquote><ul><li><strong>节点cloneNode(boolean deep),当deep为true时,表示复制当前节点以及当前节点的全部后代节点(深复制)。为false时,只复制当前节点浅复制)</strong></li></ul><blockquote><h4 id="DOM添加、-删除节点的方法"><a href="#DOM添加、-删除节点的方法" class="headerlink" title="DOM添加、 删除节点的方法"></a>DOM添加、 删除节点的方法</h4></blockquote><table><thead><tr><th align="left">appendChild(newNode)</th><th align="left">将newNode添加成当前节点的最后一个子节点</th></tr></thead><tbody><tr><td align="left">insertBefore(newNode,refNode)</td><td align="left">在 refNode节点之前插入newNode节点</td></tr><tr><td align="left">replaceChild(newNode,oldNode)</td><td align="left">将ol dNode节点替换成newNode节点</td></tr><tr><td align="left">removeChild(oldNode)</td><td align="left">将oldNode子节点删除</td></tr></tbody></table><ul><li><strong>代码示例:</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);<span class="comment">//ie不支持</span></span></span><br><span class="line"><span class="javascript">                element.innerHTML = <span class="string">"南京"</span>;</span></span><br><span class="line">                city.appendChild(element);</span><br><span class="line"><span class="xml">                //city.firstChild.nextSibling --&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//city.insertBefore(element,city.firstChild.nextSibling);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//city.replaceChild(element,city.firstChild.nextSibling)</span></span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> element = city.firstChild.nextSibling.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//true深复制(后代元素也会复制) false浅复制 只复制当前元素</span></span></span><br><span class="line">                city.appendChild(element);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> element = city.firstChild.nextSibling;</span></span><br><span class="line">                city.removeChild(element);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"创建复制替换节点"</span> <span class="attr">onclick</span>=<span class="string">"create()"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"复制节点"</span> <span class="attr">onclick</span>=<span class="string">"copy()"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"删除节点"</span> <span class="attr">onclick</span>=<span class="string">"del()"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="DOM为列表框、下拉菜单添加选项的方式"><a href="#DOM为列表框、下拉菜单添加选项的方式" class="headerlink" title="DOM为列表框、下拉菜单添加选项的方式"></a>DOM为列表框、下拉菜单添加选项的方式</h4></blockquote><p>创建选项除了使用前面所示createElement方法之外, 还可以使用专门的构造器来构造一个选项出来 </p><ul><li><strong>语法如下:</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Option(text,value,defaultSelected,selected)</span><br></pre></td></tr></table></figure><ul><li><strong>该构造器有4个参数</strong></li></ul><table><thead><tr><th align="left">text</th><th align="left">该选项的文本、即该选项所呈现的”内容”</th></tr></thead><tbody><tr><td align="left">value</td><td align="left">选中该选项的值</td></tr><tr><td align="left">defaultSelected</td><td align="left">设置默认是否显示该选项</td></tr><tr><td align="left">selected</td><td align="left">设置该选项当前是否被选中</td></tr></tbody></table><p><strong>提示:并不是每次构造函数都需指明4个参数,可以指明一个或者两个都可以(浏览器都兼容).</strong></p><ul><li><p><strong>添加创建好的选项至列表框或下拉菜单的方式</strong></p><ul><li>直接为&lt;select…/&gt;的指定选项赋值</li></ul><p><code>列表框或下拉菜单对象.options[i]=创建好的option对象</code></p></li><li><p><strong>删除列表框或下拉菜单的选项的方法</strong></p></li></ul><p><strong>列表框或下拉菜单对象.remove(index)方法/对象.options[index]=null 删除指定项</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">createSelect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"select"</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> op = <span class="keyword">new</span> Option(<span class="string">"新增的选项"</span> + i, i);</span><br><span class="line">                    element.options[i] = op;</span><br><span class="line">                &#125;</span><br><span class="line">                element.size = <span class="number">5</span>; <span class="comment">//一次性显示5个</span></span><br><span class="line">                element.id = <span class="string">"city"</span>; <span class="comment">//设置id属性</span></span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).appendChild(element);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">delOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">                <span class="keyword">var</span> len = city.options.length;</span><br><span class="line">                <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    city.remove(len - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//city.options[len-1]=null;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">delAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">                <span class="keyword">var</span> len = city.options.length;</span><br><span class="line">                <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    city.options.length = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body id=<span class="string">"test"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"创建一个城市列表"</span> onclick=<span class="string">"createSelect()"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"一条条删除列表框内容"</span> onclick=<span class="string">"delOne()"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"一次性清空列表框内容"</span> onclick=<span class="string">"delAll()"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><blockquote><h4 id="DOM动态添加删除表格内容所使用到的常用方法"><a href="#DOM动态添加删除表格内容所使用到的常用方法" class="headerlink" title="DOM动态添加删除表格内容所使用到的常用方法"></a>DOM动态添加删除表格内容所使用到的常用方法</h4></blockquote><table><thead><tr><th align="left">insertRow(index)</th><th align="left">在指定索引位置插入一行</th></tr></thead><tbody><tr><td align="left">createCaption()</td><td align="left">为该表格创建标题</td></tr><tr><td align="left">createTFoot()</td><td align="left">为该表格创建&lt;tfoot. .. /&gt;元素,假如已存在就返回现有的</td></tr><tr><td align="left">createTHead()</td><td align="left">为该表格创建&lt;thead. .. /&gt;元素,假如已存在就返回现有的</td></tr><tr><td align="left">deleteRow(index)</td><td align="left">删除表格中 i ndex索引处的行</td></tr><tr><td align="left">deleteCaption()</td><td align="left">删除表格标题</td></tr><tr><td align="left">deleteTFoot()</td><td align="left">从表格删除 tFoot元素及其内容</td></tr><tr><td align="left">deleteTHead()</td><td align="left">从表格删除 tHead元素及其内容</td></tr></tbody></table><ul><li><strong>给表格行创建,删除单元格的方法</strong></li></ul><table><thead><tr><th align="left">insertCell(index)</th><th align="left">在index处创建一个单元格,返回新创建的单元格</th></tr></thead><tbody><tr><td align="left">deleteCell(index)</td><td align="left">删除某行在index索引处的单元格</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">createTable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">                <span class="keyword">var</span> t = <span class="built_in">document</span>.createElement(<span class="string">"table"</span>);</span><br><span class="line">                t.border = <span class="string">"1"</span>;</span><br><span class="line">                t.id = <span class="string">"mytable"</span>;</span><br><span class="line">                <span class="keyword">var</span> caption = t.createCaption();</span><br><span class="line">                caption.innerHTML = <span class="string">"我的表格"</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> tr = t.insertRow(i);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">var</span> td = tr.insertCell(j);</span><br><span class="line">                        td.innerHTML = <span class="string">"单元格"</span> + i + j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                b.appendChild(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">delLastRow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">"mytable"</span>);</span><br><span class="line">                <span class="keyword">var</span> rows = t.rows;</span><br><span class="line">                <span class="keyword">if</span>(rows.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    t.deleteRow(rows.length - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">delLastCell</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> t = <span class="built_in">document</span>.getElementById(<span class="string">"mytable"</span>);</span><br><span class="line">                <span class="keyword">var</span> rows = t.rows;</span><br><span class="line">                <span class="keyword">if</span>(rows.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> lastRow = t.rows[t.rows.length - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">var</span> len = lastRow.cells.length;</span><br><span class="line">                    <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        lastRow.deleteCell(len - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body id=<span class="string">"test"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"创建一个5行4列的表格"</span> onclick=<span class="string">"createTable()"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"删除最后一行"</span> onclick=<span class="string">"delLastRow()"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"删除最后一个单元格"</span> onclick=<span class="string">"delLastCell()"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dom访问表单控件的常用属性和方法</title>
      <link href="/2019/09/07/js7/"/>
      <url>/2019/09/07/js7/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="DOM访问列表框、下拉菜单的常用属性"><a href="#DOM访问列表框、下拉菜单的常用属性" class="headerlink" title="DOM访问列表框、下拉菜单的常用属性"></a>DOM访问列表框、下拉菜单的常用属性</h4></blockquote><table><thead><tr><th align="left">form</th><th align="left">返回列表框/下拉框所在的表单对象</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">返回列表框/下拉框的选项个数</td></tr><tr><td align="left">options</td><td align="left">返回列表框/下拉菜单里所有选项组成的数组</td></tr><tr><td align="left">selectedIndex</td><td align="left">返回下拉列表中选中选项的索引</td></tr><tr><td align="left">type</td><td align="left">返回下拉列表的类型, 多选的话返回select-multiple,单选select-one</td></tr></tbody></table><a id="more"></a><blockquote><h4 id="使用options-index-返回具体选项所对应的常用属性"><a href="#使用options-index-返回具体选项所对应的常用属性" class="headerlink" title="使用options[index]返回具体选项所对应的常用属性"></a>使用options[index]返回具体选项所对应的常用属性</h4></blockquote><table><thead><tr><th align="left">defaultSelected</th><th align="left">返回该选项默认是否被选中</th></tr></thead><tbody><tr><td align="left">index</td><td align="left">返回该选项在列框/下拉菜单中的索引</td></tr><tr><td align="left">selected</td><td align="left">返回该选项是否被选中</td></tr><tr><td align="left">text</td><td align="left">返回该选项呈现的文本</td></tr><tr><td align="left">value</td><td align="left">返回该选项的value属性值</td></tr></tbody></table><blockquote><h4 id="在elements返回的数组中访问具体的表单控件语法"><a href="#在elements返回的数组中访问具体的表单控件语法" class="headerlink" title="在elements返回的数组中访问具体的表单控件语法"></a>在elements返回的数组中访问具体的表单控件语法</h4></blockquote><table><thead><tr><th align="left">.elements[index]</th><th align="left">返回该表单中的第index个表单控件</th></tr></thead><tbody><tr><td align="left">.elements[elementName]</td><td align="left">返回表单内id或name为elementName的表单控件</td></tr><tr><td align="left">.elementName</td><td align="left">返回表单中id或name为elementName的表单控件</td></tr></tbody></table><ul><li><strong>案例:表单控件</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;表单控件&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            function operateForm() &#123;</span></span><br><span class="line"><span class="regexp">                var myForm = document.forms[0];</span></span><br><span class="line"><span class="regexp">                console.log(myForm.action);</span></span><br><span class="line"><span class="regexp">                console.log(myForm.method);</span></span><br><span class="line"><span class="regexp">                console.log(myForm.target);</span></span><br><span class="line"><span class="regexp">                myForm.submit(); /</span><span class="regexp">/表单提交</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/myForm.reset(); /</span><span class="regexp">/表单重置</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>script&gt;</span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">        &lt;form id="myform" action="https:/</span><span class="regexp">/www.baidu.com" method="get" target="_self"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;input name="username" type="text" value="liming" /</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">            &lt;input name=<span class="string">"password"</span> type=<span class="string">"password"</span> value=<span class="string">"123456"</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">            &lt;select name=<span class="string">"city"</span>&gt;</span><br><span class="line">                &lt;option value=<span class="string">"shanghai"</span>&gt;上海&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                &lt;option value="beijing"&gt;北京&lt;/</span>option&gt;</span><br><span class="line">            &lt;<span class="regexp">/select&gt;&lt;br/</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取表单内的第一个控件"</span> onclick=<span class="string">"alert(document.getElementById('myform').elements[0].value)"</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取表单内的第二个控件"</span> onclick=<span class="string">"alert(document.getElementById('myform').elements['password'].value)"</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取表单内的第三个控件"</span> onclick=<span class="string">"alert(document.getElementById('myform').city.value)"</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">"button"</span> value=<span class="string">"操作表单"</span> onclick=<span class="string">"operateForm()"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>案例:查找列表框,下拉菜单控件</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;查找列表框,下拉菜单控件&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;select name=<span class="string">"city"</span> id=<span class="string">"city"</span> size=<span class="string">"5"</span>&gt;</span><br><span class="line">            &lt;option value=<span class="string">"shanghai"</span>&gt;上海&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="beijing" selected="selected"&gt;北京&lt;/</span>option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"shanghai"</span>&gt;天津&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="beijing"&gt;南京&lt;/</span>option&gt;</span><br><span class="line">            &lt;option value=<span class="string">"shanghai"</span>&gt;武汉&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option value="shanghai"&gt;深圳&lt;/</span>option&gt;</span><br><span class="line">        &lt;<span class="regexp">/select&gt;&lt;br/</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"第一个城市"</span> onclick=<span class="string">"change(s_city.options[0])"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"上一个城市"</span> onclick=<span class="string">"change(s_city.options[s_city.selectedIndex-1])"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"下一个城市"</span> onclick=<span class="string">"change(s_city.options[s_city.selectedIndex+1])"</span> /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"最后一个城市"</span> onclick=<span class="string">"change(s_city.options[s_city.length-1])"</span> /&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="keyword">var</span> s_city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line">            <span class="keyword">var</span> change = <span class="function"><span class="keyword">function</span>(<span class="params">city</span>) </span>&#123;</span><br><span class="line">                alert(city.text);</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="DOM访问表格子元素的常用属性和方法"><a href="#DOM访问表格子元素的常用属性和方法" class="headerlink" title="DOM访问表格子元素的常用属性和方法"></a>DOM访问表格子元素的常用属性和方法</h4></blockquote><table><thead><tr><th align="left">caption</th><th align="left">返回表格的标题对象</th></tr></thead><tbody><tr><td align="left">rows</td><td align="left">返回该表格里所有行</td></tr><tr><td align="left">tbodies</td><td align="left">返回该表格里所有&lt;tbody../&gt;元素组成的数组</td></tr><tr><td align="left">tfoot</td><td align="left">返回该表格里所有的&lt;tfoot../&gt;元素</td></tr><tr><td align="left">thead</td><td align="left">返回该表格里所有的&lt;thead../&gt;元素</td></tr></tbody></table><blockquote><h4 id="通过rows-index-返回表格指定的行所对应的属性"><a href="#通过rows-index-返回表格指定的行所对应的属性" class="headerlink" title="通过rows[index]返回表格指定的行所对应的属性"></a>通过rows[index]返回表格指定的行所对应的属性</h4></blockquote><table><thead><tr><th align="left">cells</th><th align="left">返回该表格内所有的单元格组成的数组</th></tr></thead><tbody><tr><td align="left">rowIndex</td><td align="left">返回该表格行在表格内的索引值</td></tr><tr><td align="left">sectionRowIndex</td><td align="left">返回该表格行在其所在元素(tbody,thead等元素)的索引值</td></tr></tbody></table><blockquote><h4 id="通过cells-index-返回表格指定的列所对应的属性"><a href="#通过cells-index-返回表格指定的列所对应的属性" class="headerlink" title="通过cells[index]返回表格指定的列所对应的属性"></a><strong>通过cells[index]返回表格指定的列所对应的属性</strong></h4></blockquote><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">cellIndex</td><td align="center">返回该单元格在表格行内的索引值</td></tr></tbody></table><p><img src="/2019/09/07/js7/kk.jpg" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCell</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> row=<span class="built_in">document</span>.getElementById(<span class="string">"row"</span>).value;</span><br><span class="line"><span class="keyword">var</span> cell=<span class="built_in">document</span>.getElementById(<span class="string">"cell"</span>).value;</span><br><span class="line"><span class="keyword">var</span> t=<span class="built_in">document</span>.getElementById(<span class="string">"mytable"</span>);</span><br><span class="line">t.rows[row<span class="number">-1</span>].cells[cell<span class="number">-1</span>].innerHTML=<span class="built_in">document</span>.getElementById(<span class="string">"course"</span>).value;</span><br><span class="line"><span class="comment">//t.rows.item(row-1).cells.item(cell-1).innerHTML=document.getElementById("course").value;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中创建对象主要有3种方式(常用内置对象)</title>
      <link href="/2019/09/07/js5/"/>
      <url>/2019/09/07/js5/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="使用-new关键字调用构造器创建对象"><a href="#使用-new关键字调用构造器创建对象" class="headerlink" title="使用 new关键字调用构造器创建对象"></a>使用 new关键字调用构造器创建对象</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  s1=<span class="keyword">new</span> Student();<span class="comment">//没有传入参数</span></span><br><span class="line"><span class="keyword">var</span>  s2=<span class="keyword">new</span> Student(<span class="string">"haogeshuai"</span>,<span class="number">30</span>) ;</span><br><span class="line"><span class="built_in">document</span>. write(s1.name+<span class="string">"--"</span>+s1.age+<span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>. write(s2.name+<span class="string">"--"</span>+s2.age) ;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><h4 id="使用Object直接创建对象"><a href="#使用Object直接创建对象" class="headerlink" title="使用Object直接创建对象"></a>使用Object直接创建对象</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> myObj=<span class="keyword">new</span> <span class="built_in">Object</span>() ;</span><br><span class="line">myObj.name=<span class="string">"haogeshuai"</span>; </span><br><span class="line">myObj.age=<span class="number">34</span>;</span><br><span class="line">myObj.info=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">document</span>. write(<span class="string">"我的名字叫: "</span>+<span class="keyword">this</span>.name+<span class="string">"&lt;br/&gt;"</span>) ; </span><br><span class="line"><span class="built_in">document</span>. write(<span class="string">"今年"</span>+<span class="keyword">this</span>.age+<span class="string">"岁&lt;br/&gt;"</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">myObj.info();</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="JavaScript使用JSON创建对象的语法"><a href="#JavaScript使用JSON创建对象的语法" class="headerlink" title="JavaScript使用JSON创建对象的语法"></a>JavaScript使用JSON创建对象的语法</h4></blockquote><p><code>JSON(JavaSoript Objeot Notation)</code>是一种轻量级的数据交换,易于人阅读和编写.</p><p><strong>JSON的格式</strong></p><p>JSON对象是以一对<code>”大括号”</code>括起来,<br>大括号内以多个”名值对”组成,多个名值对之问用<code>“逗号”</code>隔开,名所对应的值可以是各种数据类型的值,<br>也可以是JSON对象。 JSON数组用<code>“[]”</code>括起来.</p><ul><li><strong>语法</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object=&#123;属性名<span class="number">1</span>:属性值<span class="number">1</span>,属性名<span class="number">2</span>:属性值<span class="number">2</span>,...&#125;</span><br></pre></td></tr></table></figure><p><strong>示例:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p=&#123;</span><br><span class="line">name: <span class="string">"haogeshua i,</span></span><br><span class="line"><span class="string">gender: "</span>male<span class="string">",</span></span><br><span class="line"><span class="string">info: function ()&#123;</span></span><br><span class="line"><span class="string">document.write("</span>姓名:<span class="string">"+this.name+"</span>,性别:<span class="string">"+this.gender);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"> p.info();</span></span><br></pre></td></tr></table></figure><ul><li>对象是 JavaScript的特性之一,它是一种非常重要的数据类型,是自我包含的数据集合。这里介绍两个实用的具体对象<code>Date和Math</code></li></ul><blockquote><h4 id="创建Date对象方法"><a href="#创建Date对象方法" class="headerlink" title="创建Date对象方法"></a>创建Date对象方法</h4></blockquote><table><thead><tr><th align="left">new Date()</th></tr></thead><tbody><tr><td align="left">new Date(month dd,yyyy hh:mm:ss)</td></tr><tr><td align="left">new Date(yyyy,mth,dd,hh,mm.ss)</td></tr><tr><td align="left">new Date(yyyy,mth,dd)</td></tr><tr><td align="left">new  Date(ms)</td></tr></tbody></table><blockquote><h4 id="Date对象设置时间方法"><a href="#Date对象设置时间方法" class="headerlink" title="Date对象设置时间方法"></a>Date对象设置时间方法</h4></blockquote><table><thead><tr><th align="center">setDate()</th><th align="center">设置Date对象中月的某一天(1~31)</th></tr></thead><tbody><tr><td align="center">setMonth()</td><td align="center">设置Date对象中月份(0~11)</td></tr><tr><td align="center">setFullYear()</td><td align="center">设置Date对象中的年份(四位数字)</td></tr><tr><td align="center">setHours()</td><td align="center">设置Date对象中的小时(0~23)</td></tr><tr><td align="center">setMinutes()</td><td align="center">设置Date对象中的分钟(0~59)</td></tr><tr><td align="center">setSeconds()</td><td align="center">设置Date对象中的秒钟(0~59)</td></tr><tr><td align="center">setMilliseconds()</td><td align="center">设置Date对象中的亳秒(0~999)</td></tr></tbody></table><blockquote><h4 id="Date对象获取时间细节方法"><a href="#Date对象获取时间细节方法" class="headerlink" title="Date对象获取时间细节方法"></a>Date对象获取时间细节方法</h4></blockquote><table><thead><tr><th align="center">getDate()</th><th align="center">从Date对象返回一个月中的某一天(1~31)</th></tr></thead><tbody><tr><td align="center">getDay()</td><td align="center">从Date对象返回一周中的某一天(0~6)</td></tr><tr><td align="center">getMonth()</td><td align="center">从Date对象返回月份(0~11)</td></tr><tr><td align="center">getFullYear()</td><td align="center">从Dae对象以四位数字返回年份</td></tr><tr><td align="center">getHours()</td><td align="center">返回Date对象的小时(0~23)。</td></tr><tr><td align="center">getMinutes()</td><td align="center">返回Date对象的分钟(0~59)</td></tr><tr><td align="center">getSeconds()</td><td align="center">返回Date对象的秒数(0~59)</td></tr><tr><td align="center">getTime ()</td><td align="center">返回1970年1月1日至今的亳秒数</td></tr></tbody></table><blockquote><h4 id="Math对象的常用方法"><a href="#Math对象的常用方法" class="headerlink" title="Math对象的常用方法"></a>Math对象的常用方法</h4></blockquote><table><thead><tr><th align="center">abs(x)</th><th align="center">返回数的绝对值</th></tr></thead><tbody><tr><td align="center">ceil(x)</td><td align="center">对数进行上舍入</td></tr><tr><td align="center">floor(x)</td><td align="center">对数进行下舍入</td></tr><tr><td align="center">max(x,y)</td><td align="center">返回x和y的最高值</td></tr><tr><td align="center">min(x,y)</td><td align="center">返回x和y的最低值</td></tr><tr><td align="center">pow(x,y)</td><td align="center">返回x的y次幂</td></tr><tr><td align="center">random()</td><td align="center">返回0~1之间的随机数</td></tr><tr><td align="center">round(x)</td><td align="center">把数四舍五入为最接近的整数</td></tr><tr><td align="center">sqrt(x)</td><td align="center">返回数的平方根</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM模型中常用对象的介绍</title>
      <link href="/2019/09/07/js4/"/>
      <url>/2019/09/07/js4/</url>
      
        <content type="html"><![CDATA[<p><u><strong>BOM-javaScript是运行在浏览器中的, 所以提供了一系列对象用于和浏览器窗口进行交互, 这些对象主要包括window、document、screen、location、  navigator等.通常统称为浏览器对象模型(Brower Object Model)</strong></u> </p><blockquote><h5 id="window对象是整个JavaScript脚本运行的顶层对象-它的常用属性如下"><a href="#window对象是整个JavaScript脚本运行的顶层对象-它的常用属性如下" class="headerlink" title="window对象是整个JavaScript脚本运行的顶层对象, 它的常用属性如下"></a>window对象是整个JavaScript脚本运行的顶层对象, 它的常用属性如下</h5></blockquote><a id="more"></a><table><thead><tr><th align="center">document</th><th align="left">返回该窗口内装载的HTML文档</th></tr></thead><tbody><tr><td align="center">location</td><td align="left">返回该窗口装载的HTML文档的uRL</td></tr><tr><td align="center">navigator</td><td align="left">返回浏览当前页面的浏览器, 包含了一系列的浏览器属性, 包括名称、版本号和平台等</td></tr><tr><td align="center">screen</td><td align="left">返回当前浏览者屏幕对象</td></tr><tr><td align="center">history</td><td align="left">返回该浏览窗口的历史</td></tr></tbody></table><blockquote><h5 id="Iocation对象常用属性如下"><a href="#Iocation对象常用属性如下" class="headerlink" title="Iocation对象常用属性如下"></a>Iocation对象常用属性如下</h5></blockquote><table><thead><tr><th align="center">hostname</th><th align="left">文档所在地址的主机名</th></tr></thead><tbody><tr><td align="center">href</td><td align="left">文档所在地址的uRL地址</td></tr><tr><td align="center">host</td><td align="left">文档所在地址的主机地址</td></tr><tr><td align="center">port</td><td align="left">文档所在地址的服务端口</td></tr><tr><td align="center">pathname</td><td align="left">文档所在地址的文件地址</td></tr><tr><td align="center">protocol</td><td align="left">装载该文档所使用的协议, 例如HTTP:等</td></tr></tbody></table><p><img src="/2019/09/07/js4/bo4.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">host name:localhost</span><br><span class="line">href:http://1ooalhost:80l1l8/study/test.html</span><br><span class="line">host adress:1ocalhost:8088</span><br><span class="line">port:8088</span><br><span class="line">protoco1 : http:</span><br><span class="line">availHeight:920</span><br><span class="line">availWidth:1280</span><br><span class="line">colorDepth:24</span><br><span class="line">appCodeName:Mozilla</span><br><span class="line">appName:Netscape</span><br><span class="line">appVersion:5.0  (Windows NT 6.1;  WOW64) AppleWebKit/537.36  (KHTML,like Gecko) Chrome/33.0.1750.117 Safari/537.36 </span><br><span class="line">platform:Win32               </span><br><span class="line">userAgent:Mozilla/5.0   (Windows NT 6.1;WOW64) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/33.0.1750.117 Safari/537.36 </span><br><span class="line">cookieEnabled:true</span><br></pre></td></tr></table></figure><blockquote><h5 id="screen对象常用属性如下"><a href="#screen对象常用属性如下" class="headerlink" title="screen对象常用属性如下"></a>screen对象常用属性如下</h5></blockquote><table><thead><tr><th align="center">availHeight</th><th align="left">窗口可以使用的屏幕高度, 单位像素</th></tr></thead><tbody><tr><td align="center">availwidth</td><td align="left">窗口可以使用的屏幕宽度,单位像素</td></tr><tr><td align="center">colorDepth</td><td align="left">用户浏览器表示的颜色位数,通常为32位(每像素的位数)</td></tr></tbody></table><blockquote><h5 id="navigator对象常用属性如下"><a href="#navigator对象常用属性如下" class="headerlink" title="navigator对象常用属性如下"></a>navigator对象常用属性如下</h5></blockquote><table><thead><tr><th align="center">appcodeName</th><th align="left">浏览器代码名的字符串表示</th></tr></thead><tbody><tr><td align="center">appName</td><td align="left">官方浏览器名的字符串表示</td></tr><tr><td align="center">appVersion</td><td align="left">浏览器版本信息的字符串表示</td></tr><tr><td align="center">platform</td><td align="left">浏览器所在计算机平台的字符串表示</td></tr><tr><td align="center">userAgent</td><td align="left">用户代理头的字符串表示</td></tr><tr><td align="center">cookieEnabled</td><td align="left">如果启用cookie返回true, 否则返回false</td></tr></tbody></table><blockquote><h5 id="history对象常用方法如下"><a href="#history对象常用方法如下" class="headerlink" title="history对象常用方法如下"></a>history对象常用方法如下</h5></blockquote><table><thead><tr><th align="center">back()</th><th align="left">后退到上一个浏览的页面,如果该页面是第一个打开的,则无效果</th></tr></thead><tbody><tr><td align="center">forward()</td><td align="left">前进到下一个;刘览页面,如果该页面是第一个打开的,则无效果</td></tr><tr><td align="center">go(IntValue)</td><td align="left">该方法可指定前进或后退多少个页面,正前进,负后退</td></tr></tbody></table><blockquote><h5 id="window对象的常用方法"><a href="#window对象的常用方法" class="headerlink" title="window对象的常用方法"></a>window对象的常用方法</h5></blockquote><table><thead><tr><th align="center">alert(), confirm(),prompt()</th><th align="left">分别用于弹出警告窗口、 确认对话框和提示输入对话框</th></tr></thead><tbody><tr><td align="center">close()</td><td align="left">关闭窗口</td></tr><tr><td align="center">moveBy()、 moveTo()</td><td align="left">移动窗口</td></tr><tr><td align="center">resizeBy()、 resizeTo()</td><td align="left">重设窗口大小</td></tr><tr><td align="center">scrollBy()、 scrollTo()</td><td align="left">滚动当前窗口的HTML文档</td></tr><tr><td align="center">open()</td><td align="left">打开一个新的浏览器窗口加载新的uRL所指向的地址, 并可指定一系列新的属性, 包括隐藏菜单等</td></tr><tr><td align="center">setIntervaI(),clearInteral()</td><td align="left">设置、删除定时器</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件</title>
      <link href="/2019/09/07/js3/"/>
      <url>/2019/09/07/js3/</url>
      
        <content type="html"><![CDATA[<h4 id="事件的概念"><a href="#事件的概念" class="headerlink" title="事件的概念"></a>事件的概念</h4><p><strong>JavaScript使我们有能力创建动态页面, 网页中的每个元素都可以产生某些可以触发 JavaScript函数的事件。我们可以认为事件是可以被 JavaScript侦测到的一种行为。</strong></p><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>事件流主要分冒泡型事件 ,和捕获型事件 。 lE浏览器目前只支持冒泡型事件,火狐、 chrome等两者都支持。</p><a id="more"></a><p><img src="/2019/09/07/js3/s2.png" alt></p><ul><li><h5 id="冒泡型事件"><a href="#冒泡型事件" class="headerlink" title="冒泡型事件"></a><strong>冒泡型事件</strong></h5></li></ul><p><img src="/2019/09/07/js3/s9.png" alt><strong>结果:  p  div body p div ….</strong></p><ul><li><h5 id="捕获型事件"><a href="#捕获型事件" class="headerlink" title="捕获型事件"></a><strong>捕获型事件</strong></h5></li></ul><p><img src="/2019/09/07/js3/s10.png" alt><strong>结果: body   div   p  body  div    p ….</strong></p><ul><li><h4 id="使用返回值改变HTML元素的默认行为"><a href="#使用返回值改变HTML元素的默认行为" class="headerlink" title="使用返回值改变HTML元素的默认行为"></a>使用返回值改变HTML元素的默认行为</h4></li></ul><p>HTML元素大都包含了自己的默认行为,例如：超链接、提交按钮等。 我们可以通过在绑定事件中加<code>return false</code>来阻止它的默认行为。</p><blockquote><h5 id="通用性的事件监听方法"><a href="#通用性的事件监听方法" class="headerlink" title="通用性的事件监听方法"></a>通用性的事件监听方法</h5></blockquote><ul><li><p>绑定HTML元素属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot; value=&quot;clickMe&quot; onclick=&quot;check(this)&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>绑定DOM对象属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;btn1&quot;).onclick=test;</span><br></pre></td></tr></table></figure></li></ul><blockquote><h5 id="IE中的事件监听方法"><a href="#IE中的事件监听方法" class="headerlink" title="IE中的事件监听方法"></a>IE中的事件监听方法</h5></blockquote><ul><li><p>[object].attachEvent(“事件类型”,“处理函数”);//添加监听</p></li><li><p>[object].detachEvent(“事件类型”, 处理函数”); //取消监听</p></li></ul><blockquote><h5 id="标准DOM中的事件监听方法"><a href="#标准DOM中的事件监听方法" class="headerlink" title="标准DOM中的事件监听方法"></a>标准DOM中的事件监听方法</h5></blockquote><ul><li><p>[objeot]. addEventListener( “事件类型”,“处理函数”，“冒泡事件或捕获事件”);</p></li><li><p>[objeot]. removeEventListener( “事件类型”,“处理函数”，“冒泡事件或捕获事件”);</p></li></ul><blockquote><p><strong>提示: l E监听方法中的事件类型和标准DOM监听方法中的事件类型写法有点同,前者事件类型“on”开头.比如: “onclick”,”onmousemove”等。而后者不需要去掉” on”,就是” click”,” mousemove”等</strong></p></blockquote><p><strong>一般不会使用:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ie特有:</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> test1 = <span class="built_in">document</span>.getElementById(<span class="string">"test1"</span>);</span><br><span class="line">            <span class="keyword">var</span> test2 = <span class="built_in">document</span>.getElementById(<span class="string">"test2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            test1 .attachEvent(<span class="string">"onclick"</span>,show);</span><br><span class="line">                   test2.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   test1.detachEvent(<span class="string">"onclick"</span>,show);    </span><br><span class="line">                        &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标准DOM:</span></span><br><span class="line">          <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                test1.addEventListener(<span class="string">"click"</span>, show, <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//true 冒泡型事件  false 捕获型事件</span></span><br><span class="line">                test2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                test1.removeEventListener(<span class="string">"click"</span>, show, <span class="literal">true</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="访问事件对象"><a href="#访问事件对象" class="headerlink" title="访问事件对象"></a>访问事件对象</h4></blockquote><p><strong>事件对象封装了事件发生的详细信息,尤其是鼠标,键盘事件.如鼠标事件发生的位置,键盘事件的键盘键等</strong></p><blockquote><h5 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h5></blockquote><p><strong>IE中的事件对象是一个隐式可用的全局对象:event,它是window对象的一个属性.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">op.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oEvent=<span class="built_in">window</span>.event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="标准DOM中的事件对象"><a href="#标准DOM中的事件对象" class="headerlink" title="标准DOM中的事件对象"></a>标准DOM中的事件对象</h5></blockquote><p><strong>在标准DOM浏览器检测到发生了某个事件时,将自动创建一个Event对象,并隐式地将该对象作为事件处理函数的第一个参数传入.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">op.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">oEvent</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//作为参数传进来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>经验之谈:为了兼容不同的浏览器,通常采用下面的方法得到事件对象.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">op.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">oEvent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.event)&#123;</span><br><span class="line">        oEvent=<span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/09/07/js3/sj3.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;事件的目标&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            function handle(oEvent) &#123;</span></span><br><span class="line"><span class="regexp">                if(window.event) &#123;</span></span><br><span class="line"><span class="regexp">                    oEvent = window.event;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                var oTarget;</span></span><br><span class="line"><span class="regexp">                if(oEvent.srcElement) &#123;</span></span><br><span class="line"><span class="regexp">                    oTarget = oEvent.srcElement;/</span><span class="regexp">/IE</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &#125; else &#123;</span></span><br><span class="line"><span class="regexp">                    oTarget = oEvent.target;/</span><span class="regexp">/标准DOM</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                alert(oTarget.tagName); /</span><span class="regexp">/弹出IMG</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            window.onload = function() &#123;</span></span><br><span class="line"><span class="regexp">                var oImg = document.getElementsByTagName("img")[0];</span></span><br><span class="line"><span class="regexp">                oImg.onclick = handle;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp">        &lt;img src="img/</span>HBuilder.png<span class="string">" border="</span><span class="number">0</span><span class="string">" /&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常见的事件类型"><a href="#常见的事件类型" class="headerlink" title="常见的事件类型"></a><strong>常见的事件类型</strong></h4><blockquote><h5 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h5></blockquote><table><thead><tr><th align="left">onclick</th><th align="left">单击鼠标左键触发</th></tr></thead><tbody><tr><td align="left">ondclick</td><td align="left">双击鼠标左键触发</td></tr><tr><td align="left">onmousedown</td><td align="left">单击任意一个鼠标按键时触发</td></tr><tr><td align="left">onmousemove</td><td align="left">鼠标在某个元素上移动时持续触发</td></tr><tr><td align="left">onmouseout</td><td align="left">鼠标指针移出一个元素边界时触发</td></tr><tr><td align="left">onmouseup</td><td align="left">松开鼠标任意一个按键时触发</td></tr><tr><td align="left">onmouseover</td><td align="left">鼠标指针移到一个元素上时触发</td></tr></tbody></table><blockquote><h5 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h5></blockquote><table><thead><tr><th align="left">onkeydown</th><th align="left">按下键盘上某个按键时触发,一直按会持续触发</th></tr></thead><tbody><tr><td align="left">onkeyup</td><td align="left">释放某个按键时触发</td></tr><tr><td align="left">onkeypress</td><td align="left">按下某个按键并产生字符时触发, 忽略shift等功能键</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;鼠标事件&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            function handle(oEvent) &#123;</span></span><br><span class="line"><span class="regexp">                if(window.event) &#123;</span></span><br><span class="line"><span class="regexp">                    oEvent = window.event; /</span><span class="regexp">/处理兼容性，获得事件对象</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                var oDiv = document.getElementById("display"); </span></span><br><span class="line"><span class="regexp">                oDiv.innerHTML += oEvent.type + "&lt;br/</span>&gt;<span class="string">";//输出事件名称</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            window.onload = function() &#123;</span></span><br><span class="line"><span class="string">                var oImg = document.getElementsByTagName("</span>img<span class="string">")[0];</span></span><br><span class="line"><span class="string">                oImg.onmousedown = handle;</span></span><br><span class="line"><span class="string">                oImg.onmouseup = handle;</span></span><br><span class="line"><span class="string">                oImg.onmouseover = handle;</span></span><br><span class="line"><span class="string">                oImg.onmouseout = handle;</span></span><br><span class="line"><span class="string">                oImg.onclick = handle;</span></span><br><span class="line"><span class="string">                oImg.ondblclick = handle;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;img src="</span>img/HBuilder.png<span class="string">" border="</span><span class="number">0</span><span class="string">" /&gt;</span></span><br><span class="line"><span class="string">        &lt;div id="</span>display<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;键盘事件&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">        &lt;script&gt;</span></span><br><span class="line"><span class="regexp">            function handle(oEvent) &#123;</span></span><br><span class="line"><span class="regexp">                if(window.event) &#123;</span></span><br><span class="line"><span class="regexp">                    oEvent = window.event; /</span><span class="regexp">/处理兼容性，获得事件对象</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                var oDiv = document.getElementById("display");</span></span><br><span class="line"><span class="regexp">                oDiv.innerHTML += oEvent.type + "&lt;br/</span>&gt;<span class="string">"; //输出事件名称</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            window.onload = function() &#123;</span></span><br><span class="line"><span class="string">                var txt = document.getElementsByTagName("</span>textarea<span class="string">")[0];</span></span><br><span class="line"><span class="string">                txt.onkeydown = handle;</span></span><br><span class="line"><span class="string">                txt.onkeyup = handle;</span></span><br><span class="line"><span class="string">                txt.onkeypress = handle;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;textarea rows="</span><span class="number">4</span><span class="string">" cols="</span><span class="number">50</span><span class="string">"&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="string">        &lt;div id="</span>display<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="HTML事件"><a href="#HTML事件" class="headerlink" title="HTML事件"></a><strong>HTML事件</strong></h5></blockquote><p><img src="/2019/09/07/js3/sj2.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=<span class="string">"alert('hello')"</span> onunload=<span class="string">"alert('byebye')"</span>&gt;</span><br><span class="line">        &lt;form action=<span class="string">"https://www.baidu.com"</span> onsubmit=<span class="string">"return false"</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> value=<span class="string">"a"</span> onfocus=<span class="string">"alert('获取焦点')"</span> onblur=<span class="string">"alert('失去焦点')"</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> value=<span class="string">"b"</span> onchange=<span class="string">"alert('内容改变了')"</span> onselect=<span class="string">"alert('内容选中了')"</span> /&gt;</span><br><span class="line">            &lt;select name=<span class="string">"city"</span> onchange=<span class="string">"alert('选项改变了')"</span>&gt;</span><br><span class="line">                &lt;option&gt;上海&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                &lt;option&gt;北京&lt;/</span>option&gt;</span><br><span class="line">            &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">            &lt;br/</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onclick事件传变量时注意的问题</title>
      <link href="/2019/09/07/js2/"/>
      <url>/2019/09/07/js2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tuohuang0303/article/details/55841119" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li><strong>onclick事件传变量时</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setname=<span class="string">"start"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;img src="images/control_start_blue.png" style="cursor:hand"</span></span><br><span class="line"><span class="string"> width="15px" height="15px" onclick="sendMsg(\''</span>+setname+<span class="string">'\');" &gt;'</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面这个注意&#39;‘这个是一个\和两个’单引号，而不是一个”双引号，刚开始老看不明白，是因为两个’放一起看起来像”双引号了。</p><p><a href="https://blog.csdn.net/legend11/article/details/53408459" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li><strong>onclick事件中传递对象参数</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">'zs'</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ele = <span class="string">'&lt;a onclick="edit('</span> + <span class="built_in">JSON</span>.stringify(user).replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>) + <span class="string">');"&gt;修改&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ele = <span class="string">'&lt;a onclick="edit(\''</span> + <span class="built_in">JSON</span>.stringify(user).replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>) + <span class="string">'\');"&gt;修改&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure><p>前者取到的是json对象，后者取到的是json字符串。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js正则验证特殊字符</title>
      <link href="/2019/09/07/js1/"/>
      <url>/2019/09/07/js1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/rentian1/article/details/79784662" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regEn = <span class="regexp">/[`~!@#$%^&amp;*()_+&lt;&gt;?:"&#123;&#125;,.\/;'[\]]/im</span>,</span><br><span class="line">    regCn = <span class="regexp">/[·！#￥（——）：；“”‘、，|《。》？、【】[\]]/im</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(regEn.test(newName) || regCn.test(newName)) &#123;</span><br><span class="line">    alert(<span class="string">"名称不能包含特殊字符."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">val</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[`~!@#$^&amp;*()=|&#123;&#125;':;',\\[\\].&lt;&gt;/?~！@#￥……&amp;*（）——|&#123;&#125;【】‘；：”“'。，、？]"</span>); </span><br><span class="line">    <span class="keyword">var</span> rs = <span class="string">""</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = val.length; i &lt; val.length; i++) &#123; </span><br><span class="line">        rs = rs + val.substr(i, <span class="number">1</span>).replace(reg, <span class="string">''</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> rs; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊日期格式转换</title>
      <link href="/2019/09/06/jquery7/"/>
      <url>/2019/09/06/jquery7/</url>
      
        <content type="html"><![CDATA[<p> <strong>特殊日期格式转换2018-12-03T17:17:36.000+08:00 转化为2018-12-03 00:00:00</strong></p><p><strong>(正则表达式的方法)</strong></p><p><a href="https://blog.csdn.net/u012967454/article/details/84789206" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// str=2018-12-03T17:17:36.000+08:00 转化为2018-12-03 00:00:00</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toDate</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> dateee = <span class="keyword">new</span> <span class="built_in">Date</span>(str).toJSON();</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span>(dateee)+<span class="number">8</span>*<span class="number">3600</span>*<span class="number">1000</span>).toISOString().replace(<span class="regexp">/T/g</span>,<span class="string">' '</span>).replace(<span class="regexp">/\.[\d]&#123;3&#125;Z/</span>,<span class="string">''</span>)  </span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"时间2==="</span>+date);</span><br><span class="line">   <span class="keyword">return</span> date ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQUERY </tag>
            
            <tag> DATE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery判断复选框是否被选中</title>
      <link href="/2019/09/06/jquery6/"/>
      <url>/2019/09/06/jquery6/</url>
      
        <content type="html"><![CDATA[<h4 id="jQuery判断复选框是否被选中"><a href="#jQuery判断复选框是否被选中" class="headerlink" title="jQuery判断复选框是否被选中"></a>jQuery判断复选框是否被选中</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">"#checkbox-id"</span>).get(<span class="number">0</span>).checked) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">'#checkbox-id'</span>).is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法三：</span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">'#checkbox-id'</span>).attr(<span class="string">'checked'</span>)) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在jQuery1<span class="number">.6</span>版本之后，取复选框有没有被选中，要用prop</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">'#checkbox-id'</span>).prop(<span class="string">'checked'</span>))</span><br><span class="line">&#123;</span><br><span class="line">　　<span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="tr变色"><a href="#tr变色" class="headerlink" title="tr变色"></a>tr变色</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//input 单击事件</span></span><br><span class="line">    $(<span class="string">"input"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取checkbox选中项</span></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'checked'</span>)) &#123;</span><br><span class="line">            $(<span class="keyword">this</span>).parent().parent().css(<span class="string">"background"</span>, <span class="string">"#d4efff"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="keyword">this</span>).parent().parent().css(<span class="string">"background"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>$(this).parent()–&gt;找到当前行td –&gt;$(this).parent().parent() –&gt;找到当前行td的父亲tr</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQUERY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Select的文本,值获取/设置/删除/清空</title>
      <link href="/2019/09/06/jquery5/"/>
      <url>/2019/09/06/jquery5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zonglonglong/p/6274971.html" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li><h4 id="获取select"><a href="#获取select" class="headerlink" title="获取select"></a>获取select</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取select 选中的 text :</span></span><br><span class="line">    $(<span class="string">"#ddlregtype"</span>).find(<span class="string">"option:selected"</span>).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取select选中的 value:</span></span><br><span class="line">    $(<span class="string">"#ddlregtype"</span>).val();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取select选中的索引:</span></span><br><span class="line">    $(<span class="string">"#ddlregtype"</span>).get(<span class="number">0</span>).selectedindex;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><h4 id="设置select"><a href="#设置select" class="headerlink" title="设置select"></a>设置select</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置select选中的索引：</span></span><br><span class="line">    $(<span class="string">"#ddlregtype"</span>).get(<span class="number">0</span>).selectedindex=index;<span class="comment">//index为索引值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置select 选中的value：</span></span><br><span class="line">    $(<span class="string">"#ddlregtype"</span>).attr(<span class="string">"value"</span>,<span class="string">"normal“);</span></span><br><span class="line">    $("#ddlregtype").val("normal");</span><br><span class="line">    $(<span class="string">"#ddlregtype"</span>).get(<span class="number">0</span>).value = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置select 选中的text:</span></span><br><span class="line">    <span class="keyword">var</span> count=$(<span class="string">"#ddlregtype option"</span>).length;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">         &#123;   <span class="keyword">if</span>($(<span class="string">"#ddlregtype"</span>).get(<span class="number">0</span>).options[i].text == text)</span><br><span class="line">            &#123;</span><br><span class="line">                $(<span class="string">"#ddlregtype"</span>).get(<span class="number">0</span>).options[i].selected = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    $(<span class="string">"#select_id option[text='jquery']"</span>).attr(<span class="string">"selected"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置select option项:</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#select_id"</span>).append(<span class="string">"&lt;option value='value'&gt;text&lt;/option&gt;"</span>);  <span class="comment">//添加一项option</span></span><br><span class="line">    $(<span class="string">"#select_id"</span>).prepend(<span class="string">"&lt;option value='0'&gt;请选择&lt;/option&gt;"</span>); <span class="comment">//在前面插入一项option</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="select删除-清空"><a href="#select删除-清空" class="headerlink" title="select删除/清空"></a>select删除/清空</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#select_id option:last"</span>).remove(); <span class="comment">//删除索引值最大的option</span></span><br><span class="line">$(<span class="string">"#select_id option[index='0']"</span>).remove();<span class="comment">//删除索引值为0的option</span></span><br><span class="line">$(<span class="string">"#select_id option[value='3']"</span>).remove(); <span class="comment">//删除值为3的option</span></span><br><span class="line">$(<span class="string">"#select_id option[text='4']"</span>).remove(); <span class="comment">//删除text值为4的option</span></span><br><span class="line">$(<span class="string">"#ddlregtype"</span>).empty();<span class="comment">//清空</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQUERY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何改变html标签的样式(两种实现方法)</title>
      <link href="/2019/09/06/jquery4/"/>
      <url>/2019/09/06/jquery4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/liutianjie/article/details/84070816" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><blockquote><h5 id="通过修改标签属性来改变它的样式"><a href="#通过修改标签属性来改变它的样式" class="headerlink" title="通过修改标签属性来改变它的样式"></a><strong>通过修改标签属性来改变它的样式</strong></h5></blockquote><ul><li>js设置和获取标签的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="keyword">var</span> attr = <span class="built_in">document</span>.getElementById(<span class="string">"attr"</span>); </span><br><span class="line">attr.setAttribute(<span class="string">"style"</span>, <span class="string">"font-weight:bold;"</span>) </span><br><span class="line"> alert(attr.getAttribute(<span class="string">"style"</span>)); </span><br><span class="line">&#125; </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>jquery设置和获取标签的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery/jquery-1.4.2.min.js"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt; </span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">$(<span class="string">"#attr"</span>).attr(<span class="string">"style"</span>, <span class="string">"color:#ff0000"</span>);<span class="comment">//单个属性的设置 </span></span><br><span class="line">$(<span class="string">"#Avatar"</span>).attr(&#123; <span class="string">"class"</span>: <span class="string">"banner"</span>, <span class="string">"alt"</span>: <span class="string">"头像"</span>, </span><br><span class="line"><span class="string">"src"</span>: <span class="string">"http://pic.cnblogs.com/avatar/a118538.jpg?id=11133319"</span> &#125;);<span class="comment">//多个属性的设置 </span></span><br><span class="line">alert($(<span class="string">"#Avatar"</span>).attr(<span class="string">"src"</span>)); <span class="comment">//得到指定标签的属性 </span></span><br><span class="line">&#125;); </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>值得注意的是JS的window.onload方法块的内容是在JQ的$(function(){})方法块执行完成后，再执行的。</strong></p><blockquote><h5 id="通过修改标签的css样式来改变它的样式"><a href="#通过修改标签的css样式来改变它的样式" class="headerlink" title="通过修改标签的css样式来改变它的样式"></a><strong>通过修改标签的css样式来改变它的样式</strong></h5></blockquote><ul><li>看看基本的语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#attr"</span>).addClass(<span class="string">"banner"</span>);<span class="comment">//添加样式 </span></span><br><span class="line">$(<span class="string">"#attr"</span>).removeClass(<span class="string">"banner"</span>);<span class="comment">//移除样式 </span></span><br><span class="line"><span class="comment">//ＪＱ支持连带写法，因为removeClass的返回结果也是一个Jq对象，所以Jq对象的所有方法和事件它都可以使用 </span></span><br><span class="line">$(<span class="string">"#attr"</span>).removeClass(<span class="string">"banner"</span>).addClass(<span class="string">"bannerOver"</span>);</span><br></pre></td></tr></table></figure><ul><li>下面是一个例子，当在dd标签上单击时，将当前dd块进行高亮显示 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt; </span><br><span class="line">.banner &#123; background: #0094ff; &#125; </span><br><span class="line">.bannerOver &#123; background: #808080; &#125; </span><br><span class="line">.cur &#123; background: #ff6a00; &#125; </span><br><span class="line">&lt;<span class="regexp">/style&gt; </span></span><br><span class="line"><span class="regexp">&lt;script&gt; </span></span><br><span class="line"><span class="regexp">$(function () &#123; </span></span><br><span class="line"><span class="regexp">$('#menu_title').find('dd').click(function () &#123; </span></span><br><span class="line"><span class="regexp">$('#menu_title').find('dd').removeClass('cur'); </span></span><br><span class="line"><span class="regexp">$(this).addClass('cur'); </span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">&#125;); </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt; </span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;dl id=<span class="string">"menu_title"</span>&gt; </span><br><span class="line">&lt;dt&gt;人&lt;<span class="regexp">/dt&gt; </span></span><br><span class="line"><span class="regexp">&lt;dd&gt;一种高级动物&lt;/</span>dd&gt; </span><br><span class="line">&lt;dt&gt;狗&lt;<span class="regexp">/dt&gt; </span></span><br><span class="line"><span class="regexp">&lt;dd&gt;人类的朋友&lt;/</span>dd&gt; </span><br><span class="line">&lt;dt&gt;猫&lt;<span class="regexp">/dt&gt; </span></span><br><span class="line"><span class="regexp">&lt;dd&gt;猫科动物的祖先&lt;/</span>dd&gt; </span><br><span class="line">&lt;<span class="regexp">/dl&gt; </span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>下面是为表格的隔行变色效果</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.odd &#123; background: #808080; &#125; </span><br><span class="line">.even &#123; background: #ffd800; &#125; </span><br><span class="line">.selected &#123; background: #0094ff; color: #fff; &#125;　　　　 </span><br><span class="line">.hover &#123; background: #808080; &#125; </span><br><span class="line"> <span class="comment">//选择所有行 </span></span><br><span class="line"><span class="keyword">var</span> $trs = $(<span class="string">"#menu_title&gt;dd"</span>); </span><br><span class="line"><span class="comment">//给奇数行添加odd样式 </span></span><br><span class="line">$trs.filter(<span class="string">":odd"</span>).addClass(<span class="string">"odd"</span>);</span><br><span class="line"><span class="comment">//给偶数行添加odd样式 </span></span><br><span class="line">$trs.filter(<span class="string">":even"</span>).addClass(<span class="string">"even"</span>);</span><br></pre></td></tr></table></figure><ul><li>单击行后，让当前行高亮显示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击行,添加变色样式 </span></span><br><span class="line">$trs.click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">"selected"</span>).siblings().removeClass(<span class="string">"selected"</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>添加鼠标移入与移出事件 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标移入 与移出 </span></span><br><span class="line">$(<span class="string">"#menu_title&gt;dd"</span>).hover( </span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">"hover"</span>); </span><br><span class="line">&#125;, </span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">$(<span class="keyword">this</span>).removeClass(<span class="string">"hover"</span>); </span><br><span class="line">&#125; </span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JQUERY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery禁用、启用button以及button的样式操作</title>
      <link href="/2019/09/06/jquery3/"/>
      <url>/2019/09/06/jquery3/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://blog.csdn.net/qq_38455201/article/details/80591530" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><blockquote><h4 id="禁止使用button"><a href="#禁止使用button" class="headerlink" title="禁止使用button"></a><strong>禁止使用button</strong></h4></blockquote><p><strong>1.直接写在&lt;button&gt;标签里面</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span>设置按钮不可以点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.js禁用button</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).disabled=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>3.使用jquery禁用button</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</span><br><span class="line">$(<span class="string">"#btn"</span>).attr(<span class="string">'disabled'</span>,<span class="string">'disabled'</span>);</span><br><span class="line">$(<span class="string">"#btn"</span>).prop(<span class="string">'disabled'</span>,<span class="string">'disabled'</span>);</span><br></pre></td></tr></table></figure><blockquote><h4 id="设置禁用之后启用button"><a href="#设置禁用之后启用button" class="headerlink" title="设置禁用之后启用button"></a>设置禁用之后启用button</h4></blockquote><p><strong>1.使用js启用button</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).disabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p><strong>2.jquery启用button</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).attr(<span class="string">'disabled'</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#btn"</span>).removeAttr(<span class="string">"disabled"</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#btn"</span>).attr(<span class="string">'disabled'</span>,<span class="string">''</span>);</span><br></pre></td></tr></table></figure><blockquote><h4 id="button的显示与隐藏"><a href="#button的显示与隐藏" class="headerlink" title="button的显示与隐藏"></a>button的显示与隐藏</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jq:</span></span><br><span class="line">$(<span class="string">"#btn"</span>).show();</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#btn"</span>).hide();</span><br></pre></td></tr></table></figure><blockquote><h4 id="给button设置css样式"><a href="#给button设置css样式" class="headerlink" title="给button设置css样式"></a>给button设置css样式</h4></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">background-color: #1AAD19;//设置背景颜色</span><br><span class="line"></span><br><span class="line">color: #FFFFFF;//设置按钮上面的字体颜色</span><br><span class="line"></span><br><span class="line">border: 1px solid #1AAD19;//设置边框的颜色</span><br><span class="line"></span><br><span class="line">cursor: pointer;//设置鼠标移动到button的样式</span><br><span class="line"></span><br><span class="line">border-radius: 3px;//设置倒角的大小，这个属性可以使得四个角有一定的角度更美观一点</span><br><span class="line"></span><br><span class="line">width: 100px;//设置按钮的宽度</span><br><span class="line"></span><br><span class="line">height: 36px;//设置按钮的高度</span><br><span class="line"></span><br><span class="line">border:none;//去掉边框</span><br><span class="line"></span><br><span class="line">background:url("static/images/reponse_add.png") no-repeat;//设置背景图片</span><br></pre></td></tr></table></figure><blockquote><h4 id="设置button的click事件"><a href="#设置button的click事件" class="headerlink" title="设置button的click事件"></a>设置button的click事件</h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//do something</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="jquery改变button的样式"><a href="#jquery改变button的样式" class="headerlink" title="jquery改变button的样式"></a>jquery改变button的样式</h4></blockquote><p><strong>1.直接css()方法进行修改样式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);<span class="comment">//改一种</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"#btn"</span>).css(&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"color"</span>:<span class="string">"white"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"background-color"</span>:<span class="string">"#98bf21"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"font-family"</span>:<span class="string">"Arial"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"font-size"</span>:<span class="string">"20px"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"padding"</span>:<span class="string">"5px"</span></span><br><span class="line"></span><br><span class="line">&#125;);<span class="comment">//改多种，注意里面加大括号</span></span><br></pre></td></tr></table></figure><p><strong>2.首先定义一个class的样式，然后动态的添加样式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btnStyle</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#E4E8EB</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>点击改成上面这个样式、点击移除上面这个样式。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">       $(<span class="keyword">this</span>).addClass(<span class="string">"btnStyle"</span>);  </span><br><span class="line"> &#125;) </span><br><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">       $(<span class="keyword">this</span>).removeClass(<span class="string">"btnStyle"</span>);  </span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQUERY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据指定的时间来跟当前时间比较计算倒计时</title>
      <link href="/2019/09/06/jquery1/"/>
      <url>/2019/09/06/jquery1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/cyl168/p/5091495.html" target="_blank" rel="noopener">原文链接</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定的时间 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"timeCount"</span> data-enddate=<span class="string">'&lt;fmt:formatDate value="$&#123;dateTime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;'</span>&gt;</span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- jquery --&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//初始化倒计时间</span></span><br><span class="line"><span class="string">$(function()&#123;</span></span><br><span class="line"><span class="string">$("</span>.menu li<span class="string">").each(function()&#123;</span></span><br><span class="line">if($(this).attr("class") == "checked")&#123;</span><br><span class="line">setInterval(GetRTime,<span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetRTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> EndTime= <span class="keyword">new</span> <span class="built_in">Date</span>($(<span class="string">".timeCount"</span>).attr(<span class="string">"data-enddate"</span>));<span class="comment">//new Date('2015/12/31 10:00:00'); //截止时间 前端路上 http://www.51xuediannao.com/qd63/</span></span><br><span class="line"><span class="keyword">var</span> NowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间</span></span><br><span class="line"><span class="keyword">var</span> t =EndTime.getTime() - NowTime.getTime();</span><br><span class="line"><span class="comment">//var d=Math.floor(t/1000/60/60/24);//天</span></span><br><span class="line"><span class="keyword">var</span> h=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>%<span class="number">24</span>);<span class="comment">//时</span></span><br><span class="line"><span class="keyword">var</span> m=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">60</span>%<span class="number">60</span>);<span class="comment">//分</span></span><br><span class="line"><span class="keyword">var</span> s=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>%<span class="number">60</span>);<span class="comment">//秒</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(h)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">h=<span class="string">"0"</span>+h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(m)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">m=<span class="string">"0"</span>+m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">parseInt</span>(s)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">s=<span class="string">"0"</span>+s;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">".timeCount"</span>).text(h + <span class="string">":"</span>+m + <span class="string">":"</span>+s );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JQUERY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQUERY </tag>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input file控件限制上传文件类型</title>
      <link href="/2019/09/06/html6/"/>
      <url>/2019/09/06/html6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/haocool/p/3431181.html" target="_blank" rel="noopener">原文链接</a></p><ul><li>网页上添加一个input file HTML控件：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"File1"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">默认是这样的，所有文件类型都会显示出来，如果想限制它只显示我们设定的文件类型呢，比如“word“,”excel“,”pdf“文件</th></tr></thead></table><p><img src="/2019/09/06/html6/5.jpg" alt></p><ul><li>解决办法是可以给它添加一个accept属性，比如：</li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"File1"</span> <span class="attr">type</span>=<span class="string">"file"</span>  <span class="attr">accept</span>=<span class="string">".xls,.doc,.txt,.pdf"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>这样选择的时候默认会显示为这样：</p><p><img src="/2019/09/06/html6/2.jpg" alt></p><p>文件选择框内只显示出你自定义文件类型的文件，也还比较方便。But,这只是最简单的掩人耳目的做法，还是能选择其它文件类型：</p><p><img src="/2019/09/06/html6/3.jpg" alt></p><p><strong>所以，如果要做到真正意义上限制类型做法（其实这种算不上限制，只是把你要的文件类型默认显示出来而已，并不是说不能选择其它的）,还是要通过js或者后台来控制。</strong></p><ul><li>支持的文件类型:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">*.3gpp  audio/3gpp， video/3gpp  3GPP Audio/Video</span><br><span class="line">*.ac3   audio/ac3   AC3 Audio</span><br><span class="line">*.asf   allpication/vnd.ms-asf  Advanced Streaming Format</span><br><span class="line">*.au    audio/basic AU Audio</span><br><span class="line">*.css   text/css    Cascading Style Sheets</span><br><span class="line">*.csv   text/csv    Comma Separated Values</span><br><span class="line">*.doc   application/msword  MS Word Document</span><br><span class="line">*.dot   application/msword  MS Word Template</span><br><span class="line">*.dtd   application/xml-dtd Document Type Definition</span><br><span class="line">*.dwg   image/vnd.dwg   AutoCAD Drawing Database</span><br><span class="line">*.dxf   image/vnd.dxf   AutoCAD Drawing Interchange Format</span><br><span class="line">*.gif   image/gif   Graphic Interchange Format</span><br><span class="line">*.htm   text/html   HyperText Markup Language</span><br><span class="line">*.html  text/html   HyperText Markup Language</span><br><span class="line">*.jp2   image/jp2   JPEG-2000</span><br><span class="line">*.jpe   image/jpeg  JPEG</span><br><span class="line">*.jpeg  image/jpeg  JPEG</span><br><span class="line">*.jpg   image/jpeg  JPEG</span><br><span class="line">*.js    text/javascript， application/javascript JavaScript</span><br><span class="line">*.json  application/json    JavaScript Object Notation</span><br><span class="line">*.mp2   audio/mpeg， video/mpeg  MPEG Audio/Video Stream， Layer II</span><br><span class="line">*.mp3   audio/mpeg  MPEG Audio Stream， Layer III</span><br><span class="line">*.mp4   audio/mp4， video/mp4    MPEG-4 Audio/Video</span><br><span class="line">*.mpeg  video/mpeg  MPEG Video Stream， Layer II</span><br><span class="line">*.mpg   video/mpeg  MPEG Video Stream， Layer II</span><br><span class="line">*.mpp   application/vnd.ms-project  MS Project Project</span><br><span class="line">*.ogg   application/ogg， audio/ogg  Ogg Vorbis</span><br><span class="line">*.pdf   application/pdf Portable Document Format</span><br><span class="line">*.png   image/png   Portable Network Graphics</span><br><span class="line">*.pot   application/vnd.ms-powerpoint   MS PowerPoint Template</span><br><span class="line">*.pps   application/vnd.ms-powerpoint   MS PowerPoint Slideshow</span><br><span class="line">*.ppt   application/vnd.ms-powerpoint   MS PowerPoint Presentation</span><br><span class="line">*.rtf   application/rtf， text/rtf   Rich Text Format</span><br><span class="line">*.svf   image/vnd.svf   Simple Vector Format</span><br><span class="line">*.tif   image/tiff  Tagged Image Format File</span><br><span class="line">*.tiff  image/tiff  Tagged Image Format File</span><br><span class="line">*.txt   text/plain  Plain Text</span><br><span class="line">*.wdb   application/vnd.ms-works    MS Works Database</span><br><span class="line">*.wps   application/vnd.ms-works    Works Text Document</span><br><span class="line">*.xhtml application/xhtml+xml   Extensible HyperText Markup Language</span><br><span class="line">*.xlc   application/vnd.ms-excel    MS Excel Chart</span><br><span class="line">*.xlm   application/vnd.ms-excel    MS Excel Macro</span><br><span class="line">*.xls   application/vnd.ms-excel    MS Excel Spreadsheet</span><br><span class="line">*.xlt   application/vnd.ms-excel    MS Excel Template</span><br><span class="line">*.xlw   application/vnd.ms-excel    MS Excel Workspace</span><br><span class="line">*.xml   text/xml， application/xml   Extensible Markup Language</span><br><span class="line">*.zip   aplication/zip  Compressed Archive</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页title左边显示网页的logo图标</title>
      <link href="/2019/09/06/html5/"/>
      <url>/2019/09/06/html5/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://segmentfault.com/a/1190000007952589" target="_blank" rel="noopener"><strong>原文链接</strong></a></p></li><li><p><strong>步骤一</strong>:在图片中显示图标，这里的图片只支持ico格式，需要转换图片格式.原始图像可以接受: .jpg .jpeg .gif .png等图像格式 在这个<a href="http://www.bitbug.net/" target="_blank" rel="noopener"><strong>网址</strong></a>上传你的原始图片然后生成ico格式图标(百度ico可以找到制作ico图标的网站) <strong>注意：图标要用 16*16 的(保证了兼容性,无论在哪个地方都可以显示)</strong></p></li><li><p><strong>步骤二：把图标放到网站根目录</strong> 在&lt;head&gt;&lt;/head&gt;引入图标,网页标题左侧显示：</p><p><code>&lt;link rel=&quot;icon&quot; href=&quot;图标地址&quot; type=&quot;image/x-icon&quot;/&gt;</code></p><p>收藏夹显示图标:</p><p><code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;图标地址&quot; type=&quot;image/x-icon&quot;&gt;</code></p></li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个有梦想咸鸭蛋<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--网页标题左侧显示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"1111.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--收藏夹显示图标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"1111.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>建议把生成的图标名称改掉,在引用;如生成后是bitbug_favicon.ico改为你起的名字.ico.如果没有生效-关闭浏览器重新打开</strong></p><p><img src="/2019/09/06/html5/hq2.png" alt></p><ul><li><strong>怎么样获取别人的Logo</strong></li></ul><p>在网站首页 打开开发者工具;在Elements里&lt;head&gt;&lt;/head&gt;里找到<code>link rel=&quot;icon&quot; href=&quot;图标名称.ico&quot; type=&quot;image/x-icon&quot;&amp;gt;</code><br><img src="/2019/09/06/html5/hq3.png" alt>点击右键在新标签页打开链接(Goolge是Open link in new tab)注意要在href的链接地址右键不然没有Open link in new tab这个选项。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多媒体</title>
      <link href="/2019/09/06/html4/"/>
      <url>/2019/09/06/html4/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="什么是编解码器"><a href="#什么是编解码器" class="headerlink" title="什么是编解码器"></a>什么是编解码器</h5></blockquote><p>编码器的作用是读取特定的容器格式, 并对其中的音频与视频轨道进行解码, 然后实现播放.音频和视频原始数据比较大, 我们往往通过编码器对原始音频和视频文件进行有损压缩, 这样就便于在互联网上进行传输或播放。</p><blockquote><h5 id="常用的视频编解码器"><a href="#常用的视频编解码器" class="headerlink" title="常用的视频编解码器"></a>常用的视频编解码器</h5></blockquote><table><thead><tr><th align="center">H_246</th><th align="left">H.264是MPEG-4标准所定义的最新格式, 同时也是技术含量最高、代表最新技术水平的视频编码格式之一,有的也称(AVC) , 目前是主流。</th></tr></thead><tbody><tr><td align="center">VP8</td><td align="left">Google公司的产品 。VP8是一个免版权费用可自由使用的技术, 任何使用都不受版权限制, 使用的比较少</td></tr><tr><td align="center">Ogg Theora</td><td align="left">OggTheora是 xiph.Org第一个公开发布的视频编解码器, 在 Ogg项目和 Ogg 流媒体服务器中使用</td></tr></tbody></table><a id="more"></a><p><img src="/2019/09/06/html4/kt3.png" alt></p><blockquote><h5 id="常用的音频编解码器"><a href="#常用的音频编解码器" class="headerlink" title="常用的音频编解码器"></a>常用的音频编解码器</h5></blockquote><table><thead><tr><th align="center">AAC</th><th align="left">高级音频编码。相对于mp3, AAc格式的音质更佳,文件更小。 苹果、 诺基亚等公司的设备支持AAC格式</th></tr></thead><tbody><tr><td align="center">MP3</td><td align="left">MP3是一种音频压缩技术, 其全称是动态影像专家压缩标准音频层面3,主要是在美国和日本, 不包括欧盟国家, 如微软更倾向于使用 MP3格式</td></tr><tr><td align="center">Ogg Vorbis</td><td align="left">Ogg是指一种文件格式, 开源且免使用费, 就是为了与需要专利使用费的 M P3和AAc一争高下</td></tr></tbody></table><p><img src="/2019/09/06/html4/kt4.jpg" alt></p><p><strong>代码定义:</strong></p><h6 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a><strong>播放音频</strong></h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"kk.mp4"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"kk.mp4"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>/&gt;</span></span><br><span class="line">  您的浏览器不支持audio元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a><strong>播放视频</strong></h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"kk.mp4"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">  您的浏览器不支持audio元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="音频视频的相关属性"><a href="#音频视频的相关属性" class="headerlink" title="音频视频的相关属性"></a>音频视频的相关属性</h5></blockquote><table><thead><tr><th align="center">src</th><th align="left">用于指定媒体资源的 URL地址</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="left">该属性可以实现页面加载音频后一旦就绪即开始自动播放</td></tr><tr><td align="center">buffered</td><td align="left">用于返回一个TimeRanges对象, 确认浏览器已经缓存媒体文件</td></tr><tr><td align="center">controls</td><td align="left">可以为媒体文件提供用于播放的控制条,包含播放、暂停、定位、时间显示、音量控制、全房切换等常用控件</td></tr><tr><td align="center">currentSrc</td><td align="left">用于返回媒体数据的URL地址,如未指定地址,则返回一个空串</td></tr><tr><td align="center">ourrentTime</td><td align="left">用于获取或设置当前的播放位置,返回值为时间,单位为秒</td></tr><tr><td align="center">defaultPlaybackRate</td><td align="left">设置或返回音频/视频的默认播放速度</td></tr><tr><td align="center">loop</td><td align="left">设置或返回音频/视频是否应该在结束时重新播放</td></tr><tr><td align="center">duration</td><td align="left">用于获取当前媒体的持续时间</td></tr><tr><td align="center">muted</td><td align="left">设置或返回音频/视频是否应该被持音 (关闭声音)</td></tr><tr><td align="center">networkState</td><td align="left">返回音频/视频的当前网络状态</td></tr><tr><td align="center">paused</td><td align="left">检查视频是否己暂停</td></tr><tr><td align="center">playbackRate</td><td align="left">设置返回音频/视频的当前播放速度。</td></tr><tr><td align="center">played</td><td align="left">played属性返回 TimeRanges对象。TimeRanges 对象表示用户已经播放或看到的音频/视频范围</td></tr><tr><td align="center">preload</td><td align="left">设置或返回是否在页面加载后立即加载音频/视频</td></tr><tr><td align="center">readyState</td><td align="left">返回音频/视频的当前就绪状态</td></tr><tr><td align="center">seekable</td><td align="left">返回 TimeRanges 对象。表明可以对当前媒体资源进行请求</td></tr><tr><td align="center">volume</td><td align="left">属性设置或返回音频/视频的当前音量。必须是介于 0.0与1.0 之间的数字</td></tr><tr><td align="center">seeking</td><td align="left">返回用户目前是否正在音频/视频中请求数据</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;音频、视频相关属性&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"getFirstBuffRange()"</span> type=<span class="string">"button"</span>&gt;获得第一个缓冲范围&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="getVid()" type="button"&gt;获得当前视频URL&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"getCurTime()"</span> type=<span class="string">"button"</span>&gt;获取视频当前播放时间&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="setCurTime()" type="button"&gt;设置视频播放时间点&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"getPlaySpeed()"</span> type=<span class="string">"button"</span>&gt;获取视频默认播放速度&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="setPlaySpeed()" type="button"&gt;设置视频播放速度&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"getVidDur()"</span> type=<span class="string">"button"</span>&gt;获取视频的播放长度&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--播放视频--&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;button onclick="enableLoop()" type="button"&gt;设置循环&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"disableLoop()"</span> type=<span class="string">"button"</span>&gt;取消循环&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="checkLoop()" type="button"&gt;是否循环&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"enableMute()"</span> type=<span class="string">"button"</span>&gt;设置静音&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="disableMute()" type="button"&gt;取消静音&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"checkMute()"</span> type=<span class="string">"button"</span>&gt;是否静音&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="getNWState()" type="button"&gt;获取网络状态&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"isVidPaused()"</span> type=<span class="string">"button"</span>&gt;视频是否暂停&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="getPlaySpeed()" type="button"&gt;获取视频速度&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"setPlaySpeed()"</span> type=<span class="string">"button"</span>&gt;减慢视频速度&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="getFirstPlayedRange()" type="button"&gt;获得首段播放的范围&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"enablePreload()"</span> type=<span class="string">"button"</span>&gt;设置预加载&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="disablePreload()" type="button"&gt;取消预加载&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"checkPreload()"</span> type=<span class="string">"button"</span>&gt;检查预加载状态&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="getReadyState()" type="button"&gt;获取视频的就绪状态&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"getFirstSeekableRange()"</span> type=<span class="string">"button"</span>&gt;获得第一次可寻址范围&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="getVolume()" type="button"&gt;获取当前音量&lt;/</span>button&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"setHalfVolume()"</span> type=<span class="string">"button"</span>&gt;设置当前音量为<span class="number">0.2</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="setFullVolume()" type="button"&gt;设置当前音量为1.0&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;video controls=<span class="string">"controls"</span> id=<span class="string">"my_video"</span> width=<span class="string">"320"</span> height=<span class="string">"240"</span> autoplay=<span class="string">"autoplay"</span>&gt;</span><br><span class="line">  &lt;source id=<span class="string">"mp4_src"</span> src=<span class="string">"kk.mp4"</span> type=<span class="string">"video/mp4"</span>/&gt;</span><br><span class="line">  &lt;source id=<span class="string">"ogg_src"</span> src=<span class="string">"kk.mp4"</span> type=<span class="string">"video/ogg"</span>/&gt;</span><br><span class="line">  您的浏览器不支持video元素</span><br><span class="line">&lt;<span class="regexp">/video&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  let myVideo = document.getElementById("my_video");</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获得第一个缓冲范围</span></span><br><span class="line"><span class="regexp">  function getFirstBuffRange() &#123;</span></span><br><span class="line"><span class="regexp">    alert("Start:" + myVideo.buffered.start(0) + "End:" + myVideo.buffered.end(0));</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获得当前视频URL</span></span><br><span class="line"><span class="regexp">  function getVid() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.currentSrc);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获取视频当前播放时间</span></span><br><span class="line"><span class="regexp">  function getCurTime() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.currentTime);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 设置视频播放时间点</span></span><br><span class="line"><span class="regexp">  function setCurTime() &#123;</span></span><br><span class="line"><span class="regexp">    myVideo.currentTime = 5;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获取视频的播放长度</span></span><br><span class="line"><span class="regexp">  function getVidDur() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.duration);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/是否循环</span></span><br><span class="line"><span class="regexp">  function checkLoop() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.loop);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/设置循环</span></span><br><span class="line"><span class="regexp">  function enableLoop() &#123;</span></span><br><span class="line"><span class="regexp">    myVideo.loop = true;</span></span><br><span class="line"><span class="regexp">    myVideo.load();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/取消循环</span></span><br><span class="line"><span class="regexp">  function disableLoop() &#123;</span></span><br><span class="line"><span class="regexp">    myVideo.loop = false;</span></span><br><span class="line"><span class="regexp">    myVideo.load();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/设置静音</span></span><br><span class="line"><span class="regexp">  function enableMute() &#123;</span></span><br><span class="line"><span class="regexp">    myVideo.muted = true;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/取消静音</span></span><br><span class="line"><span class="regexp">  function disableMute() &#123;</span></span><br><span class="line"><span class="regexp">    myVideo.muted = false;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/是否静音</span></span><br><span class="line"><span class="regexp">  function checkMute() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.muted);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获取网络状态</span></span><br><span class="line"><span class="regexp">  function getNWState() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.networkState);</span></span><br><span class="line"><span class="regexp">/</span>*    表示音频/视频元素的当前网络状态：</span><br><span class="line">    <span class="number">0</span> = NETWORK_EMPTY - 音频/视频尚未初始化</span><br><span class="line">    <span class="number">1</span> = NETWORK_IDLE - 音频/视频是活动的且已选取资源，但并未使用网络</span><br><span class="line">    <span class="number">2</span> = NETWORK_LOADING - 浏览器正在下载数据</span><br><span class="line">    <span class="number">3</span> = NETWORK_NO_SOURCE - 未找到音频/视频来源 </span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/视频是否暂停</span></span><br><span class="line"><span class="regexp">  function isVidPaused() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.paused);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获取视频速度</span></span><br><span class="line"><span class="regexp">  function getPlaySpeed() &#123;</span></span><br><span class="line"><span class="regexp">    alert(myVideo.playbackRate);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/减慢视频速度</span></span><br><span class="line"><span class="regexp">  function setPlaySpeed() &#123;</span></span><br><span class="line"><span class="regexp">    myVideo.playbackRate = 0.5;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/获得视频中以秒计的首段已播放的范围</span></span><br><span class="line"><span class="regexp">  function getFirstPlayedRange() &#123;</span></span><br><span class="line"><span class="regexp">    alert("Start:" + myVideo.played.start(0) + "End:" + myVideo.played.end(0));</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/设置预加载(是否在页面加载后立即加载音频/</span>视频)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">enablePreload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myVideo.preload = <span class="string">"auto"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取消预加载</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">disablePreload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myVideo.preload = <span class="string">"none"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//检查预加载状态</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkPreload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(myVideo.preload);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取视频的就绪状态</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getReadyState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(myVideo.readyState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//TimeRanges 对象表示音频/视频中用户可寻址的范围（可拖动缓存播放的位置）</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFirstSeekableRange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Start:"</span> + myVideo.seekable.start(<span class="number">0</span>) + <span class="string">"End:"</span> + myVideo.seekable.end(<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取当前音量</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getVolume</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(myVideo.volume);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置当前音量为1.0</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setFullVolume</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myVideo.volume = <span class="number">1.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置当前音量为0.2</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setHalfVolume</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    myVideo.volume = <span class="number">0.2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="音频视频相关方法"><a href="#音频视频相关方法" class="headerlink" title="音频视频相关方法"></a>音频视频相关方法</h5></blockquote><table><thead><tr><th align="center">canPlayType()</th><th align="left">检测测览器是否能播放指定的音频/视频类型 canPlayType() 方法可返回下列值之一:“probably”  -浏览器最可能支持该音频/视频类型“maybe”     -  浏览器也许支持该音频/视频类型     “” -  (空字符串) 浏览器不支持该音频/视频类型</th></tr></thead><tbody><tr><td align="center">load()</td><td align="left">重新加载音频/视频元素. load() 方法用于在更改来源或其他设置后对音频/视频元素进了更新</td></tr><tr><td align="center">pause()</td><td align="left">停止(暂停)当前播放的音频或视频</td></tr><tr><td align="center">play()</td><td align="left">play()方法开始播放当前的音频或视频。 所有主流浏览器都支持 play() 方法</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;音频、视频相关方法&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    let myVideo = null;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/检测浏览器是否对视频资源支持</span></span><br><span class="line"><span class="regexp">    function supportType(vidType, codeType) &#123;</span></span><br><span class="line"><span class="regexp">      let myVid = document.createElement("video");</span></span><br><span class="line"><span class="regexp">      let isSupp = myVid.canPlayType(vidType + ';codecs="' + codeType + '"');</span></span><br><span class="line"><span class="regexp">      if (isSupp === "") &#123;</span></span><br><span class="line"><span class="regexp">        isSupp = "No";</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      alert(isSupp);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/切换视频资源</span></span><br><span class="line"><span class="regexp">    function changeSource() &#123;</span></span><br><span class="line"><span class="regexp">      document.getElementById("mp4_src").src = "kk1.mp4";</span></span><br><span class="line"><span class="regexp">      document.getElementById("ogg_src").src = "kk1.mp4";</span></span><br><span class="line"><span class="regexp">      document.getElementById("my_video").load();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/播放视频</span></span><br><span class="line"><span class="regexp">    function playVid() &#123;</span></span><br><span class="line"><span class="regexp">      myVideo = document.getElementById("my_video");</span></span><br><span class="line"><span class="regexp">      myVideo.play();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/暂停视频</span></span><br><span class="line"><span class="regexp">    function pauseVid() &#123;</span></span><br><span class="line"><span class="regexp">      myVideo = document.getElementById("my_video");</span></span><br><span class="line"><span class="regexp">      myVideo.pause();</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;浏览器是否支持播放MP4视频&lt;/</span>p&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"supportType('video/mp4','avc1.42E01E,mp4a.40.2')"</span> type=<span class="string">"button"</span>&gt;Test&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;浏览器是否支持播放ogg视频&lt;/</span>p&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"supportType('video/ogg','theora,vorbis')"</span> type=<span class="string">"button"</span>&gt;Test2&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="changeSource()" type="button"&gt;切换视频资源&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">"playVid()"</span> type=<span class="string">"button"</span>&gt;播放视频&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;br&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onclick="pauseVid()" type="button"&gt;暂停视频&lt;/</span>button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;video controls=<span class="string">"controls"</span> id=<span class="string">"my_video"</span> width=<span class="string">"320"</span> height=<span class="string">"240"</span>&gt;</span><br><span class="line">  &lt;source id=<span class="string">"mp4_src"</span> src=<span class="string">"kk.mp4"</span> type=<span class="string">"video/mp4"</span>/&gt;</span><br><span class="line">  &lt;source id=<span class="string">"ogg_src"</span> src=<span class="string">"kk.mp4"</span> type=<span class="string">"video/ogg"</span>/&gt;</span><br><span class="line">  您的浏览器不支持video元素</span><br><span class="line">&lt;<span class="regexp">/video&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="音频视频的相关事件"><a href="#音频视频的相关事件" class="headerlink" title="音频视频的相关事件"></a>音频视频的相关事件</h5></blockquote><table><thead><tr><th align="center">pause</th><th align="left">在音频/视频暂停时触发</th></tr></thead><tbody><tr><td align="center">play</td><td align="left">在音频/视频开始播放时触发</td></tr><tr><td align="center">playing</td><td align="left">在音频/视频因缓冲而暂停或停止后已就绪时触发</td></tr><tr><td align="center">ratechange</td><td align="left">在音频/视频播放速度发生改变时触发(如用户切换到慢速或快速播放模式)</td></tr><tr><td align="center">seeked</td><td align="left">在用户己移动/跳成到音频/视频中的新位置时触发</td></tr><tr><td align="center">seeking</td><td align="left">在用户开始移动/跳跌到新的音频/视频播放位置时触发</td></tr><tr><td align="center">stalled</td><td align="left">在浏览器尝试获取媒体数据, 但数据不可用时触发</td></tr><tr><td align="center">suspend</td><td align="left">在浏览器刻意不加载媒体数据时触发</td></tr><tr><td align="center">timeupdate</td><td align="left">在音频/视频的播放位置发生改变时触发</td></tr><tr><td align="center">volumechange</td><td align="left">在音频/视频的音量发生改变时触发</td></tr><tr><td align="center">waiting</td><td align="left">在视频由于需要缓下一帧而停止时触发</td></tr><tr><td align="center">canplay</td><td align="left">当浏览器能够开始播放指定的音频/视频时,会发生 canplay事件</td></tr><tr><td align="center">canplaythrough</td><td align="left">当浏览器预计能够在不停下来进行缓冲的情况下持续播放指定的音频/视频时,会发生 oanpIaythrough事件</td></tr><tr><td align="center">durationchange</td><td align="left">当指定音频/视频的时长数据发生变化时</td></tr><tr><td align="center">loadeddata</td><td align="left">当当前帧的数据已加载, 但没有足够的数据来播放指定音频/视频的下一帧时</td></tr><tr><td align="center">loadedmetadata</td><td align="left">当指定的音频/视频的元数据已加载时,会发生此事件。音频/ 视频的元数据包括:时长、尺寸(仅视频)以及文本轨道</td></tr><tr><td align="center">loadstart</td><td align="left">当浏览器开始寻找指定的音频/视频时</td></tr><tr><td align="center">progress</td><td align="left">当浏览器正在下载指定的音频/视频</td></tr><tr><td align="center">abort</td><td align="left">在音频/视频(audio/video)终止加载时触发</td></tr><tr><td align="center">ended</td><td align="left">在音频/视频(audio/video)播放完成后触发</td></tr><tr><td align="center">error</td><td align="left">在音频/视频(audio/video)加载发生错误时触发</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新增form元素或属性</title>
      <link href="/2019/09/06/html3/"/>
      <url>/2019/09/06/html3/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="新增的form元素"><a href="#新增的form元素" class="headerlink" title="新增的form元素"></a>新增的form元素</h4></blockquote><ul><li><h5 id="新增的datalist元素"><a href="#新增的datalist元素" class="headerlink" title="新增的datalist元素"></a>新增的datalist元素</h5></li></ul><p>datalist元素用于为输入提供一个可选的列表, 用户可以直接选择列表中的某一选项, 从而免去了输入的麻烦 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">aria-label</span>=<span class="string">"tt"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"url_list"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"url_list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"新浪"</span> <span class="attr">value</span>=<span class="string">"http://www.sina.com.cn"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"搜狐"</span> <span class="attr">value</span>=<span class="string">"http://www.souhu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">label</span>=<span class="string">"网易"</span> <span class="attr">value</span>=<span class="string">"http://www.163.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><h5 id="新增的keygen元素"><a href="#新增的keygen元素" class="headerlink" title="新增的keygen元素"></a>新增的keygen元素</h5></li></ul><p>keygen元素是秘钥对生成器, 能够使用户验证更为可靠。 用户提交表单时会生成两个键,一个私钥,一个公钥,私钥保存客户端而公钥会发送到服务端。 (<strong>浏览器兼容性差</strong>,目测在<strong>火狐上</strong>可显示,其他不支持)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请选择加密强度:  <span class="tag">&lt;<span class="name">keygen</span> <span class="attr">name</span>=<span class="string">"security"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="新增的output元素"><a href="#新增的output元素" class="headerlink" title="新增的output元素"></a>新增的output元素</h5></li></ul><p>output元素用于浏览器中显示计算结果或脚本输出, 包含完整的开始和结束标签。</p><p><code>语法: &lt;output  name=&quot;&quot;&gt;text&lt;/output&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">multi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> a, b;</span><br><span class="line">      a = <span class="built_in">parseInt</span>(prompt(<span class="string">"请输入第一个数字"</span>));</span><br><span class="line">      b=<span class="built_in">parseInt</span>(prompt(<span class="string">"请输入第二个数字"</span>));</span><br><span class="line">      <span class="built_in">document</span>.forms[<span class="string">"form"</span>][<span class="string">"result"</span>].value=a*b;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body onload="multi()"&gt;</span></span><br><span class="line"><span class="regexp">&lt;form action="#" method="get" name="form"&gt;</span></span><br><span class="line"><span class="regexp">两数的乘积为:&lt;output name="result"&gt;&lt;/</span>output&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="新增的form属性"><a href="#新增的form属性" class="headerlink" title="新增的form属性"></a>新增的form属性</h4></blockquote><ul><li><h5 id="新增的autocomplete属性"><a href="#新增的autocomplete属性" class="headerlink" title="新增的autocomplete属性"></a>新增的autocomplete属性</h5></li></ul><p>当此属性用于form元素时, 所有从属于该form的元素都具备自动完成功能。 如果要使用个别元素关闭自动完成功能, 则单独为该元素指定autocomplete=“off”即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请输入用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user_name"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="新增的novalidate属性"><a href="#新增的novalidate属性" class="headerlink" title="新增的novalidate属性"></a>新增的novalidate属性</h5></li></ul><p>此属性用于提交表单时取消整个表单的验证, 即关闭对表单内所有元素的有效检查 。 如果只取消表单中较少部分内容的验证而不一妨碍提交的大部分内容, 则可以将此属性单独用于表单中的这些元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">enctype</span>=<span class="string">"application/x-www-form-urlencoded"</span> <span class="attr">id</span>=<span class="string">"testform"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  请输入电子邮件地址:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"userid"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"formaction"</span> <span class="attr">formaction</span>=<span class="string">"http://www.souhu.com"</span>/&gt;</span> <span class="comment">&lt;!--修改跳转的路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"formenctype"</span> <span class="attr">formenctype</span>=<span class="string">"multipart/form-data"</span>/&gt;</span> <span class="comment">&lt;!-- 修改enctype类型--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"formmethod"</span> <span class="attr">formmethod</span>=<span class="string">"post"</span>/&gt;</span>  <span class="comment">&lt;!--修改请求的方式--&gt;</span></span><br><span class="line">novalidate<span class="tag">&lt;<span class="name">===</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"formnovalidate"</span> <span class="attr">formnovalidate</span>=<span class="string">"formnovalidate"</span> &gt;</span>  <span class="comment">&lt;!--表单验证是否开启--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5相关内容</title>
      <link href="/2019/09/06/html2/"/>
      <url>/2019/09/06/html2/</url>
      
        <content type="html"><![CDATA[<h4 id="HTML5文档有如下结构"><a href="#HTML5文档有如下结构" class="headerlink" title="HTML5文档有如下结构"></a>HTML5文档有如下结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    页面内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p><strong>注意:</strong></p><ul><li><p><strong>不要在</strong><code>&lt;html&gt;</code><strong>和</strong><code>&lt;head&gt;</code><strong>之间插入任何内容</strong></p></li><li><p><strong>不要在</strong><code>&lt;head&gt;</code><strong>和</strong><code>&lt;body&gt;</code><strong>之间插入任何内容</strong></p></li><li><p><strong>不要在</strong><code>&lt;body&gt;</code><strong>和</strong><code>&lt;html&gt;</code><strong>之间插入任何内容</strong></p></li></ul></li></ul><blockquote><h4 id="HTML5语法变化"><a href="#HTML5语法变化" class="headerlink" title="HTML5语法变化"></a>HTML5语法变化</h4></blockquote><ul><li><strong>标签不区分大小写</strong></li><li><strong>元素可以省略结束标签</strong></li><li><strong>允许省略属性的属性值</strong></li><li><strong>允许属性不使用引号</strong><ul><li><strong>提示:</strong><ul><li><strong>HTML5的语法变化主要是为兼容互联网上成千上万的不遵守HTML语法规范的网站,所以可以认为HTML5制定的是一种”妥协式”的规范.</strong></li></ul></li></ul></li></ul><blockquote><h4 id="新增的常用语义性元素"><a href="#新增的常用语义性元素" class="headerlink" title="新增的常用语义性元素"></a>新增的常用语义性元素</h4></blockquote><table><thead><tr><th align="center">mark</th><th align="left">定义带有记号的文本,需要突出显示文本时使用&lt;mark&gt;标签</th></tr></thead><tbody><tr><td align="center">progress</td><td align="left">标签定义运行中的任务进度(进程)</td></tr><tr><td align="center">time</td><td align="left">表示时间日期值</td></tr><tr><td align="center">details</td><td align="left">此标签规定了用户可见的或者隐藏的需求的补充细节</td></tr><tr><td align="center">datalist</td><td align="left">定义选项列表。请与input元素配合使用该元素,来定义input可能的值。</td></tr><tr><td align="center">ruby</td><td align="left">此标签定义 ruby注释,往往与&lt;rt&gt;和&lt;rp&gt;标签一起配合使用</td></tr><tr><td align="center">menu</td><td align="left">表示菜单列表</td></tr><tr><td align="center">command</td><td align="left">可以定义用户可能调用的命令(比如单选按钮、复选框或按钮)</td></tr></tbody></table><blockquote><h4 id="新增的结构性元素"><a href="#新增的结构性元素" class="headerlink" title="新增的结构性元素"></a>新增的结构性元素</h4></blockquote><table><thead><tr><th align="center">section</th><th align="left">定义文档中的节。比如章节、页眉、页脚或文档中的其它部分。一般用于成节的内容, 会在文档流中开始一个新的节</th></tr></thead><tbody><tr><td align="center">article</td><td align="left">它是一个特殊的sect i on标签, 它比sect i on具有更明确的语义, 它代表一个独立的,完整的相关内容块, 可独立于页面其它内容使用</td></tr><tr><td align="center">nav</td><td align="left">此标签代表页面的一个部分, 表示页面中导航链接的部分</td></tr><tr><td align="center">aside</td><td align="left">它用来装载非正文的内容, 被视为页面里面一个单独的部分。它包含的内容与页面的主要内容是分开的, 可以被删除, 而不会影响到网页的内容、章节或是页面所要传达的信息</td></tr><tr><td align="center">hgroup</td><td align="left">是对网页或区段section的标题元素 (h1-h6) 进行组合</td></tr><tr><td align="center">footer</td><td align="left">它定义section或文档的页脚, 包含了与页面、 文章或是部分内容有关的信息</td></tr><tr><td align="center">header</td><td align="left">定义文档的页眉, 通常是一些引导和导航信息。它不局限于写在网页头部, 也可以写在网页内容里面</td></tr><tr><td align="center">figure</td><td align="left">用于对元素进行组合。多用于图片与图片描述组合</td></tr></tbody></table><blockquote><h4 id="新增的input输入类型"><a href="#新增的input输入类型" class="headerlink" title="新增的input输入类型"></a>新增的input输入类型</h4></blockquote><table><thead><tr><th align="center">list</th><th align="left">属性引用&lt;datalist&gt;元素,其中包含&lt;input&gt;元素的预定义选项</th></tr></thead><tbody><tr><td align="center">新增的miN,max和step属性</td><td align="left">min:规定输入框所输入的最小值,max:规定输入框所输入的最大值,step:为输入框规定合法的数字间隔</td></tr><tr><td align="center">multiple</td><td align="left">属性规定允许用户输入到 &lt;input&gt; 元素的多个值</td></tr><tr><td align="center">pattern</td><td align="left">规定用于验证 &lt;i nput&gt; 元素的值的正则表达式</td></tr><tr><td align="center">pIaceholder</td><td align="left">规定可指述输入&lt;input&gt; 字段预期值的简短的提示信息</td></tr><tr><td align="center">required</td><td align="left">规定必需在提交表单之前填写输入字段</td></tr><tr><td align="center">autocomptete</td><td align="left">规定&lt;input&gt;元素输入字段是否应该启用自动完成功能</td></tr><tr><td align="center">autofocus</td><td align="left">规定当页面加载时&lt;input&gt;元素应该自动获得焦点</td></tr><tr><td align="center">form</td><td align="left">规定 &lt;input&gt; 元素所属的一个或多个表单</td></tr><tr><td align="center"><strong>formaction</strong></td><td align="left">规定当表单提交时处理输入控件的文件的 url</td></tr><tr><td align="center"><strong>formenctype</strong></td><td align="left">规定当表单数据提交到服务器时如何编码</td></tr><tr><td align="center"><strong>formmethod</strong></td><td align="left">定义发送表单数据到 actionURL的 HTTP方法</td></tr><tr><td align="center"><strong>formtarget</strong></td><td align="left">规定表示提交表单后在哪里显示接收到响应的名称或关键词</td></tr><tr><td align="center"><strong>formnovalidate</strong></td><td align="left">覆盖&lt;form&gt;元素的写属性novalidate属性</td></tr><tr><td align="center"><strong>除了formnovalidate属性</strong></td><td align="left"><strong>其它属性都是只针对 type=”submit”和 type=”image”</strong></td></tr><tr><td align="center">新增的height和width属性</td><td align="left">规定&lt;input&gt;元素的高度(只针对type=”image”)</td></tr><tr><td align="center">email</td><td align="left">定义用于 email地址的字段</td></tr><tr><td align="center">url</td><td align="left">定义用于输入 URL的字段</td></tr><tr><td align="center">number</td><td align="left">定义用于输入数手的手段</td></tr><tr><td align="center">range</td><td align="left">定义用于精确值不重要的输入数手的控件</td></tr><tr><td align="center">Date Pickers</td><td align="left">定义 date控件。month:定义 month和 year控件(不带时区) 。 week:定义 week和 year控件。 time:定义用于输入时间的控件。 datetime:定义 date和 time控件,基于uTC时区。datetime-looal:定义 date和 time控件,  不带时区</td></tr><tr><td align="center">search</td><td align="left">定义用于输入捜索字符串的文本字段</td></tr><tr><td align="center">tel</td><td align="left">定义用于输入电话号码的字段</td></tr><tr><td align="center">color</td><td align="left">定义拾色器</td></tr></tbody></table><blockquote><h4 id="HTML5废除的相关元素"><a href="#HTML5废除的相关元素" class="headerlink" title="HTML5废除的相关元素"></a>HTML5废除的相关元素</h4></blockquote><ul><li><p>能用css代替的元素,  比如:basefont、 big、 center、 font、 s、strike、 tt、 u。</p></li><li><p>不再使用frame框架, frameset、 frame、 noframes。 HTML5中不支持frame框架, 只支持 iframe框架 。</p></li><li><p>只有部分刘览器支持的元素, applet、 bgsound、 bl ink、 marquee等标签。</p></li><li><p>其他被废除的元素, 比如:废除rb使用ruby替代、废除acronym使用abbr替代、废除dir使用ul替代、废除listing使用pre替代等。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas相关内容</title>
      <link href="/2019/09/06/html1/"/>
      <url>/2019/09/06/html1/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="认识Canvas元素"><a href="#认识Canvas元素" class="headerlink" title="认识Canvas元素"></a>认识Canvas元素</h4></blockquote><ul><li>canvas是HTML5新增的专门用来绘制图形的元素, 通过Canvas技术, 用户可以在Web中绘制各种图形. canvas元素它是一块无色透明的区域, 它只是一个容器, 开发者通过JavaScript脚本可以轻松的在区域上实现任意绘图 </li><li>在页面中添加canvas元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"578"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">您的浏览器不支持oanvas元素, 请更新或更换您的浏览器.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span> &gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><h4 id="Canvas绘制步骤"><a href="#Canvas绘制步骤" class="headerlink" title="Canvas绘制步骤"></a>Canvas绘制步骤</h4></blockquote><ul><li>在html5页面中添加canvas元素, 定义 id属性值以便接下来调用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>  <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"578"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 id寻找页面中的canvas元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br></pre></td></tr></table></figure><ul><li>通过canvas元素的getContext方法来获取其上下文(Context) ,即创建Context对象, 以获取允许进行绘制的2D环境。 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context=c.getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure><ul><li>使用 JavaScript脚本来进行绘制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.fillStyle=<span class="string">'#ff0000'</span>;</span><br><span class="line">context.fillRect(<span class="number">50</span>,<span class="number">25</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><blockquote><h4 id="绘制直线相关的方法"><a href="#绘制直线相关的方法" class="headerlink" title="绘制直线相关的方法"></a>绘制直线相关的方法</h4></blockquote><table><thead><tr><th align="center">beginPath()</th><th align="left">定义了一个新的路径绘制动作的开始</th></tr></thead><tbody><tr><td align="center">moveTo()</td><td align="left">为指定点创建了一个新的子路径, 这个点就变成了新的上下文点,我们可以把moveTo() 方法看成用来定位我们的绘图鼠标用的</td></tr><tr><td align="center">lineTo()</td><td align="left">以上下文点为起点, 到方法参数中指定的点之间函一条直线</td></tr><tr><td align="center">stroke()</td><td align="left">为所画的线赋予颜色, 并使其可见.如果没有特别的指定颜色的,则默认使用黑色画直线</td></tr></tbody></table><blockquote><h4 id="绘制直线的相关属性"><a href="#绘制直线的相关属性" class="headerlink" title="绘制直线的相关属性"></a>绘制直线的相关属性</h4></blockquote><table><thead><tr><th align="center">lineWidth</th><th align="left">直线的宽度</th></tr></thead><tbody><tr><td align="center">strokeStyle</td><td align="left">直线的颜色</td></tr><tr><td align="center">直线端点样式</td><td align="left">HTML5canvas支持3种i线的端点样式, 包括:butt,round,round 和 square.设定端点样式是用lineGap属性设定.缺省情况下,将使用butt样式</td></tr></tbody></table><ul><li>绘制矩形</li></ul><p>绘制矩形使用<strong>rect</strong>()方法。每个短形需要由左上角坐标(x, y) 和矩形的宽与高 (width,height)来确定。</p><ul><li>绘制圆</li></ul><p>画圆只需要在调用<strong>arc</strong>()方法时,将起始角度设为0,终止角度设为2 * Pl即可。</p><ul><li>图形的颜色填充</li></ul><p>要填充图形,需要用<strong>filIStyIe</strong>属性设五填充图形用的颜色,然后使用<strong>fill</strong>()方法完成对图形的填充。默认情况下,fillStyle的颜色是黑色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">     <span class="keyword">let</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line">     context.beginPath();</span><br><span class="line">     context.rect(<span class="number">10</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">      context.lineWidth=<span class="number">5</span>;<span class="comment">//线的粗细</span></span><br><span class="line">      context.strokeStyle=<span class="string">"blue"</span>;<span class="comment">//线的颜色</span></span><br><span class="line">      context.stroke();</span><br><span class="line">      context.fillStyle=<span class="string">"blue"</span>;<span class="comment">//填充的颜色</span></span><br><span class="line">      context.fill();<span class="comment">//填充</span></span><br><span class="line"><span class="comment">//绘制圆</span></span><br><span class="line">      context.beginPath();</span><br><span class="line">      <span class="comment">//圆心的坐标</span></span><br><span class="line">      <span class="keyword">let</span> centerX=canvas.width/<span class="number">1.5</span>;</span><br><span class="line">      <span class="keyword">let</span> centerY=canvas.height/<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">let</span> radius=<span class="number">80</span>;<span class="comment">//半径</span></span><br><span class="line">      context.arc(centerX,centerY,radius,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>); <span class="comment">//true逆时针 false顺时针</span></span><br><span class="line">      context.lineWidth=<span class="number">5</span>;<span class="comment">//线的粗细</span></span><br><span class="line">      context.strokeStyle=<span class="string">"black"</span>;<span class="comment">//线的颜色</span></span><br><span class="line">      context.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4></blockquote><ul><li><strong>绘制文本的方法</strong></li></ul><p><code>context.fillText(Text,x1, y1)</code></p><p>其中text是要绘制的文本, x1 , y1是绘制文本的位置。</p><ul><li><strong>设置文本的字体、大小和样式</strong></li></ul><p>要设置字体、大小和样式,需要用到上下文对象的 <strong>font</strong>属性。样式可以是<strong>normal,itaIic或bold.</strong>默认情况是 normal 。</p><ul><li><strong>设置文本颜色</strong></li></ul><p>文本的颜色用<strong>fillStyle</strong>属性设置</p><ul><li><strong>描绘文本边缘</strong></li></ul><p>要描绘字体边缘的效果,要使用 <strong>strokeText</strong>()方法替代<strong>filIText</strong>(), 同时要用<strong>strokeStyle</strong>属性替代 <strong>filIStyIe</strong>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">let</span> x = canvas.width / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> y = canvas.height / <span class="number">2</span>;</span><br><span class="line">    context.font = <span class="string">"italic 40px Arial"</span>;</span><br><span class="line">    context.fillStyle = <span class="string">"#ff0000"</span>;</span><br><span class="line">    context.fillText(<span class="string">"Hello World"</span>, x, y);</span><br><span class="line">    context.lineWidth = <span class="number">2</span>;</span><br><span class="line">    context.strokeText(<span class="string">"Hello World"</span>, x, y + <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/html1/K4.png" alt></p><ul><li><strong>绘制文本对齐</strong></li></ul><p>文本的对齐功能设定使用 <strong>textAlign</strong>属性。其可用的选项包括<strong>start, end,  left, center和 right。</strong></p><ul><li><strong>文本度量</strong></li></ul><p>要获取有关文本的尺度信息,可以使用 <strong>measureText</strong>()方法。此方法需要一个文本字符串组为参数, 并返回一个尺度对象.尺度对象中的数据是基于所提供的字符串参数和当前的文本字体信息而来的.</p><ul><li><strong>文本换行</strong></li></ul><p>要实现文本换行功能, 我们需要创建一个用户自定义函数, 此函数需要<strong>canvas</strong>上下文对象,一个文本字符串、一个位置、一个最大宽度和行高度信息.函数将使用 <strong>measureText</strong>()计算何时换行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">let</span> text = <span class="string">"They say a person needs just three things to be truly happy in this world: someone to love, something to do, and something to hope for."</span>;</span><br><span class="line">    <span class="keyword">let</span> maxWidth = <span class="number">300</span>;<span class="comment">//每一行绘制的长度,超过就换行</span></span><br><span class="line">    <span class="keyword">let</span> lineHeight = <span class="number">25</span>;<span class="comment">//设置行之间的间隔</span></span><br><span class="line">    <span class="keyword">let</span> x = (canvas.width - maxWidth) / <span class="number">2</span>;<span class="comment">//绘制起始坐标</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">30</span>;</span><br><span class="line">    context.font = <span class="string">"16px Arial"</span>;</span><br><span class="line">    context.fillStyle = <span class="string">"#000fff"</span>;</span><br><span class="line">    wrapText(context, text, x, y, maxWidth, lineHeight);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrapText</span>(<span class="params">context, text, x, y, maxWidth, lineHeight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> words = text.split(<span class="string">" "</span>);<span class="comment">//以空格把字符串分割并存到数组里</span></span><br><span class="line">    <span class="keyword">let</span> line = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; words.length; n++) &#123;</span><br><span class="line">      <span class="keyword">let</span> testLine = line + words[n] + <span class="string">" "</span>;</span><br><span class="line">      <span class="keyword">let</span> metrics = context.measureText(testLine);</span><br><span class="line">      <span class="keyword">let</span> testWidth = metrics.width;<span class="comment">//得到测量字符的宽度</span></span><br><span class="line">      <span class="keyword">if</span> (testWidth &gt; maxWidth) &#123;</span><br><span class="line">        context.fillText(line, x, y);</span><br><span class="line">        line = words[n] + <span class="string">" "</span>; <span class="comment">//重新给line赋值,绘制下一行</span></span><br><span class="line">        y += lineHeight;<span class="comment">//y坐标要加上行高,在上一行的下方绘制,避免绘制的内哦平重叠</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        line = testLine;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    context.fillText(line, x, y);<span class="comment">//绘制文本</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/html1/K5.png" alt></p><blockquote><p> <strong>据说一个人在这个世上获得真正的幸福需要三件事情：有人爱，有事做，有所期待。</strong></p></blockquote><p><img src="/2019/09/06/html1/K2.png" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">     <span class="keyword">let</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">     <span class="comment">//绘制弧线</span></span><br><span class="line">     context.beginPath();</span><br><span class="line">     context.moveTo(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">     context.lineTo(<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">     context.arcTo(<span class="number">150</span>,<span class="number">20</span>,<span class="number">150</span>,<span class="number">70</span>,<span class="number">50</span>);</span><br><span class="line">     context.lineTo(<span class="number">150</span>,<span class="number">120</span>);</span><br><span class="line">     context.stroke();     </span><br><span class="line"></span><br><span class="line">     context.beginPath();</span><br><span class="line">     context.moveTo(<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line">     <span class="comment">//第一条直线</span></span><br><span class="line">      context.lineTo(<span class="number">200</span>,<span class="number">160</span>);</span><br><span class="line">      <span class="comment">//二次曲线</span></span><br><span class="line">      context.quadraticCurveTo(<span class="number">230</span>,<span class="number">200</span>,<span class="number">250</span>,<span class="number">120</span>);</span><br><span class="line">      <span class="comment">//贝塞尔曲线</span></span><br><span class="line">      context.bezierCurveTo(<span class="number">290</span>,<span class="number">-40</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">150</span>);</span><br><span class="line">      <span class="comment">//第二条直线</span></span><br><span class="line">      context.lineTo(<span class="number">500</span>,<span class="number">90</span>);</span><br><span class="line">      context.lineWidth=<span class="number">5</span>;</span><br><span class="line">      context.strokeStyle=<span class="string">"blue"</span>;</span><br><span class="line">      context.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="/2019/09/06/html1/K1.png" alt></p><blockquote><h4 id="绘制径向渐变"><a href="#绘制径向渐变" class="headerlink" title="绘制径向渐变"></a>绘制径向渐变</h4></blockquote><p>首先使用 <strong>createRadiaIGradient</strong>()方法创建canvasGradient对象, <strong>语法如下</strong>:</p><p><code>var grad=context.createRadialGradient(X1,Y1,R1,X2,Y2, R2);</code></p><p>其中X1,Y1,R1定义一个以(X1, Y1)为原点、半径为R1的国。 X2,Y2,R2定义一个以(X2, Y2)为原点、半径为R2的圆。然后使用 addColorStop方法定义色标的位置并上色 。grad. <strong>addColorStop</strong>(position, color) ;其中参数position为渐变中色标的相对位置 (偏移量)</p><blockquote><h4 id="绘制线性渐变"><a href="#绘制线性渐变" class="headerlink" title="绘制线性渐变"></a>绘制线性渐变</h4></blockquote><p>首先使用 <strong>createLinearGradient</strong>()方法创建canvasGradient对象, <strong>语法如下:</strong></p><p><code>var grad=context.createLinearGradient(X1, Y1, X2, Y2);</code></p><p>其中X1、 Y1为渐变的起点, X2、 Y2为渐变的终点。然后使用 <strong>addColorStop</strong>方法定义色标的位置并上色</p><p>grad. <strong>addColorStop</strong>(position, color) ;其中参数position为渐变中色标的相对位置 (偏移量)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">//线性渐变</span></span><br><span class="line">    <span class="keyword">let</span> clg=context.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    clg.addColorStop(<span class="number">0</span>,<span class="string">"#ff0000"</span>);</span><br><span class="line">    clg.addColorStop(<span class="number">0.5</span>,<span class="string">"#00ff00"</span>);</span><br><span class="line">    clg.addColorStop(<span class="number">1</span>,<span class="string">"#0000ff"</span>);</span><br><span class="line">    context.fillStyle=clg;</span><br><span class="line">    context.strokeStyle=clg;</span><br><span class="line">    context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="comment">//径向渐变</span></span><br><span class="line">    <span class="keyword">let</span> crg=context.createRadialGradient(<span class="number">325</span>,<span class="number">100</span>,<span class="number">20</span>,<span class="number">325</span>,<span class="number">100</span>,<span class="number">80</span>);</span><br><span class="line">    crg.addColorStop(<span class="number">0</span>,<span class="string">"#ffffff"</span>);</span><br><span class="line">    crg.addColorStop(<span class="number">0.75</span>,<span class="string">"#ff0000"</span>);</span><br><span class="line">    crg.addColorStop(<span class="number">1</span>,<span class="string">"#000000"</span>);</span><br><span class="line">    context.fillStyle=crg;</span><br><span class="line">    context.fillRect(<span class="number">230</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/html1/K3.png" alt></p><blockquote><h4 id="绘制图像的方法"><a href="#绘制图像的方法" class="headerlink" title="绘制图像的方法"></a>绘制图像的方法</h4></blockquote><ul><li><strong>context.drawlmage(imageObj, x,y);</strong></li></ul><p>此方法需要一个图像对象和一个起始点坐标作为参数, 其中起始点坐标是相对于canvas的左上角的位置</p><ul><li><strong>context. drawlmage(imageObj, x, y, width,  height);</strong></li></ul><p>drawlmage方法还可以接受 width和 height两个参数用来以任意指定的尺寸显示图像。</p><ul><li><strong>context. drawlmage(imageObj,sx,sy,sw, sh, dx, dy, dw, dh);</strong></li></ul><p>drawlmage方法还可以增加另六个参数来实现对图像的裁剪 。 这六个参数是</p><p>sourceX,sourceY, sourGeWidth, sourceHeight,destWidth和destHeight。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">   <span class="keyword">let</span> image=<span class="keyword">new</span> Image();</span><br><span class="line">   image.src=<span class="string">"icon.png"</span>;</span><br><span class="line">   image.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     context.drawImage(image,<span class="number">10</span>,<span class="number">10</span>);<span class="comment">//原始图片的大小</span></span><br><span class="line">    context.drawImage(image,<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">200</span>);<span class="comment">//绘制图片的大小</span></span><br><span class="line">    context.drawImage(image,<span class="number">50</span>,<span class="number">40</span>,<span class="number">300</span>,<span class="number">450</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">350</span>,<span class="number">450</span>);<span class="comment">//裁剪后的图像</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="绘制阴影"><a href="#绘制阴影" class="headerlink" title="绘制阴影"></a>绘制阴影</h4></blockquote><p><strong>要为图形添加明影需要用到:</strong></p><p><code>shadowColor:阴影颜色</code></p><p><code>shadowB1ur:阴影模糊度</code></p><p><code>shadowOffsetX:设置或返回阴影与形状的水平距高</code></p><p><code>shadowOffsetY:设置或返回阴影与形状的垂直距高</code></p><blockquote><h4 id="绘制透明度"><a href="#绘制透明度" class="headerlink" title="绘制透明度"></a>绘制透明度</h4></blockquote><p><code>globalAlpha属性</code>设置或还回绘图的当前透明值.属性值必须是介于<strong>0.0(完全透明)与1.0(不透明)</strong>之间的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canvas=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">  <span class="keyword">let</span> context=canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  <span class="comment">//绘制圆</span></span><br><span class="line">    context.beginPath();</span><br><span class="line"><span class="comment">//圆心的坐标</span></span><br><span class="line">    <span class="keyword">let</span> centerX=canvas.width/<span class="number">1.5</span>;</span><br><span class="line">    <span class="keyword">let</span> centerY=canvas.height/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> radius=<span class="number">80</span>;<span class="comment">//半径</span></span><br><span class="line">    context.arc(centerX,centerY,radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>); <span class="comment">//true逆时针 false顺时针</span></span><br><span class="line">    context.lineWidth=<span class="number">5</span>;<span class="comment">//线的粗细</span></span><br><span class="line">    context.strokeStyle=<span class="string">"black"</span>;<span class="comment">//线的颜色</span></span><br><span class="line">    context.stroke();</span><br><span class="line">    context.fillStyle=<span class="string">"#8ED6FF"</span>;<span class="comment">//设置填充色</span></span><br><span class="line">    <span class="comment">//设置阴影</span></span><br><span class="line">    context.shadowColor=<span class="string">"green"</span>;</span><br><span class="line">    context.shadowBlur=<span class="number">20</span>;</span><br><span class="line">    context.shadowOffsetX=<span class="number">10</span>;</span><br><span class="line">    context.shadowOffsetY=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//设置透明度</span></span><br><span class="line">    context.globalAlpha=<span class="number">0.2</span>;</span><br><span class="line">    context.fill();</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="绘制图案填充"><a href="#绘制图案填充" class="headerlink" title="绘制图案填充"></a>绘制图案填充</h4></blockquote><p>用上下文对象的 <strong>createPattern</strong>()方法创建一个图案填充对象, <strong>语法如下:</strong></p><p><code>context.createPattern(image, type);</code></p><p>其中type必须为下面字符串之一: <code>repeat、 repeat-x、 repeat-y、 no-repeat</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">      <span class="keyword">let</span> canvas=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      canvas.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">400</span>);</span><br><span class="line">      <span class="keyword">let</span> img=<span class="built_in">document</span>.getElementById(<span class="string">"butterfly"</span>);</span><br><span class="line">      <span class="keyword">let</span> pat=canvas.createPattern(img,type);</span><br><span class="line">      canvas.rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">400</span>);</span><br><span class="line">      canvas.fillStyle=pat;</span><br><span class="line">      canvas.fill();</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;图像的使用:&lt;/</span>p&gt;</span><br><span class="line">&lt;img src=<span class="string">"icon.png"</span> id=<span class="string">"butterfly"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"draw('repeat')"</span>&gt;</span>Repeat<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"draw('repeat-x')"</span>&gt;</span>Repeat-x<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"draw('repeat-y')"</span>&gt;</span>Repeat-y<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"draw('no-repeat')"</span>&gt;</span>no-repeat<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><h4 id="图形的变换"><a href="#图形的变换" class="headerlink" title="图形的变换"></a>图形的变换</h4></blockquote><ul><li>移动坐标空间</li></ul><p>使用 translate() 方法可以将绘图原点横向和纵向的移动到指定的距离(x, y),结果表现为整张图像的移动。</p><ul><li>旋转坐标空间</li></ul><p>旋转canvas用的方法是 rotate()。此方法接受一个以弧度为单位的旋转参教,整个canvas将以坐标原点,也就是由 transIate()所确定的原点为圆心进行旋转。</p><ul><li>缩放图形</li></ul><p>缩放操作使用 scale()方法,参数x、 y分别代表横向与纵向的缩放比例, 两个参数都是浮点数, 1. 0表示不缩放, 小于1. 0表示缩小,大于1. 0表示放大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">let</span> rectWidth=<span class="number">150</span>;</span><br><span class="line">    <span class="keyword">let</span>  rectHeight=<span class="number">75</span>;</span><br><span class="line">    context.fillStyle=<span class="string">"#ff0000"</span>;</span><br><span class="line">    <span class="comment">//把坐标原点移动到canvas中心点</span></span><br><span class="line">    context.translate(canvas.width/<span class="number">2</span>,canvas.height/<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//顺时针旋转45度</span></span><br><span class="line">    context.rotate(<span class="number">0.25</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">    <span class="comment">//坐标在纵向上缩小一半</span></span><br><span class="line">    context.scale(<span class="number">1</span>,<span class="number">0.5</span>);</span><br><span class="line">    context.fillRect(-rectWidth/<span class="number">2</span>,-rectHeight/<span class="number">2</span>,rectWidth,rectHeight);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>保存与恢复canvas状态</li></ul><p>使用save()和 restore()方法可以实现对坐标变换状态的保存与恢复。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">//所绘制矩形的宽度和高度</span></span><br><span class="line">    <span class="keyword">let</span> rectWidth = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">let</span> rectHeight = <span class="number">75</span>;</span><br><span class="line">    context.save();<span class="comment">//保存状态1(坐标0,0)</span></span><br><span class="line">    context.translate(canvas.width / <span class="number">2</span>, canvas.height / <span class="number">2</span>);</span><br><span class="line">    context.save();<span class="comment">//保存状态2(坐标移动到画布中间)</span></span><br><span class="line">    context.rotate(<span class="built_in">Math</span>.PI / <span class="number">4</span>);</span><br><span class="line">    context.save();<span class="comment">//保存状态3 (按中心点旋转45)</span></span><br><span class="line">    context.scale(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">//矩形宽度和高度增加2倍</span></span><br><span class="line">    context.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">    context.fillRect(-rectWidth / <span class="number">2</span>, -rectHeight / <span class="number">2</span>, rectWidth, rectHeight);</span><br><span class="line">    context.restore();<span class="comment">//回复状态3</span></span><br><span class="line">    context.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">    context.fillRect(-rectWidth / <span class="number">2</span>, -rectHeight / <span class="number">2</span>, rectWidth, rectHeight);</span><br><span class="line">    context.restore();<span class="comment">//回复状态2</span></span><br><span class="line">    context.fillStyle = <span class="string">"yellow"</span>;</span><br><span class="line">    context.fillRect(-rectWidth / <span class="number">2</span>, -rectHeight / <span class="number">2</span>, rectWidth, rectHeight);</span><br><span class="line">    context.restore();<span class="comment">//回复状态1</span></span><br><span class="line">    context.fillStyle = <span class="string">"green"</span>;</span><br><span class="line">    context.fillRect(-rectWidth / <span class="number">2</span>, -rectHeight / <span class="number">2</span>, rectWidth, rectHeight);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="图形的组合"><a href="#图形的组合" class="headerlink" title="图形的组合"></a>图形的组合</h4></blockquote><p>globalCompositeOperation 属性设置或返回如何将一个源 (新的) 图像绘制到日标(已有的)的图像上。</p><p>属性值如下:</p><table><thead><tr><th align="left">source-over</th><th align="left">默认。在目标图像上显示源图像</th></tr></thead><tbody><tr><td align="left">source-atop</td><td align="left">在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的</td></tr><tr><td align="left">source-in</td><td align="left">在目标图像中显示源图像。只有目标图像之内的源图像部分会显示, 目标图像是透明的</td></tr><tr><td align="left">source-out</td><td align="left">在 目标图像之外显示源图像.只有目标图像之外的源图像部分会显示,目标图像是透明的</td></tr><tr><td align="left">destination-over</td><td align="left">在源图像上显示目标图像</td></tr><tr><td align="left">destination-atop</td><td align="left">在源图像顶部显示目标图像。目标图像位于源图像之外的部分是不可见的</td></tr><tr><td align="left">destination-in</td><td align="left">在源图像中显示目标图像。只有源图像之内的目标图像部分会被显示, 源图像是透明的</td></tr><tr><td align="left">destination-out</td><td align="left">在源图像之外显示目标图像。只有源图像之外的目标图像部分会被显示, 源图像是透明的</td></tr><tr><td align="left">lighter</td><td align="left">显示源图像+ 目标图像,交叉处高亮显示</td></tr><tr><td align="left">darker</td><td align="left">显示源图像+目标图像</td></tr><tr><td align="left">copy</td><td align="left">显示源图像。忽略目标图像</td></tr><tr><td align="left">xor</td><td align="left">使用异或操作对源图像与目标图像进行组合。</td></tr></tbody></table><ul><li><strong>红色源图像    蓝色目标图像</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">//绘制矩形</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.rect(<span class="number">200</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    context.fillStyle = <span class="string">"blue"</span>;</span><br><span class="line">    context.fill();</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"source-over"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"source-atop"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"source-in"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"destination-in"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"destination-out"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"lighter"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"darker"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"xor"</span>;</span><br><span class="line">    context.globalCompositeOperation = <span class="string">"copy"</span>;</span><br><span class="line">    <span class="comment">//绘制圆</span></span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.arc(<span class="number">320</span>, <span class="number">120</span>, <span class="number">60</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">false</span>);</span><br><span class="line">    context.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">    context.fill();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/html1/kt.png" alt></p><blockquote><h4 id="图形的裁切"><a href="#图形的裁切" class="headerlink" title="图形的裁切"></a>图形的裁切</h4></blockquote><p>clip()方法从原始画布中剪切任意的形状和尺寸 。</p><p><strong>提示:</strong> 一旦剪切了某个区域, 则所有之后的绘图都会被限制在被剪切的区域内 (不能访问画布上的其他区域) 。 您也可以在使用</p><p>clip()方法前通过使用 save()方法对当前画布区域进行保存, 并在以后的任意时间对其进行恢复(通过 restore()方法) 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line">      <span class="keyword">let</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      context.rect(<span class="number">50</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">120</span>);</span><br><span class="line">      context.stroke();</span><br><span class="line">      context.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">      context.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">      <span class="keyword">let</span> canvas1 = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas2"</span>);</span><br><span class="line">      <span class="keyword">let</span> context1 = canvas1.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      context1.rect(<span class="number">50</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">120</span>);</span><br><span class="line">      context1.stroke();</span><br><span class="line">      context1.clip();<span class="comment">//裁切</span></span><br><span class="line">      context1.fillStyle = <span class="string">"red"</span>;</span><br><span class="line">      context1.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;没有裁切之前:<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;canvas id="myCanvas" width="300" height="150"&gt;</span><br><span class="line">  您的浏览器不支持HTML5 canvas标签</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>裁切之后:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;canvas id="myCanvas2" width="300" height="150"&gt;</span><br><span class="line">  您的浏览器不支持HTML5 canvas标签</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/html1/kt2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS使图片居中的三种方法</title>
      <link href="/2019/09/06/css3/"/>
      <url>/2019/09/06/css3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wang414300980/article/details/75089066" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><ul><li><h4 id="利用display-table-cell"><a href="#利用display-table-cell" class="headerlink" title="利用display:table-cell"></a>利用display:table-cell</h4></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_wrap"</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"wgs.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img_wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">    display: table-cell; //主要是这个属性</span><br><span class="line">    <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br><span class="line">    <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><h4 id="采用背景法"><a href="#采用背景法" class="headerlink" title="采用背景法"></a>采用背景法</h4></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img_wrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(wgs.jpg) no-repeat center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="图片外面用个p标签-通过设置line-height使图片垂直居中"><a href="#图片外面用个p标签-通过设置line-height使图片垂直居中" class="headerlink" title="图片外面用个p标签,通过设置line-height使图片垂直居中"></a>图片外面用个p标签,通过设置line-height使图片垂直居中</h4></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img_wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"wgs.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>: <span class="number">0px</span>;<span class="attribute">padding</span>: <span class="number">0px</span>&#125;</span><br><span class="line">  <span class="selector-class">.img_wrap</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;&#125;</span><br><span class="line">  <span class="selector-class">.img_wrap</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">      <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">line-height</span>:<span class="number">300px</span>;  <span class="comment">/* 行高等于高度 */</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.img_wrap</span> <span class="selector-tag">p</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">     *margin-top:expression((400 - this.height )/2);  /* CSS表达式用来兼容IE6/IE7 */</span><br><span class="line">      <span class="selector-tag">vertical-align</span><span class="selector-pseudo">:middle</span>;</span><br><span class="line">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择器</title>
      <link href="/2019/09/06/css4/"/>
      <url>/2019/09/06/css4/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="CSS3属性选择器"><a href="#CSS3属性选择器" class="headerlink" title="CSS3属性选择器"></a>CSS3属性选择器</h4></blockquote><table><thead><tr><th align="left">E[att^=“val”]</th><th align="left">属性att的值以“val”开头的元素</th></tr></thead><tbody><tr><td align="left">E[att$=“val”]</td><td align="left">属性att的值以“val”结尾的元素</td></tr><tr><td align="left">E[att*=“val”]</td><td align="left">属性att的值包含“val”字符串的元素</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[src^="https"]</span>  选择其<span class="selector-tag">src</span>属性值以 "<span class="selector-tag">https</span>"开头的每个&lt;<span class="selector-tag">a</span>&gt;元素</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[src$=".pdf"]</span>   选择其<span class="selector-tag">src</span>属性以"<span class="selector-class">.pdf</span>"结尾的所有&lt;<span class="selector-tag">a</span>&gt;元素</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[src*="abc"]</span>    选择其<span class="selector-tag">src</span>属性中包含 "<span class="selector-tag">abc</span>"子串的每个&lt;<span class="selector-tag">a</span>&gt;元素</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><h4 id="CSS3结构伪类选择器"><a href="#CSS3结构伪类选择器" class="headerlink" title="CSS3结构伪类选择器"></a>CSS3结构伪类选择器</h4></blockquote><table><thead><tr><th align="left">:root</th><th align="left">选择匹配文档的根元素</th></tr></thead><tbody><tr><td align="left">E:nth-child(n)</td><td align="left">选择所有在其父元素中的第n个位置的匹配E的子元素</td></tr><tr><td align="left">E:nth-last-child(n)</td><td align="left">选择所有在其父元素中倒数第n个位置的匹配E的子元素</td></tr><tr><td align="left">E: nth-of-type(n)</td><td align="left">选择所有在其父元素中同类型第 n个位置的匹配E的子元素</td></tr><tr><td align="left">E: nth-last-of- type(n)</td><td align="left">选择所有在其父元素中同类型倒数第n个位置的匹配E的子元素</td></tr><tr><td align="left">E: last-child</td><td align="left">选择位于其父元素中最后一个位置, 且匹配E的子元素</td></tr><tr><td align="left">E: first-of-type</td><td align="left">选择在其父元素中匹配E的第一个同类型子元素</td></tr><tr><td align="left">E:Iast-of-type</td><td align="left">选择在其父元素中匹配E的最后一个同类型子元素</td></tr><tr><td align="left">E:onIy-child</td><td align="left">选择其父元素只包含一个子元素, 且该子元素匹配E</td></tr><tr><td align="left">E: only-of-type</td><td align="left">选择其父元素只包含一个同类型的子元素, 且该子元素匹配E</td></tr><tr><td align="left">E:empty</td><td align="left">选择匹配E的元素, 且该元素不包含子元素</td></tr></tbody></table><blockquote><h4 id="CSS3Ull为类选择器"><a href="#CSS3Ull为类选择器" class="headerlink" title="CSS3Ull为类选择器"></a>CSS3Ull为类选择器</h4></blockquote><table><thead><tr><th align="left">E:enabled</th><th align="left">选择匹配E的所有可用UI元素</th></tr></thead><tbody><tr><td align="left">E:disabled</td><td align="left">选择匹配E的所有不可用UI元素</td></tr><tr><td align="left">E:checked</td><td align="left">选择匹配E的所有可用UI元素</td></tr><tr><td align="left">E:read-write</td><td align="left">选择匹配可读及可写的元素</td></tr><tr><td align="left">E:read-only</td><td align="left">选择匹配设置”readonly” (只读)属性的元素</td></tr><tr><td align="left">E::selection</td><td align="left">匹配元素中被用户选中或处于高亮状态的部分</td></tr><tr><td align="left">E:out-of-range</td><td align="left">用于标签的值在指定区间之外时显示的样式</td></tr><tr><td align="left">E:in-range</td><td align="left">用于标签的值在指定区间之内时显示的样式</td></tr><tr><td align="left">E:optional</td><td align="left">用于匹配可选的输入元素</td></tr><tr><td align="left">E:required</td><td align="left">用于匹配设置了”required”属性的元素</td></tr><tr><td align="left">E:valid E:invalid</td><td align="left">匹配输入值为合法、非法的元素</td></tr></tbody></table><blockquote><h4 id="其它CSS3选择器"><a href="#其它CSS3选择器" class="headerlink" title="其它CSS3选择器"></a>其它CSS3选择器</h4></blockquote><ul><li>E~F:<strong>通用兄弟元素选择器</strong></li></ul><p>选择匹配F的所有元素,且匹配元素位于匹配E的元素后面</p><ul><li>E:not(s) :<strong>否定伪类选择器</strong></li></ul><p>选择匹配E的所有元素, 且过滤掉匹配s选择符的任意元素。 E: not(s)选择器相当于二次过滤, 适合精确选择元素。</p><ul><li>E:target:<strong>目标伪类选择器类型</strong></li></ul><p>选择器匹配E的所有元素,且匹配元素被相关URL指向 。该选择器是动态选择器, 只有当存在的URL指向该匹配的元素时,样式效果才能够起效。                 .</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置按钮的样式</title>
      <link href="/2019/09/06/css1/"/>
      <url>/2019/09/06/css1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_36607646/article/details/77862619" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><p> <a href="https://www.runoob.com/cssref/css-reference.html" target="_blank" rel="noopener"><strong>css属性访问链接</strong></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btnstyle</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">width</span>: <span class="number">86px</span>;<span class="comment">/*按钮控件的宽度*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">text-align</span>: center;<span class="comment">/*按钮控件中文本居中显示*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">100%</span>;<span class="comment">/*用百分比设置行高*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">0.5em</span>;<span class="comment">/*文本顶部的内边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">2em</span>;<span class="comment">/*文本右侧的内边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">0.55em</span>;<span class="comment">/*文本底部的内边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">2em</span>;<span class="comment">/*文本左侧的内边距*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Arial Black"</span>, Gadget, sans-serif;<span class="comment">/*字体*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;<span class="comment">/*字体大小*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-style</span>: normal;<span class="comment">/*字体样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-variant</span>: normal;<span class="comment">/*小写字母*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-weight</span>: normal;<span class="comment">/*文本不需要加粗*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">text-decoration</span>: none;<span class="comment">/*文本不需要下划线等*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0px</span>;<span class="comment">/*外边框的距离*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">2px</span>;<span class="comment">/*外边框的距离*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">0px</span>;<span class="comment">/*外边框的距离*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">2px</span>;<span class="comment">/*外边框的距离*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">vertical-align</span>: text-bottom;<span class="comment">/*图像放在文本下面*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>: inline-block;<span class="comment">/*段落内生出内框*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">cursor</span>: pointer;<span class="comment">/*鼠标的形状*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">zoom</span>:<span class="number">1</span>;<span class="comment">/*normal|number 设置或检索对象的缩放比例(是IE浏览器的专有属性，Firefox等浏览器不支撑)  */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">outline-width</span>:medium;<span class="comment">/*整个轮廓的宽度*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">outline-color</span>:inherit;<span class="comment">/*轮廓的颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-size-adjust</span>:none;<span class="comment">/*number|none|inherit 控制字体大小  (只有Firefox支持)*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">font-stretch</span>:normal;<span class="comment">/*允许你使文字变宽或变窄 (目前没有主流浏览器支持font-Stretch属性)*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top-left-radius</span>:<span class="number">0.5em</span>;<span class="comment">/*圆角边框弧度*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top-right-radius</span>:<span class="number">0.5em</span>;<span class="comment">/*圆角边框弧度*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-bottom-left-radius</span>:<span class="number">0.5em</span>;<span class="comment">/*圆角边框弧度*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-bottom-right-radius</span>:<span class="number">0.5em</span>;<span class="comment">/*圆角边框弧度*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,0,0,0.2);<span class="comment">/*给按钮增加阴影*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fefee9</span>;<span class="comment">/*设置文本的颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top-color</span>:<span class="number">#da7c0c</span>;<span class="comment">/*边框的颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-right-color</span>:<span class="number">#da7c0c</span>;<span class="comment">/*边框的颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-bottom-color</span>:<span class="number">#da7c0c</span>;<span class="comment">/*边框的颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-left-color</span>:<span class="number">#da7c0c</span>;<span class="comment">/*边框的颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top-width</span>:<span class="number">1px</span>;<span class="comment">/*边框的粗细*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-right-width</span>:<span class="number">1px</span>;<span class="comment">/*边框的粗细*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-bottom-width</span>:<span class="number">1px</span>;<span class="comment">/*边框的粗细*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-left-width</span>:<span class="number">1px</span>;<span class="comment">/*边框的粗细*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-top-style</span>:solid;<span class="comment">/*边框的样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-right-style</span>:solid;<span class="comment">/*边框的样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-bottom-style</span>:solid;<span class="comment">/*边框的样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-left-style</span>:solid;<span class="comment">/*边框的样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-image</span>:none;<span class="comment">/*背景图片*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-attachment</span>:scroll;<span class="comment">/*背景图片是否移动*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-repeat</span>:repeat;<span class="comment">/*允许重复*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-position-x</span>:<span class="number">0%</span>;<span class="comment">/*背景的x轴坐标*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-position-y</span>:<span class="number">0%</span>;<span class="comment">/*背景的y轴坐标*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-size</span>:auto;<span class="comment">/*背景图片的尺寸*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-origin</span>:padding-box;<span class="comment">/*背景图像相对于内边距框来定位*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-clip</span>:padding-box;<span class="comment">/*背景被裁剪到内边距框*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-color</span>:<span class="number">#f78d1d</span>;<span class="comment">/*背景颜色*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL常用语法</title>
      <link href="/2019/09/06/sql3/"/>
      <url>/2019/09/06/sql3/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>查看数据库的编码</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%char%'</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>修改字符编码(根据其上所列V</strong>ariable_name进行编码设置<strong>)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> character_set_server=utf8;</span><br><span class="line"><span class="keyword">set</span> character_set_database=utf8;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接数据库常用配置</title>
      <link href="/2019/09/06/sql1/"/>
      <url>/2019/09/06/sql1/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>数据库连接字符编码</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url =<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Value&#39;0000-00-00&#39;异常解决方法</title>
      <link href="/2019/09/06/sql4/"/>
      <url>/2019/09/06/sql4/</url>
      
        <content type="html"><![CDATA[<p><strong>java.sql.SQLException: Value   ‘0000-00-00 ‘异常解决方法</strong></p><p><strong>原因:</strong></p><p>数据库查询的timestamp时间字段数据内容为0000-00-00,Java实体类Date映射不成功,默认是抛出异常,所以直接赋值为null.</p><p><strong>解决办法:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=<span class="string">"jdbc:mysql://localhost:3306/test?zeroDateTimeBehavior=convertToNull"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据某个字段将多条记录的某个字段拼接成一个字段</title>
      <link href="/2019/09/06/mysql8/"/>
      <url>/2019/09/06/mysql8/</url>
      
        <content type="html"><![CDATA[<p> 如下表所示:</p><p><img src="/2019/09/06/mysql8/1.png" alt><img src="/2019/09/06/mysql8/2.png" alt></p><p><img src="/2019/09/06/mysql8/3.png" alt>``</p><p>SQL代码：(注意：<em><strong>group by</strong></em> 进行分组)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME,GROUP_CONCAT(r.roleName)roleName FROM users u </span><br><span class="line">JOIN user_role ur ON u.id=ur.uid JOIN role r ON ur.rid=r.id  GROUP BY u.id</span><br></pre></td></tr></table></figure><a id="more"></a><p>查询效果：</p><p><img src="/2019/09/06/mysql8/4.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL字符串函数-字符串截取</title>
      <link href="/2019/09/06/mysql7/"/>
      <url>/2019/09/06/mysql7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/duanc/archive/2018/04/09/8760372.html" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li>left(name,4)截取左边的4个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="number">201809</span>,<span class="number">4</span>) 年   <span class="comment">-- 2018</span></span><br></pre></td></tr></table></figure><ul><li>right(name,2)截取右边的2个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="number">201809</span>,<span class="number">2</span>) 月份 <span class="comment">-- 09</span></span><br></pre></td></tr></table></figure><ul><li>SUBSTRING(name,5,3) 截取name这个字段从第五个字符开始,只截取之后的3个字符</li></ul><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'成都融资事业部'</span>,<span class="number">5</span>,<span class="number">3</span>)  <span class="comment">-- 事业部</span></span><br></pre></td></tr></table></figure><ul><li>SUBSTRING(name,3) 截取name这个字段从第三个字符开始,之后的所有的字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'成都融资事业部'</span>,<span class="number">3</span>) <span class="comment">-- 融资事业部</span></span><br></pre></td></tr></table></figure><ul><li>SUBSTRING(name, -4) 截取name这个字段的第 4 个字符位置（倒数）开始取，直到结束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'成都融资事业部'</span>,<span class="number">-4</span>) <span class="comment">-- 资事业部</span></span><br></pre></td></tr></table></figure><ul><li>SUBSTRING(name, -4，2) 截取name这个字段的第 4 个字符位置（倒数）开始取，只截取之后的2个字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'成都融资事业部'</span>,<span class="number">-4</span>,<span class="number">2</span>) <span class="comment">-- 资事</span></span><br></pre></td></tr></table></figure><p><strong>注意:我们注意到在函数 <code>substring(str,pos, len)</code></strong>中,pos 可以是负值,但 len 不能取负值。</p><ul><li>substring_index(‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">www.baidu.com&#39;</a>, ‘.’, 2) 截取第二个 ‘.’ 之前的所有字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> substring_index(<span class="string">'www.baidu.com'</span>, <span class="string">'.'</span>, <span class="number">2</span>) <span class="comment">-- www.baidu</span></span><br></pre></td></tr></table></figure><ul><li>substring_index(‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">www.baidu.com&#39;</a>, ‘.’, -2) 截取第二个 ‘.’ （倒数）之后的所有字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT substring_index(&apos;www.baidu.com&apos;, &apos;.&apos;, -2) -- baidu.com</span><br></pre></td></tr></table></figure><ul><li>SUBSTR(name, 1, CHAR_LENGTH(name)-3) 截取name字段,取除name字段后三位的所有字符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'成都融资事业部'</span>, <span class="number">1</span>, <span class="keyword">CHAR_LENGTH</span>(<span class="string">'成都融资事业部'</span>)<span class="number">-3</span>)  <span class="comment">-- 成都融资</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务-隔离级别</title>
      <link href="/2019/09/06/mysql5/"/>
      <url>/2019/09/06/mysql5/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="数据库事务具有ACID这4个特性"><a href="#数据库事务具有ACID这4个特性" class="headerlink" title="数据库事务具有ACID这4个特性"></a>数据库事务具有ACID这4个特性</h4></blockquote><ul><li>A：Atomic,原子性,将所有SQL作为原子工作单元执行,要么全部执行,要么全部不执行;</li><li>C：Consistent,一致性,事务完成后,所有数据的状态都是一致的，即A账户只要减去了100,B账户则必定加上了100;</li><li>I：Isolation,隔离性,如果有多个事务并发执行,每个事务作出的修改必须与其他事务隔离;</li><li>D：Duration,持久性,即事务完成后,对数据库数据的修改被持久化存储.</li></ul><a id="more"></a><blockquote><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4></blockquote><p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。</p><p>SQL标准定义了4种隔离级别，分别对应可能出现的数据不一致的情况：</p><table><thead><tr><th align="center">Isolation Level</th><th align="center">脏读（Dirty Read）</th><th align="center">不可重复读（Non Repeatable Read）</th><th align="center">幻读（Phantom Read）</th></tr></thead><tbody><tr><td align="center">Read Uncommitted</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center">Read Committed</td><td align="center">-</td><td align="center">Yes</td><td align="center">Yes</td></tr><tr><td align="center">Repeatable Read</td><td align="center">-</td><td align="center">-</td><td align="center">Yes</td></tr><tr><td align="center">Serializable</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><ul><li><h5 id="Read-Uncommitted"><a href="#Read-Uncommitted" class="headerlink" title="Read Uncommitted"></a>Read Uncommitted</h5><p>是隔离级别最低的一种事务级别。<strong>在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据</strong>，这就是<strong>脏读</strong>（Dirty Read）。</p></li></ul><p>我们来看一个例子。</p><p>首先，我们准备好<code>students</code>表的数据，该表仅一行记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from students;</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| id | name  |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">|  1 | Alice |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p><table><thead><tr><th align="center">时刻</th><th align="left">事务A</th><th align="left">事务B</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td></tr><tr><td align="center">2</td><td align="left">BEGIN;</td><td align="left">BEGIN;</td></tr><tr><td align="center">3</td><td align="left">UPDATE students SET name = ‘Bob’ WHERE id = 1;</td><td align="left"></td></tr><tr><td align="center">4</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="center">5</td><td align="left">ROLLBACK;</td><td align="left"></td></tr><tr><td align="center">6</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="center">7</td><td align="left"></td><td align="left">COMMIT;</td></tr></tbody></table><p> <a href="http://liaoxuefeng.gitee.io/git-resources/read-uncommitted.mp4" target="_blank" rel="noopener"><strong>video1</strong></a></p><p>当事务A执行完第3步时，它更新了<code>id=1</code>的记录，但并未提交，而事务B在第4步读取到的数据就是未提交的数据。随后，事务A在第5步进行了回滚，事务B再次读取<code>id=1</code>的记录，发现和上一次读取到的数据不一致，这就是脏读。可见，在Read Uncommitted隔离级别下，一个事务可能读取到另一个事务更新但未提交的数据，这个数据有可能是脏数据。</p><ul><li><h5 id="Read-Committed"><a href="#Read-Committed" class="headerlink" title="Read Committed"></a>Read Committed</h5><p>隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。</p></li></ul><p><strong>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致</strong>。</p><p>我们仍然先准备好<code>students</code>表的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from students;</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| id | name  |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">|  1 | Alice |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p><table><thead><tr><th align="center">时刻</th><th align="left">事务A</th><th align="left">事务B</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td></tr><tr><td align="center">2</td><td align="left">BEGIN;</td><td align="left">BEGIN;</td></tr><tr><td align="center">3</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="center">4</td><td align="left">UPDATE students SET name = ‘Bob’ WHERE id = 1;</td><td align="left"></td></tr><tr><td align="center">5</td><td align="left">COMMIT;</td><td align="left"></td></tr><tr><td align="center">6</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="center">7</td><td align="left"></td><td align="left">COMMIT;</td></tr></tbody></table><p> <a href="http://liaoxuefeng.gitee.io/git-resources/read-committed.mp4" target="_blank" rel="noopener"><strong>video2</strong></a></p><p>当事务B第一次执行第3步的查询时，得到的结果是<code>Alice</code>，随后，由于事务A在第4步更新了这条记录并提交，所以，事务B在第6步再次执行同样的查询时，得到的结果就变成了<code>Bob</code>，因此，在Read Committed隔离级别下，事务不可重复读同一条记录，因为很可能读到的结果不一致。</p><ul><li><h5 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h5><p>一个事务可能会遇到幻读（Phantom Read）的问题。</p></li></ul><p><code>幻读</code><strong>是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。</strong></p><p>我们仍然先准备好<code>students</code>表的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from students;</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">| id | name  |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">|  1 | Alice |</span><br><span class="line">+<span class="comment">----+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec))</span><br></pre></td></tr></table></figure><p>然后，分别开启两个MySQL客户端连接，按顺序依次执行事务A和事务B：</p><table><thead><tr><th align="center">时刻</th><th align="left">事务A</th><th align="left">事务B</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td><td align="left">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td></tr><tr><td align="center">2</td><td align="left">BEGIN;</td><td align="left">BEGIN;</td></tr><tr><td align="center">3</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 99;</td></tr><tr><td align="center">4</td><td align="left">INSERT INTO students (id, name) VALUES (99, ‘Bob’);</td><td align="left"></td></tr><tr><td align="center">5</td><td align="left">COMMIT;</td><td align="left"></td></tr><tr><td align="center">6</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 99;</td></tr><tr><td align="center">7</td><td align="left"></td><td align="left">UPDATE students SET name = ‘Alice’ WHERE id = 99;</td></tr><tr><td align="center">8</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 99;</td></tr><tr><td align="center">9</td><td align="left"></td><td align="left">COMMIT;</td></tr></tbody></table><p> <a href="http://liaoxuefeng.gitee.io/git-resources/repeatable-read.mp4" target="_blank" rel="noopener"><strong>video</strong></a></p><p>事务B在第3步第一次读取<code>id=99</code>的记录时，读到的记录为空，说明不存在<code>id=99</code>的记录。随后，事务A在第4步插入了一条<code>id=99</code>的记录并提交。事务B在第6步再次读取<code>id=99</code>的记录时，读到的记录仍然为空，但是，事务B在第7步试图更新这条不存在的记录时，竟然成功了，并且，事务B在第8步再次读取<code>id=99</code>的记录时，记录出现了。可见，幻读就是没有读到的记录，以为不存在，但其实是可以更新成功的，并且，更新成功后，再次读取，就出现了。</p><ul><li><h5 id="Serializable是最严格的隔离级别"><a href="#Serializable是最严格的隔离级别" class="headerlink" title="Serializable是最严格的隔离级别"></a>Serializable是最严格的隔离级别</h5><p><strong>在Serializable隔离级别下，所有事务按照次序依次执行</strong>，因此，脏读、不可重复读、幻读都不会出现。虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以<strong>效率会大大下降</strong>，应用程序的<strong>性能会急剧降低</strong>。如果没有特别重要的情景,<strong>一般都不会使用Serializable隔离级别</strong>。</p><blockquote><h5 id="默认隔离级别"><a href="#默认隔离级别" class="headerlink" title="默认隔离级别"></a><strong>默认隔离级别</strong></h5></blockquote></li></ul><p>如果没有指定隔离级别，数据库就会使用默认的隔离级别<strong>。在MySQL中，如果使用</strong><code>InnoDB</code><strong>，默认的隔离级别是</strong><code>Repeatable Read</code>。</p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用sql</title>
      <link href="/2019/09/06/mysql6/"/>
      <url>/2019/09/06/mysql6/</url>
      
        <content type="html"><![CDATA[<ul><li><h6 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h6></li></ul><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<strong><code>REPLACE</code></strong>语句，这样就不必先查询，再决定是否先删除再插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>若<code>id=1</code>的记录不存在，<code>REPLACE</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被删除，然后再插入新记录。</p><ul><li><h6 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h6></li></ul><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">name</span>=<span class="string">'小明'</span>, gender=<span class="string">'F'</span>, score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被更新，更新的字段由<code>UPDATE</code>指定。</p><ul><li><h6 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h6></li></ul><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，不执行任何操作。</p><ul><li><h6 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h6></li></ul><p>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合<code>CREATE TABLE</code>和<code>SELECT</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students_of_class1 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class_id=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>新创建的表结构和<code>SELECT</code>使用的表结构<strong>完全一致</strong>。</p><ul><li><h6 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h6></li></ul><p>如果查询结果集需要写入到表中，可以结合<code>INSERT</code>和<code>SELECT</code>，将<code>SELECT</code>语句的结果集直接插入到指定表中。</p><p>例如，创建一个统计成绩的表<code>statistics</code>，记录各班的平均成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">statistics</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    class_id <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    average <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们就可以用一条语句写入各班的平均成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">statistics</span> (class_id, average) <span class="keyword">SELECT</span> class_id, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure><p>确保<code>INSERT</code>语句的列和<code>SELECT</code>语句的列能一一对应，就可以在<code>statistics</code>表中直接保存查询的结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from statistics;</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">| id | class_id | average      |</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">|  1 |        1 |         86.5 |</span><br><span class="line">|  2 |        2 | 73.666666666 |</span><br><span class="line">|  3 |        3 | 88.333333333 |</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql生成任意指定两时间范围内的日期列表（三种方法）</title>
      <link href="/2019/09/06/mysql4/"/>
      <url>/2019/09/06/mysql4/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4></blockquote><p><a href="https://blog.csdn.net/Dai_Aixy/article/details/83144619" target="_blank" rel="noopener"><strong>Mysql生成任意指定两时间范围内的日期列表（三种方法）</strong></a></p><p><a href="https://blog.csdn.net/boenwan/article/details/76268739" target="_blank" rel="noopener"><strong>mysql 给定起止日期获取之间的连续日期</strong></a></p><blockquote><h4 id="创建一个临时的日历表"><a href="#创建一个临时的日历表" class="headerlink" title="创建一个临时的日历表"></a>创建一个临时的日历表</h4></blockquote><pre><code>DELIMITER $$DROP PROCEDURE IF EXISTS create_calendar $$CREATE PROCEDURE create_calendar (s_date DATE, e_date DATE)BEGIN    SET @createSql = &apos;CREATE TABLE IF NOT EXISTS calendar (                      `date` date NOT NULL,               UNIQUE KEY `unique_date` (`date`) USING BTREE                   )ENGINE=InnoDB DEFAULT CHARSET=utf8&apos;;     prepare stmt from @createSql;     execute stmt;     WHILE s_date &lt;= e_date DO        INSERT IGNORE INTO calendar VALUES (DATE(s_date)) ;        SET s_date = s_date + INTERVAL 1 DAY ;    END WHILE ; END$$DELIMITER ;CALL create_calendar (&apos;2018-03-01&apos;, &apos;2018-12-30&apos;);</code></pre><a id="more"></a><p><strong>总结:生成一张临时表,里面存放着你自己指定的时间范围内的所有日期。生成临时表，根据自己业务需求与数据进行各种操作得出某段时间范围内日期齐全的数据。</strong></p><blockquote><h4 id="变量控制-指定数据条数-生成连续的数字或日期"><a href="#变量控制-指定数据条数-生成连续的数字或日期" class="headerlink" title="(变量控制)指定数据条数,生成连续的数字或日期"></a>(变量控制)指定数据条数,生成连续的数字或日期</h4></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">DATE_SUB</span>(<span class="keyword">NOW</span>(), <span class="built_in">INTERVAL</span> xc <span class="keyword">MONTH</span>), <span class="string">'%Y-%m'</span>) <span class="keyword">as</span> <span class="built_in">date</span></span><br><span class="line"><span class="keyword">FROM</span> ( </span><br><span class="line">            <span class="keyword">SELECT</span> @xi:=@xi+<span class="number">1</span> <span class="keyword">as</span> xc <span class="keyword">from</span> </span><br><span class="line">            (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">5</span>) xc1, </span><br><span class="line">            (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">5</span>) xc2,  </span><br><span class="line">            (<span class="keyword">SELECT</span> @xi:=<span class="number">0</span>) xc0 </span><br><span class="line">) xcxc</span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/mysql4/sq1.png" alt><strong>总结：在如上的例子当中,涉及到的知识点是变量,DATE_SUB(),DATE_FORMAT().使用以上方法的好处就是不用创建存储过程，也不涉及到任何表。缺点就是数据的条数控制并不灵活,不能和用户之间形成互动,即不能自定义日期区间,只能控制数据条数。</strong></p><blockquote><h4 id="利用数据量大的表做操作"><a href="#利用数据量大的表做操作" class="headerlink" title="利用数据量大的表做操作"></a>利用数据量大的表做操作</h4></blockquote><ul><li>创建一个数字辅助表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`manhour_record`</span> (</span><br><span class="line">  <span class="string">`key`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`key`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'数字辅助表'</span>;</span><br></pre></td></tr></table></figure><ul><li>创建一个存储过程为数字辅助表增加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER=<span class="string">`root`</span>@<span class="string">`%`</span> <span class="keyword">PROCEDURE</span> <span class="string">`create_nums`</span>(cnt <span class="built_in">int</span> <span class="keyword">unsigned</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">declare</span> s <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">truncate</span> <span class="keyword">table</span> manhour_record;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> manhour_recordselect s;</span><br><span class="line">    while s*2&lt;=cnt do</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">insert</span> <span class="keyword">into</span> nums <span class="keyword">select</span> <span class="string">`key`</span>+s <span class="keyword">from</span> manhour_record;</span><br><span class="line">            <span class="keyword">set</span> s=s*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><ul><li>执行存储过程，增加1-50000进入数字辅助表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> create_nums(<span class="number">50000</span>);</span><br></pre></td></tr></table></figure><ul><li>代码编写</li></ul><p><img src="/2019/09/06/mysql4/sq2.png" alt></p><blockquote><h4 id="oracle-求两个日期之间的所有日期"><a href="#oracle-求两个日期之间的所有日期" class="headerlink" title="oracle 求两个日期之间的所有日期"></a>oracle 求两个日期之间的所有日期</h4></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TO_CHAR((<span class="keyword">TO_DATE</span>(<span class="string">'2019-05-28'</span>, <span class="string">'yyyy-MM-dd'</span>) + (<span class="keyword">ROWNUM</span> - <span class="number">1</span>)), <span class="string">'yyyy-MM-dd'</span>) DT</span><br><span class="line">  <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> <span class="keyword">ROWNUM</span> &lt;=</span><br><span class="line">(<span class="keyword">TO_DATE</span>(<span class="string">'2019-05-31'</span>, <span class="string">'yyyy-MM-dd'</span>) - <span class="keyword">TO_DATE</span>(<span class="string">'2019-05-28'</span>, <span class="string">'yyyy-MM-dd'</span>) + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql的Rownum使用示例</title>
      <link href="/2019/09/06/mysql3/"/>
      <url>/2019/09/06/mysql3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/a80c51/article/details/80531291" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li><strong>显示当前查询结果的行号</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  @<span class="keyword">rownum</span> := @<span class="keyword">rownum</span> +<span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">rownum</span>,e.* <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> @<span class="keyword">rownum</span> := <span class="number">0</span>) r,employee e</span><br></pre></td></tr></table></figure><p> <img src="/2019/09/06/mysql3/s1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于时间的一些查询</title>
      <link href="/2019/09/06/mysql2/"/>
      <url>/2019/09/06/mysql2/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="查询最近的一条信息"><a href="#查询最近的一条信息" class="headerlink" title="查询最近的一条信息"></a><strong>查询最近的一条信息</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">1</span>; //limit 1 提高查询效率，避免全表扫描</span><br></pre></td></tr></table></figure><blockquote><h5 id="查询今天"><a href="#查询今天" class="headerlink" title="查询今天"></a><strong>查询今天</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">DATE_FORMAT</span>( create_time,<span class="string">'%Y-%m-%d'</span>) = <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(), <span class="string">'%Y-%m-%d'</span>);</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="built_in">DATE</span>(create_time) =<span class="built_in">DATE</span>(<span class="keyword">NOW</span>());</span><br><span class="line"></span><br><span class="line">方法三：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">TO_DAYS</span>(create_time) =<span class="keyword">TO_DAYS</span>(<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>DATE_FORMAT(date,format)函数用于以不同的格式显示日期/时间数据</p></li><li><p>date参数是合法的日期。</p></li><li><p>format规定日期/时间的输出格式</p></li><li><p>NOW()函数返回当前的日期和时间</p></li><li><p>TO_DAYS(date)  返回当前日期的毫秒数</p></li><li><p>DATE(date) 提取日期或日期/时间表达式的日期部分</p></li></ul><blockquote><h5 id="计算两个日期之间的年-月-日相差"><a href="#计算两个日期之间的年-月-日相差" class="headerlink" title="计算两个日期之间的年/月/日相差"></a><strong>计算两个日期之间的年/月/日相差</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">YEAR</span>/<span class="keyword">MONTH</span>/<span class="keyword">DAY</span>,<span class="string">'2003-02-01'</span>,<span class="string">'2003-05-01'</span>);</span><br></pre></td></tr></table></figure><ul><li>TIMESTAMPDIFF(interval,datetime_expr1,datetime_expr2) </li></ul><p>返回日期或日期时间表达式datetime_expr1 和datetime_expr2the 之间的整数差(注意日期大小不可颠倒)</p><blockquote><h5 id="查询昨天"><a href="#查询昨天" class="headerlink" title="查询昨天"></a><strong>查询昨天</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CURDATE()-1  //参考查询今天的方法 在今天的天数是-1</span><br></pre></td></tr></table></figure><ul><li>CURDATE()  返回当前的日期</li></ul><blockquote><h5 id="查询一个星期内-一个月内的数据的数据"><a href="#查询一个星期内-一个月内的数据的数据" class="headerlink" title="查询一个星期内/一个月内的数据的数据"></a><strong>查询一个星期内/一个月内的数据的数据</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">DATE_SUB</span>(<span class="keyword">CURDATE</span>(),<span class="built_in">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>/<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>) &lt;=<span class="built_in">DATE</span>(create_time) <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li>DATE_SUB(date,INTERVAL expr unit) 从日期里减去指定的时间间隔</li></ul><blockquote><h5 id="返回date的星期索引-1-Sunday-2-Monday-…-7-Saturday"><a href="#返回date的星期索引-1-Sunday-2-Monday-…-7-Saturday" class="headerlink" title="返回date的星期索引(1 = Sunday, 2 = Monday, … 7 = Saturday)"></a><strong>返回date的星期索引(1 = Sunday, 2 = Monday, … 7 = Saturday)</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAYOFWEEK</span>(create_time) <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="给日期添加指定的时间间隔"><a href="#给日期添加指定的时间间隔" class="headerlink" title="给日期添加指定的时间间隔"></a><strong>给日期添加指定的时间间隔</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">DATE_ADD</span>(create_time,<span class="built_in">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>) &lt;= <span class="built_in">DATE</span>(<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure><ul><li>DATE_ADD(date,INTERVAL expr unit)  给日期添加指定的时间间隔</li></ul><blockquote><h5 id="返回两个日期之间的天数"><a href="#返回两个日期之间的天数" class="headerlink" title="返回两个日期之间的天数"></a><strong>返回两个日期之间的天数</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">DATEDIFF</span>(<span class="keyword">NOW</span>(),create_time)=<span class="number">0</span>  //<span class="number">0</span>代表查询的是当天,<span class="number">1</span> 查询的就是昨天..</span><br></pre></td></tr></table></figure><ul><li>DATEDIFF(expr1,expr2) 返回两个日期之间的天数</li></ul><blockquote><h5 id="查询本季度数据"><a href="#查询本季度数据" class="headerlink" title="查询本季度数据"></a><strong>查询本季度数据</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name  <span class="keyword">where</span> <span class="keyword">QUARTER</span>(create_time)=<span class="keyword">QUARTER</span>(<span class="keyword">NOW</span>());</span><br><span class="line">查询上季度数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name  <span class="keyword">where</span> <span class="keyword">QUARTER</span>(create_time)=<span class="keyword">QUARTER</span>(<span class="keyword">NOW</span>())<span class="number">-1</span>;</span><br><span class="line">或者:</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name   <span class="keyword">where</span> <span class="keyword">QUARTER</span>(create_time)=<span class="keyword">QUARTER</span>(<span class="keyword">DATE_SUB</span>(<span class="keyword">NOW</span>(),<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">QUARTER</span>));</span><br></pre></td></tr></table></figure><ul><li>QUARTER(date)    1=1季度(1-2-3月)…</li></ul><blockquote><h5 id="查询本年数据"><a href="#查询本年数据" class="headerlink" title="查询本年数据"></a><strong>查询本年数据</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name  <span class="keyword">where</span> <span class="keyword">YEAR</span>(create_time)=<span class="keyword">YEAR</span>(<span class="keyword">NOW</span>());</span><br><span class="line">查询上年数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name  <span class="keyword">where</span> <span class="keyword">YEAR</span>(create_time)=<span class="keyword">YEAR</span>(<span class="keyword">NOW</span>())<span class="number">-1</span>;</span><br><span class="line">或者:</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name   <span class="keyword">where</span> <span class="keyword">YEAR</span>(create_time)=<span class="keyword">YEAR</span>(<span class="keyword">date_sub</span>(<span class="keyword">NOW</span>(),<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">YEAR</span>));</span><br></pre></td></tr></table></figure><ul><li>YEAR(date) 获取日期的年份  MONTH(date) 获取日期的月份 Day(date) 获取日期的天数  TIME(NOW())获取时间</li></ul><blockquote><h5 id="查询当前这周的数据"><a href="#查询当前这周的数据" class="headerlink" title="查询当前这周的数据"></a><strong>查询当前这周的数据</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name   <span class="keyword">WHERE</span> <span class="keyword">YEARWEEK</span>(<span class="keyword">date_format</span>(create_time,<span class="string">'%Y-%m-%d'</span>)) = <span class="keyword">YEARWEEK</span>(<span class="keyword">NOW</span>());</span><br></pre></td></tr></table></figure><blockquote><h5 id="查询距离当前现在6个月的数据"><a href="#查询距离当前现在6个月的数据" class="headerlink" title="查询距离当前现在6个月的数据"></a><strong>查询距离当前现在6个月的数据</strong></h5></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name  <span class="keyword">where</span> create_time <span class="keyword">between</span> <span class="keyword">date_sub</span>(<span class="keyword">NOW</span>(),<span class="built_in">interval</span> <span class="number">6</span> <span class="keyword">MONTH</span>) <span class="keyword">and</span> <span class="keyword">NOW</span>();</span><br></pre></td></tr></table></figure><ul><li><p>日期：<strong>CURDATE()=CURRENT_DATE()= DATE(NOW())</strong></p></li><li><p>日期+时间：</p><p><strong>NOW()=SYSDATE()=CURRENT_TIMESTAMP()=LOCALTIME()=LOCALTIMESTAMP()</strong></p></li><li><p>时间：<strong>CURTIME()=CURRENT_TIME()=TIME(NOW())</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Case when then end</title>
      <link href="/2019/09/06/mysql1/"/>
      <url>/2019/09/06/mysql1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>已知商品评论表如下图展示：</p><p>表结构：<img src="/2019/09/06/mysql1/c3.png" alt></p></li></ul><p><img src="/2019/09/06/mysql1/c1.png" alt></p><p><strong>统计每种商品下的好坏留言的人数：</strong></p><ul><li><p>思路：先进行商品分类–》case when then 进行评分的判定–》count统计数量。</p></li><li><p>代码如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT pro.pid,pro.pname, </span><br><span class="line">            COUNT(CASE WHEN p.prscore=5 THEN 1 END)best, </span><br><span class="line">            COUNT(CASE WHEN p.prscore=4 THEN 1 END)good,</span><br><span class="line">            COUNT(CASE WHEN p.prscore=3 THEN 1 END)common, </span><br><span class="line">            COUNT(CASE WHEN p.prscore&lt;=2 THEN 1 END)bad </span><br><span class="line">FROM product_review p JOIN products pro ON p.pid =pro.pid   GROUP BY p.pid</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>效果显示：</li></ul><p><img src="/2019/09/06/mysql1/c2.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>You have not concluded your merge</title>
      <link href="/2019/09/06/github5/"/>
      <url>/2019/09/06/github5/</url>
      
        <content type="html"><![CDATA[<p> <strong>fatal: You have not concluded your merge (MERGE_HEAD exists)</strong></p><p><a href="https://blog.csdn.net/feng2qing/article/details/56496441" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><p><strong>报错原因：</strong>【pull下来的代码自动合并失败】</p><p><strong>从远程获取最新版本到本地有两种方式：</strong></p><ul><li><code>Git fetch</code>:只是从远程获取最新版本到本地,不会<code>merge</code>(合并)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master           //从远程的origin的master主分支上获取最新版本到origin/master分支上</span><br><span class="line">git log -p master..origin/master  //比较本地的master分支和origin/  master分支的区别</span><br><span class="line">git merge origin/master           //合并</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><code>Git pull</code>:从远程获取最新版本并<code>merge</code>(合并)到本地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master  //相当于进行了 git fetch 和 git merge两部操作</span><br></pre></td></tr></table></figure><p> <strong>实际工作中,可能<code>git fetch</code>更好一些, 因为在<code>merge</code>前,可以根据实际情况决定是否【merge】</strong></p><ul><li><p>解决方法：</p><ul><li><p><strong>方法一:保留本地的更改,中止合并-&gt;重新合并-&gt;重新拉取</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br><span class="line">git reset --merge</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li><p><strong>方法二:舍弃本地代码,远端版本覆盖本地版本(慎重)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git fetch</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础学习</title>
      <link href="/2019/09/06/git3/"/>
      <url>/2019/09/06/git3/</url>
      
        <content type="html"><![CDATA[<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p>1.<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰-git教程</a></p><p>2.<a href="http://note.youdao.com/noteshare?id=4653994abae090b764e7fb65a039a7fe&sub=4B72DD531A444C5E97EB28F6A969D01D" target="_blank" rel="noopener">git学习(廖雪峰版教程)-可借鉴笔记</a></p><h4 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h4><ol><li>集中式开发(CVS及SVN)：是将项目集中存放在中央服务器中，在工作的时候，大家只在自己电脑上操作，从同一个地方下载最新版本，然后开始工作，做完的工作再提交给中央服务器保存。这种方式需要联网.</li></ol><p><img src="/2019/09/06/git3/import1.png" alt></p><p>2.分布式开发(Git)：通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它也一样干活，只是交换修改不方便而已。而每一台电脑有各自独立的开发环境(每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了)，不需要联网，本地直接运行，相对集中式安全系数高很多。</p><a id="more"></a><p> <img src="/2019/09/06/git3/import2.png" alt></p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。要使用Git，第一步当然是安装Git了.</p><ul><li><h4 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h4></li></ul><p>首先，你可以试着输入<code>git</code>，看看系统有没有安装Git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line">The program &apos;git&apos; is currently not installed. You can install it by typing:</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p><p>如果你碰巧用Debian或Ubuntu Linux，通过一条<code>sudo apt-get install git</code>就可以直接完成Git的安装，非常简单。</p><p>老一点的Debian或Ubuntu Linux，要把命令改为<code>sudo apt-get install git-core</code>，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫<code>git-core</code>了。由于Git名气实在太大，后来就把GNU Interactive Tools改成<code>gnuit</code>，<code>git-core</code>正式改为<code>git</code>。如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：<code>./config</code>，<code>make</code>，<code>sudo make install</code>这几个命令安装就好了。</p><ul><li><h4 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h4></li></ul><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p><p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/" target="_blank" rel="noopener">http://brew.sh/</a>。</p><p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p><p><img src="/2019/09/06/git3/import0.jpg" alt></p><p>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p><ul><li><h4 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h4></li></ul><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，（网速慢请移步<a href="https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit" target="_blank" rel="noopener">国内镜像</a>），然后按默认选项安装即可。</p><p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p><img src="/2019/09/06/git3/1.jpg" alt></p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：<strong>你的名字和Email地址</strong>。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h4 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区(<code>.git所在的目录下，除了.git之外的其他文件都是在工作区内</code>)，而是Git的版本库(<code>这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”</code>) Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区(<code>用add命令放进来文件的位置</code>)，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code> (<code>表示当前版本，上一个版本就是HEAD^(可以写为HEAD~1)，上上一个版本就是HEAD^^^^^(可以写为HEAD~5)</code>)</p><p><img src="/2019/09/06/git3/import8.png" alt></p><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><ul><li><p>如果文件在工作区被编辑，对应的status状态就是  Changes not staged for commit</p></li><li><p>如果工作区新增文件，则对应的status状态就是  Untracked files</p></li><li><p>如果文件被add后，对应的status状态就是 Changes to be committed</p></li><li><p>多次add后的文件都放在暂存区，最后一次性全部提交。提交后的status状态就是  nothing to commit, working tree clean</p></li></ul><p>这时候工作区就是干净的，暂存区就没有任何内容了。</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>只要注册一个GitHub账号，就可以免费获得Git远程仓库.</p><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p><p>第1步：创建SSH Key。在用户主目录(在windows中就是 C:\Users\Administrator\，或者你新建了一个用户，那就是 C:\Users\用户名\)下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa - C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p><p><img src="/2019/09/06/git3/2.png" alt></p><p>点“Add Key”，你就应该看到已经添加的Key：</p><p><img src="/2019/09/06/git3/3.png" alt></p><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p><h4 id="分支管理（小视频）"><a href="#分支管理（小视频）" class="headerlink" title="分支管理（小视频）"></a>分支管理（小视频）</h4><p> <a href="http://liaoxuefeng.gitee.io/git-resources/master-branch-forward.mp4" target="_blank" rel="noopener"><strong>每次提交</strong></a></p><p><a href="https://liaoxuefeng.gitee.io/git-resources/master-and-dev-ff.mp4" target="_blank" rel="noopener"><strong>创建与合并分支</strong></a></p><h4 id="注意小结"><a href="#注意小结" class="headerlink" title="注意小结"></a>注意小结</h4><ol><li><p>Git管理的是修改，而不是文件</p></li><li><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中</p></li><li><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并</p></li><li><p>多人协作的工作模式通常是这样：</p><ol><li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改</p></li><li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并</p></li><li><p>如果合并有冲突，则解决冲突，并在本地提交</p></li><li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功</p></li><li><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to= origin/&lt;branch-name&gt; &lt;branch-name&gt;</code></p></li></ol></li><li><p>标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签</p></li><li><p>忽略某些文件时，需要编写<code>.gitignore</code>该文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</p></li><li><p>配置Git的时候，加上<code>--global</code>是针对当前用户(用户主目录下.gitconfig文件)起作用的，如果不加，那只针对当前的仓库起作用。每个仓库的Git配置文件都放在<code>.git/config</code>文件中</p></li><li><p>如果MERGE(合并)出现冲突， 则解决冲突以后必须：git add - &gt; git commit</p></li><li><p>禁用FAST forward模式,Git就会在MERGE时生成一个新的COMMIT，这样，从分支历史上就可以看出分支信息</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>refusing to merge unrelated histories</title>
      <link href="/2019/09/06/github3/"/>
      <url>/2019/09/06/github3/</url>
      
        <content type="html"><![CDATA[<p> <strong>fatal:refusing to merge unrelated histories(拒绝合并不相关的历史)</strong></p><p>原因:两个 根本不相干的 git 库, 一个是本地库,一个是远端库, 然后本地要去推送到远端, 远端觉得这个本地库跟自己不相干, 所以告知无法合并</p><p>解决办法:</p><ul><li><p>从远端库clone项目(test)到本地 ,本地把要加入的代码放到本地的库(test)下, 然后再提交上去</p></li><li><p>git pull origin master –allow-unrelated-histories  (把两段不相干的 分支进行强行合并)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>failed to push some refs to &#39;git@github.com&#39;</title>
      <link href="/2019/09/06/github2/"/>
      <url>/2019/09/06/github2/</url>
      
        <content type="html"><![CDATA[<p><strong>git push_报错error: failed to push some refs to ‘git@github.com’</strong></p><p>原因： GitHub远程仓库中的README.md文件不在本地仓库中。</p><p>解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase origin master //先拉下来，会自动合并的(pull=fetch+merge)</span><br><span class="line">$ git push -u origin master //进行推送</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push_时出现&quot;Everything up-to-date&quot;</title>
      <link href="/2019/09/06/github1/"/>
      <url>/2019/09/06/github1/</url>
      
        <content type="html"><![CDATA[<p> <strong>git push_时出现”Everything up-to-date</strong></p><p><strong>原因：</strong></p><ol><li>没有git add     </li><li>没有git commit -m “提交信息”</li></ol><p><strong>解决办法：</strong>按部就班</p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Incorrect username or password(access token)</title>
      <link href="/2019/09/06/github4/"/>
      <url>/2019/09/06/github4/</url>
      
        <content type="html"><![CDATA[<p> <strong>remote: Incorrect username or password ( access token )</strong></p><p><a href="https://blog.csdn.net/mmyhs/article/details/81589419" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><ul><li><strong>异常</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin ionic-001</span><br><span class="line">remote: Incorrect username or password ( access token )</span><br><span class="line">fatal: Authentication failed for &apos;https://gitee.com/yyr/demo.git/&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p><strong>原因</strong></p><ul><li>由于之前重置了Git账户的密码，忘记修改计算机的凭据导致这个问题的出现。</li></ul></li><li><p><strong>解决方案</strong></p><p>1.<strong>打开电脑的控制面板–&gt;用户账户–&gt;管理Windows凭据</strong></p></li></ul><p><img src="/2019/09/06/github4/1.png" alt><br><img src="/2019/09/06/github4/5.png" alt><br><img src="/2019/09/06/github4/2.png" alt></p><p><strong>2.找到普通凭据中自己的账号信息，选择编辑，填入正确的用户名和密码，最后点击保存即可。</strong></p><p><img src="/2019/09/06/github4/3.png" alt></p><p><strong>3.最后重新使用git的push指令，成功将代码提交。</strong></p><p><img src="/2019/09/06/github4/4.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse-Github操作</title>
      <link href="/2019/09/06/git4/"/>
      <url>/2019/09/06/git4/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5></blockquote><p><a href="https://blog.csdn.net/bendanany/article/details/78891804" target="_blank" rel="noopener">小白使用eclipse提交到GitHub (详细步骤)</a></p><p><a href="https://blog.csdn.net/u014745069/article/details/79839202" target="_blank" rel="noopener">Eclipse生成SSH传输密钥并实现GitHub的SSH代码提交</a>(部分参考)</p><p><a href="http://www.manongjc.com/article/32398.html" target="_blank" rel="noopener">Eclipse使用egit插件通过ssh协议方式上传代码到gitLab</a>(部分参考)</p><blockquote><h5 id="eclipse使用https、ssh协议方式上传代码至github"><a href="#eclipse使用https、ssh协议方式上传代码至github" class="headerlink" title="eclipse使用https、ssh协议方式上传代码至github"></a>eclipse使用https、ssh协议方式上传代码至github</h5></blockquote><p>1.首先登陆GitHub创建一个新的repository (Start a project),复制地址备用。</p><a id="more"></a><p><strong>注意,红色标识部分不要勾选,否则后续提交代码时会出现冲突。</strong></p><p><img src="/2019/09/06/git4/g1.png" alt></p><p>2.Eclipse:<strong>项目名称必须与gitHub中一致</strong></p><p>Eclipse 高级版本自带Git,不需要安装插件。(如使用低级版本,请自己百度安装Git插件)</p><p>将本地项目上传到Git,<strong>流程：需要先通过Commit 传到本地仓库,然后再从本地仓库push到Git。</strong></p><blockquote><h5 id="以https协议方式上传项目代码"><a href="#以https协议方式上传项目代码" class="headerlink" title="以https协议方式上传项目代码"></a><strong>以https协议方式上传项目代码</strong></h5></blockquote><p><code>https://github.com/xxxx/TestDemo.git</code></p><p>3.项目右键,Team -&gt; Share Project(项目提交通用)</p><p><img src="/2019/09/06/git4/g2.png" alt></p><p>4.选择Git,随后配置GIT, Configure Git Repository</p><p><img src="/2019/09/06/git4/g3.png" alt></p><p>5.<strong>在此目录下会生成一个.git 的文件夹,此时Eclipse中文件显示?号。</strong></p><ul><li><p>为新建的文件添加Index, 右键项目-＞Team-&gt;Add to Index, 这里将所有文件会带个+号, 对于不需要提交的文件,可以通过右键-&gt;Team-&gt;Remove from Index 移除。</p></li><li><p>提交代码到本地仓库</p></li></ul><p>6.右键项目-&gt;Team-&gt;Commit,  add commit message, 如果遇到下面这种情况,先去Window-&gt;Preference-&gt;Team-&gt;Git-&gt;Committing, 将第一个默认勾选去掉。</p><p><img src="/2019/09/06/git4/g5.png" alt><img src="/2019/09/06/git4/g6.png" alt></p><p>以下面作为参考提交:</p><p><img src="/2019/09/06/git4/g7.png" alt></p><p>7.注意,代码只需要提交图片中标识的文件即可。也可以通过编辑.gitignore将不需要提交的文件筛除。</p><p>commit后, 这时,可以看到文件带有圆柱形标志。</p><p><img src="/2019/09/06/git4/kk.png" alt></p><p>8.从本地代码提交到Git</p><p>项目右键,Team-&gt;Remote-&gt;Push, 输入Git地址,以及登陆凭证</p><p><img src="/2019/09/06/git4/g8.png" alt></p><p>9.点击Next,Source ref和Destination ref下拉框中选择master,点击Add Spec,点击Next。</p><p><img src="/2019/09/06/git4/g9t.png" alt></p><p>10.项目提交到Git成功</p><p><img src="/2019/09/06/git4/g10.png" alt></p><p>11.打开GitHub,查看是否项目是否上传成功。</p><blockquote><h5 id="以ssh协议方式上传项目代码"><a href="#以ssh协议方式上传项目代码" class="headerlink" title="以ssh协议方式上传项目代码"></a>以ssh协议方式上传项目代码</h5></blockquote><p>使用ssh方式可以不通过https协议,避免直接提供账号密码的方式上传项目到git在线服务器,如GitLab、Bitbucket、GitHub,同时极其可靠的保证账号安全性。</p><p><strong>操作步骤：</strong></p><p>1.Window-&gt;preferences-&gt;General-&gt;Network Connections-&gt;SSH2</p><p>2.切换到Key Management页,选择点击 Generate DSA key 或 Generate RSA key 按钮,生成DSA或RSA算法的密钥,原则上是DSA或RSA都受支持的,个人感觉DSA甚至更好,毕竟两者中,DSA被美国NIST挑选作为数字签名标准,但是RSA在百度搜索出的纵多博文中被使用。</p><p>3.生成了看上去满意的密钥后,填写Comment简要注释,填写Passphrase(可选填项,相当于password,用于加密保护私钥,填写后每次上传服务器,将要求提供此密码验证私钥的使用权),点击SavePrivateKey。</p><p><img src="/2019/09/06/git4/k12.png" alt>如果之前已经生成文件,可重新定义文件位置或者进行覆盖。其中,id_rsa代表非对称加密算法rsa的私钥,id_rsa.pub代表公钥,私钥是需要自己保管的,而公钥可以任意发送给他人保管,这是为了让remote用户能够判断传输的加密数据是否为本人操作。</p><p><img src="/2019/09/06/git4/k13.png" alt></p><p>4.【<strong>关键步骤</strong>】点击 Export Via SFTP ,按 user@host[:port] 形式输入公钥绑定的服务器域,如 <a href="mailto:git@bitbucket.org" target="_blank" rel="noopener">git@bitbucket.org</a> 或 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> (输入刚才的Passphrase,点击各种确定,ps:我绑定时没出现,如果报出 Failed to export ssh key to remote server 的错误,直接忽略)<strong>注意:push的时候报出 The authenticity of host ‘github.org’ can’t be established. 之类的错误,阻止上传,基本都是没执行这一步的原因。</strong></p><p>5.点击 Load Existing Key,选择刚才生成的私钥(id_rsa文件),输入Passphrase,点击Apply。</p><p>6.点击旁边的Known Hosts,应该能看到刚才绑定的服务器记录。</p><p>7.返回General,确认Private keys中包含了刚才保存的私钥件id_rsa,<strong>没包含的话点击旁边的Add Private Key..添加进去</strong>,最后点击Apply(SSH2 home位置,用于存储SSH协议使用的非对称加密密钥文件)</p><p><img src="/2019/09/06/git4/k11.png" alt></p><p>8.最好重启一次Eclipse</p><p>9.把生成的公钥(刚才生成密钥的时候显示的那一串东西或者打开刚才生成的id_rsa.pub文件将里面的内容全部复制下来)绑定到git服务器上。</p><p>10.添加GitHub公钥</p><p><img src="/2019/09/06/git4/k14.png" alt></p><p><img src="/2019/09/06/git4/k15.png" alt></p><p><img src="/2019/09/06/git4/k16.png" alt></p><p><img src="/2019/09/06/git4/k17.png" alt></p><p>11.elipse代码提交如上,只需更改路径,其余跟https提交代码一致,不需要再输入密码。</p><p><img src="/2019/09/06/git4/k18.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP相关内容</title>
      <link href="/2019/09/06/http/"/>
      <url>/2019/09/06/http/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4></blockquote><p><a href="https://www.runoob.com/http/http-tutorial.html" target="_blank" rel="noopener"><strong>HTTP 教程</strong></a></p><blockquote><p><strong>涉及内容：HTTP 简介、HTTP 消息结构、HTTP请求方法、HTTP 响应头信息、HTTP状态码、HTTP content-type</strong></p></blockquote><blockquote><h4 id="HTTP-简介"><a href="#HTTP-简介" class="headerlink" title="HTTP 简介"></a>HTTP 简介</h4></blockquote><ul><li><p>HTTP协议是Hyper Text Transfer Protocol(超文本传输协议)的缩写,是用于从万维网</p><p>(WWW:World Wide Web )服务器传输超文本到本地浏览器的传送协议。</p></li><li><p>HTTP是一个基于TCP/IP通信协议来传递数据(HTML 文件, 图片文件, 查询结果等)</p></li></ul><a id="more"></a><blockquote><h4 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h4></blockquote><ul><li><strong>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求</strong>。</li><li>Web服务器有:Apache服务器,IIS服务器(Internet Information Services)等。</li><li>Web服务器根据接收到的请求后,向客户端发送响应信息。</li><li>HTTP默认端口号为80,但是你也可以改为8080或者其他端口。</li></ul><h4 id="HTTP三点注意事项"><a href="#HTTP三点注意事项" class="headerlink" title="HTTP三点注意事项"></a><strong>HTTP三点注意事项</strong></h4><ul><li><code>HTTP是无连接:</code>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求,并收到客户的应答后,即断开连接。采用这种方式可以节省传输时间。</li><li><code>HTTP是媒体独立的:</code>这意味着,只要客户端和服务器知道如何处理的数据内容,任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</li><li><code>HTTP是无状态:</code>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息,则它必须重传。这样可能导致每次连接传送的数据量增大。另一方面,在服务器不需要先前信息时它的应答就较快。</li></ul><p><strong>以下图表展示了HTTP协议通信流程:</strong></p><p><img src="/2019/09/06/http/2.png" alt></p><blockquote><p>CGI(Common Gateway Interface) 是 HTTP 服务器与你的或其它机器上的程序进行<strong>“交谈”</strong>的一种工具,其程序须运行在网络服务器上。绝大多数的 CGI 程序被用来解释处理来自表单的输入信息,并在服务器产生相应的处理，或将相应的信息反馈给浏览器。CGI 程序使网页具有<strong>交互功能</strong>。</p></blockquote><blockquote><h4 id="HTTP-消息结构"><a href="#HTTP-消息结构" class="headerlink" title="HTTP 消息结构"></a>HTTP 消息结构</h4></blockquote><ul><li><p><strong>HTTP是基于客户端/服务端（C/S）的架构模型,通过一个可靠的链接来交换信息,是一个无状态的请求/响应协议</strong>。</p></li><li><p>一个HTTP”客户端”是一个应用程序(Web浏览器或其他任何客户端),通过连接到服务器达到向服务器<strong>发送一个或多个</strong>HTTP的请求的目的。</p></li><li><p>一个HTTP”服务器”同样也是一个<strong>应用程序</strong>(通常是一个Web服务,如Apache Web服务器或IIS服务器等),通过接收客户端的请求并向客户端发送HTTP响应数据。</p></li><li><p>HTTP使用<strong>统一资源标识符</strong>(Uniform Resource Identifiers, URI)来传输数据和建立连接。一旦建立连接后,数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。</p><h5 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h5></li></ul><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式:<strong>请求行(request line)、请求头部(header)、空行和请求数据</strong>四个部分组成,下图给出了请求报文的一般格式。</p><p><img src="/2019/09/06/http/3.png" alt></p><h5 id="服务器响应消息"><a href="#服务器响应消息" class="headerlink" title="服务器响应消息"></a>服务器响应消息</h5><p>HTTP响应也由四个部分组成,分别是:<strong>状态行、消息报头、空行和响应正文</strong>。</p><p><img src="/2019/09/06/http/4.png" alt></p><ul><li>下面实例是一点典型的使用GET来传递数据的实例：</li></ul><h5 id="客户端请求"><a href="#客户端请求" class="headerlink" title="客户端请求"></a>客户端请求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /hello.txt HTTP/1.1</span><br><span class="line">User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class="line">Host: www.example.com</span><br><span class="line">Accept-Language: en, mi</span><br></pre></td></tr></table></figure><h5 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><ul><li><strong>输出结果:</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World! My payload includes a trailing CRLF.</span><br></pre></td></tr></table></figure><blockquote><h4 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h4></blockquote><ul><li>HTTP1.0定义了三种请求方法: GET, POST 和 HEAD方法。</li><li>HTTP1.1新增了五种请求方法:OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</li><li>HTTP 协议中共定义了八种方法或者叫“动作”来表明对 Request-URI 指定的资源的不同操作方式,具体介绍如下:</li></ul><table><thead><tr><th align="center">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">GET</td><td align="left">请求指定的页面信息,并返回实体主体。</td></tr><tr><td align="center">HEAD</td><td align="left">类似于get请求,只不过返回的响应中没有具体的内容,用于获取报头</td></tr><tr><td align="center">POST</td><td align="left">向指定资源提交数据进行处理请求(例如提交表单或者上传文件)。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td align="center">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="center">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="center">CONNECT</td><td align="left">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="center">OPTIONS</td><td align="left">返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*‘的请求来测试服务器的功能性</td></tr><tr><td align="center">TRACE</td><td align="left">回显服务器收到的请求,主要用于测试或诊断。</td></tr></tbody></table><p><code>虽然HTTP的请求方式有8种,但是我们在实际应用中常用的也就是get和post,其他请求方式也都可以通过这两种方式间接的来实现。</code></p><blockquote><h4 id="HTTP-响应头信息"><a href="#HTTP-响应头信息" class="headerlink" title="HTTP 响应头信息"></a>HTTP 响应头信息</h4></blockquote><p>HTTP请求头提供了关于请求,响应或者其他的发送实体的信息。</p><p>HTTP响应头信息如下:</p><table><thead><tr><th align="center">应答头</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">Allow</td><td align="left">服务器支持哪些请求方法(如GET、POST等)</td></tr><tr><td align="center">Content-Encoding</td><td align="left">文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩,但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此,Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept-Encoding”))检查浏览器是否支持gzip,为支持gzip的浏览器返回经gzip压缩的HTML页面,为其他浏览器返回普通页面</td></tr><tr><td align="center">Content-Length</td><td align="left">表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势,可以把输出文档写入 ByteArrayOutputStream,完成后查看其大小,然后把该值放入Content-Length头,最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容</td></tr><tr><td align="center">Content-Type</td><td align="left">表示后面的文档属于什么MIME类型。Servlet默认为text/plain,但通常需要显式地指定为text/html。由于经常要设置Content-Type,因此HttpServletResponse提供了一个专用的方法setContentType</td></tr><tr><td align="center">Date</td><td align="left">当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦</td></tr><tr><td align="center">Expires</td><td align="left">应该在什么时候认为文档已经过期,从而不再缓存它</td></tr><tr><td align="center">Last-Modified</td><td align="left">文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET,只有改动时间迟于指定时间的文档才会返回,否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置</td></tr><tr><td align="center">Location</td><td align="left">表示客户应当到哪里去提取文档。Location通常不是直接设置的,而是通过HttpServletResponse的sendRedirect方法,该方法同时设置状态代码为302</td></tr><tr><td align="center">Refresh</td><td align="left">表示浏览器应该在多少时间之后刷新文档,以秒计。除了刷新当前文档之外,你还可以通过setHeader(“Refresh”, “5; URL=url”)让浏览器读取指定的页面。注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=url”＞实现,这是因为,自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是,对于Servlet来说,直接设置Refresh头更加方便。注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”,而不是”每隔N秒刷新本页面或访问指定页面”。因此,连续刷新要求每次都发送一个Refresh头,而发送204状态代码则可以阻止浏览器继续刷新,不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。注意Refresh头不属于HTTP 1.1正式规范的一部分,而是一个扩展,但Netscape和IE都支持它。</td></tr><tr><td align="center">Server</td><td align="left">服务器名字。Servlet一般不设置这个值,而是由Web服务器自己设置</td></tr><tr><td align="center">Set-Cookie</td><td align="left">设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …),而是应使用HttpServletResponse提供的专用方法addCookie</td></tr><tr><td align="center">WWW-Authenticate</td><td align="left">客户应该在Authorization头中提供什么类型的授权信息。在包含401(Unauthorized)状态行的应答中这个头是必需的。例如,response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。注意Servlet一般不进行这方面的处理,而是让Web服务器的专门机制来控制受密码保护页面的访问(例如.htaccess)</td></tr></tbody></table><blockquote><h4 id="HTTP状态码-HTTP-Status-Code"><a href="#HTTP状态码-HTTP-Status-Code" class="headerlink" title="HTTP状态码(HTTP Status Code)"></a>HTTP状态码(HTTP Status Code)</h4></blockquote><p>当浏览者访问一个网页时,浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前,此网页所在的服务器会返回一个包含HTTP状态码的信息头(server header)用以响应浏览器的请求。</p><ul><li><h5 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类"></a><strong>HTTP状态码分类</strong></h5></li></ul><p>HTTP状态码由三个十进制数字组成,第一个十进制数字定义了状态码的类型,后两个数字没有分类的作用。HTTP状态码共分为5种类型</p><table><thead><tr><th align="center">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="center">1**</td><td align="left">信息,服务器收到请求,需要请求者继续执行操作</td></tr><tr><td align="center">2**</td><td align="left">成功,操作被成功接收并处理</td></tr><tr><td align="center">3**</td><td align="left">重定向,需要进一步的操作以完成请求</td></tr><tr><td align="center">4**</td><td align="left">客户端错误,请求包含语法错误或无法完成请求</td></tr><tr><td align="center">5**</td><td align="left">服务器错误,服务器在处理请求的过程中发生了错误</td></tr></tbody></table><ul><li><h5 id="HTTP状态码列表"><a href="#HTTP状态码列表" class="headerlink" title="HTTP状态码列表"></a>HTTP状态码列表</h5></li></ul><table><thead><tr><th align="center">状态码</th><th align="center">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="center">100</td><td align="center">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="center">101</td><td align="center">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议,例如:切换到HTTP的新版本协议</td></tr><tr><td align="center">200</td><td align="center">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="center">201</td><td align="center">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="center">202</td><td align="center">Accepted</td><td align="left">已接受。已经接受请求,但未处理完成</td></tr><tr><td align="center">203</td><td align="center">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器,而是一个副本</td></tr><tr><td align="center">204</td><td align="center">No Content</td><td align="left">无内容。服务器成功处理,但未返回内容。在未更新网页的情况下,可确保浏览器继续显示当前文档</td></tr><tr><td align="center">205</td><td align="center">Reset Content</td><td align="left">重置内容。服务器处理成功,用户终端(例如:浏览器)应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="center">206</td><td align="center">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="center">300</td><td align="center">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置,相应可返回一个资源特征与地址的列表用于用户终端(例如:浏览器)选择</td></tr><tr><td align="center">301</td><td align="center">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI,返回信息会包括新的URI,浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="center">302</td><td align="center">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="center">303</td><td align="center">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="center">304</td><td align="center">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时,不会返回任何资源。客户端通常会缓存访问过的资源,通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="center">305</td><td align="center">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="center">306</td><td align="center">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="center">307</td><td align="center">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="center">400</td><td align="center">Bad Request</td><td align="left">客户端请求的语法错误,服务器无法理解</td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="center">402</td><td align="center">Payment Required</td><td align="left">保留,将来使用</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="left">服务器理解请求客户端的请求,但是拒绝执行此请求</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源(网页)。通过此代码,网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="center">405</td><td align="center">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="center">406</td><td align="center">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="center">407</td><td align="center">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证,与401类似,但请求者应当使用代理进行授权</td></tr><tr><td align="center">408</td><td align="center">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长,超时</td></tr><tr><td align="center">409</td><td align="center">Conflict</td><td align="left">服务器完成客户端的PUT请求是可能返回此代码,服务器处理请求时发生了冲突</td></tr><tr><td align="center">410</td><td align="center">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404,如果资源以前有现在被永久删除了可使用410代码,网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="center">411</td><td align="center">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="center">412</td><td align="center">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="center">413</td><td align="center">Request Entity Too Large</td><td align="left">由于请求的实体过大,服务器无法处理,因此拒绝请求。为防止客户端的连续请求,服务器可能会关闭连接。如果只是服务器暂时无法处理,则会包含一个Retry-After的响应信息</td></tr><tr><td align="center">414</td><td align="center">Request-URI Too Large</td><td align="left">请求的URI过长(URI通常为网址),服务器无法处理</td></tr><tr><td align="center">415</td><td align="center">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="center">416</td><td align="center">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="center">417</td><td align="center">Expectation Failed</td><td align="left">服务器无法满足Expect的请求头信息</td></tr><tr><td align="center">500</td><td align="center">Internal Server Error</td><td align="left">服务器内部错误,无法完成请求</td></tr><tr><td align="center">501</td><td align="center">Not Implemented</td><td align="left">服务器不支持请求的功能,无法完成请求</td></tr><tr><td align="center">502</td><td align="center">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时,从远程服务器接收到了一个无效的响应</td></tr><tr><td align="center">503</td><td align="center">Service Unavailable</td><td align="left">由于超载或系统维护,服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="center">504</td><td align="center">Gateway Time-out</td><td align="left">充当网关或代理的服务器,未及时从远端服务器获取请求</td></tr><tr><td align="center">505</td><td align="center">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本,无法完成处理</td></tr></tbody></table><blockquote><h4 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h4></blockquote><p><strong>Content-Type,内容类型,一般是指网页中存在的Content-Type,用于定义网络文件的类型和网页的编码,决定浏览器将以什么形式、什么编码读取这个文件,这就是经常看到一些Asp网页点击的结果却是下载到的一个文件或一张图片的原因。</strong></p><p><code>HTTP content-type 对照表</code></p><table><thead><tr><th align="center">文件扩展名</th><th align="center">Content-Type(Mime-Type)</th><th align="center">文件扩展名</th><th align="center">Content-Type(Mime-Type)</th></tr></thead><tbody><tr><td align="center">.*(二进制流,不知道下载文件类型)</td><td align="center">application/octet-stream</td><td align="center">.tif</td><td align="center">image/tiff</td></tr><tr><td align="center">.001</td><td align="center">application/x-001</td><td align="center">.301</td><td align="center">application/x-301</td></tr><tr><td align="center">.323</td><td align="center">text/h323</td><td align="center">.906</td><td align="center">application/x-906</td></tr><tr><td align="center">.907</td><td align="center">drawing/907</td><td align="center">.a11</td><td align="center">application/x-a11</td></tr><tr><td align="center">.acp</td><td align="center">audio/x-mei-aac</td><td align="center">.ai</td><td align="center">application/postscript</td></tr><tr><td align="center">.aif</td><td align="center">audio/aiff</td><td align="center">.aifc</td><td align="center">audio/aiff</td></tr><tr><td align="center">.aiff</td><td align="center">audio/aiff</td><td align="center">.anv</td><td align="center">application/x-anv</td></tr><tr><td align="center">.asa</td><td align="center">text/asa</td><td align="center">.asf</td><td align="center">video/x-ms-asf</td></tr><tr><td align="center">.asp</td><td align="center">text/asp</td><td align="center">.asx</td><td align="center">video/x-ms-asf</td></tr><tr><td align="center">.au</td><td align="center">audio/basic</td><td align="center">.avi</td><td align="center">video/avi</td></tr><tr><td align="center">.awf</td><td align="center">application/vnd.adobe.workflow</td><td align="center">.biz</td><td align="center">text/xml</td></tr><tr><td align="center">.bmp</td><td align="center">application/x-bmp</td><td align="center">.bot</td><td align="center">application/x-bot</td></tr><tr><td align="center">.c4t</td><td align="center">application/x-c4t</td><td align="center">.c90</td><td align="center">application/x-c90</td></tr><tr><td align="center">.cal</td><td align="center">application/x-cals</td><td align="center">.cat</td><td align="center">application/vnd.ms-pki.seccat</td></tr><tr><td align="center">.cdf</td><td align="center">application/x-netcdf</td><td align="center">.cdr</td><td align="center">application/x-cdr</td></tr><tr><td align="center">.cel</td><td align="center">application/x-cel</td><td align="center">.cer</td><td align="center">application/x-x509-ca-cert</td></tr><tr><td align="center">.cg4</td><td align="center">application/x-g4</td><td align="center">.cgm</td><td align="center">application/x-cgm</td></tr><tr><td align="center">.cit</td><td align="center">application/x-cit</td><td align="center">.class</td><td align="center">java/*</td></tr><tr><td align="center">.cml</td><td align="center">text/xml</td><td align="center">.cmp</td><td align="center">application/x-cmp</td></tr><tr><td align="center">.cmx</td><td align="center">application/x-cmx</td><td align="center">.cot</td><td align="center">application/x-cot</td></tr><tr><td align="center">.crl</td><td align="center">application/pkix-crl</td><td align="center">.crt</td><td align="center">application/x-x509-ca-cert</td></tr><tr><td align="center">.csi</td><td align="center">application/x-csi</td><td align="center">.css</td><td align="center">text/css</td></tr><tr><td align="center">.cut</td><td align="center">application/x-cut</td><td align="center">.dbf</td><td align="center">application/x-dbf</td></tr><tr><td align="center">.dbm</td><td align="center">application/x-dbm</td><td align="center">.dbx</td><td align="center">application/x-dbx</td></tr><tr><td align="center">.dcd</td><td align="center">text/xml</td><td align="center">.dcx</td><td align="center">application/x-dcx</td></tr><tr><td align="center">.der</td><td align="center">application/x-x509-ca-cert</td><td align="center">.dgn</td><td align="center">application/x-dgn</td></tr><tr><td align="center">.dib</td><td align="center">application/x-dib</td><td align="center">.dll</td><td align="center">application/x-msdownload</td></tr><tr><td align="center">.doc</td><td align="center">application/msword</td><td align="center">.dot</td><td align="center">application/msword</td></tr><tr><td align="center">.drw</td><td align="center">application/x-drw</td><td align="center">.dtd</td><td align="center">text/xml</td></tr><tr><td align="center">.dwf</td><td align="center">Model/vnd.dwf</td><td align="center">.dwf</td><td align="center">application/x-dwf</td></tr><tr><td align="center">.dwg</td><td align="center">application/x-dwg</td><td align="center">.dxb</td><td align="center">application/x-dxb</td></tr><tr><td align="center">.dxf</td><td align="center">application/x-dxf</td><td align="center">.edn</td><td align="center">application/vnd.adobe.edn</td></tr><tr><td align="center">.emf</td><td align="center">application/x-emf</td><td align="center">.eml</td><td align="center">message/rfc822</td></tr><tr><td align="center">.ent</td><td align="center">text/xml</td><td align="center">.epi</td><td align="center">application/x-epi</td></tr><tr><td align="center">.eps</td><td align="center">application/x-ps</td><td align="center">.eps</td><td align="center">application/postscript</td></tr><tr><td align="center">.etd</td><td align="center">application/x-ebx</td><td align="center">.exe</td><td align="center">application/x-msdownload</td></tr><tr><td align="center">.fax</td><td align="center">image/fax</td><td align="center">.fdf</td><td align="center">application/vnd.fdf</td></tr><tr><td align="center">.fif</td><td align="center">application/fractals</td><td align="center">.fo</td><td align="center">text/xml</td></tr><tr><td align="center">.frm</td><td align="center">application/x-frm</td><td align="center">.g4</td><td align="center">application/x-g4</td></tr><tr><td align="center">.gbr</td><td align="center">application/x-gbr</td><td align="center">.</td><td align="center">application/x-</td></tr><tr><td align="center">.gif</td><td align="center">image/gif</td><td align="center">.gl2</td><td align="center">application/x-gl2</td></tr><tr><td align="center">.gp4</td><td align="center">application/x-gp4</td><td align="center">.hgl</td><td align="center">application/x-hgl</td></tr><tr><td align="center">.hmr</td><td align="center">application/x-hmr</td><td align="center">.hpg</td><td align="center">application/x-hpgl</td></tr><tr><td align="center">.hpl</td><td align="center">application/x-hpl</td><td align="center">.hqx</td><td align="center">application/mac-binhex40</td></tr><tr><td align="center">.hrf</td><td align="center">application/x-hrf</td><td align="center">.hta</td><td align="center">application/hta</td></tr><tr><td align="center">.htc</td><td align="center">text/x-component</td><td align="center">.htm</td><td align="center">text/html</td></tr><tr><td align="center">.html</td><td align="center">text/html</td><td align="center">.htt</td><td align="center">text/webviewhtml</td></tr><tr><td align="center">.htx</td><td align="center">text/html</td><td align="center">.icb</td><td align="center">application/x-icb</td></tr><tr><td align="center">.ico</td><td align="center">image/x-icon</td><td align="center">.ico</td><td align="center">application/x-ico</td></tr><tr><td align="center">.iff</td><td align="center">application/x-iff</td><td align="center">.ig4</td><td align="center">application/x-g4</td></tr><tr><td align="center">.igs</td><td align="center">application/x-igs</td><td align="center">.iii</td><td align="center">application/x-iphone</td></tr><tr><td align="center">.img</td><td align="center">application/x-img</td><td align="center">.ins</td><td align="center">application/x-internet-signup</td></tr><tr><td align="center">.isp</td><td align="center">application/x-internet-signup</td><td align="center">.IVF</td><td align="center">video/x-ivf</td></tr><tr><td align="center">.java</td><td align="center">java/*</td><td align="center">.jfif</td><td align="center">image/jpeg</td></tr><tr><td align="center">.jpe</td><td align="center">image/jpeg</td><td align="center">.jpe</td><td align="center">application/x-jpe</td></tr><tr><td align="center">.jpeg</td><td align="center">image/jpeg</td><td align="center">.jpg</td><td align="center">image/jpeg</td></tr><tr><td align="center">.jpg</td><td align="center">application/x-jpg</td><td align="center">.js</td><td align="center">application/x-javascript</td></tr><tr><td align="center">.jsp</td><td align="center">text/html</td><td align="center">.la1</td><td align="center">audio/x-liquid-file</td></tr><tr><td align="center">.lar</td><td align="center">application/x-laplayer-reg</td><td align="center">.latex</td><td align="center">application/x-latex</td></tr><tr><td align="center">.lavs</td><td align="center">audio/x-liquid-secure</td><td align="center">.lbm</td><td align="center">application/x-lbm</td></tr><tr><td align="center">.lmsff</td><td align="center">audio/x-la-lms</td><td align="center">.ls</td><td align="center">application/x-javascript</td></tr><tr><td align="center">.ltr</td><td align="center">application/x-ltr</td><td align="center">.m1v</td><td align="center">video/x-mpeg</td></tr><tr><td align="center">.m2v</td><td align="center">video/x-mpeg</td><td align="center">.m3u</td><td align="center">audio/mpegurl</td></tr><tr><td align="center">.m4e</td><td align="center">video/mpeg4</td><td align="center">.mac</td><td align="center">application/x-mac</td></tr><tr><td align="center">.man</td><td align="center">application/x-troff-man</td><td align="center">.math</td><td align="center">text/xml</td></tr><tr><td align="center">.mdb</td><td align="center">application/msaccess</td><td align="center">.mdb</td><td align="center">application/x-mdb</td></tr><tr><td align="center">.mfp</td><td align="center">application/x-shockwave-flash</td><td align="center">.mht</td><td align="center">message/rfc822</td></tr><tr><td align="center">.mhtml</td><td align="center">message/rfc822</td><td align="center">.mi</td><td align="center">application/x-mi</td></tr><tr><td align="center">.mid</td><td align="center">audio/mid</td><td align="center">.midi</td><td align="center">audio/mid</td></tr><tr><td align="center">.mil</td><td align="center">application/x-mil</td><td align="center">.mml</td><td align="center">text/xml</td></tr><tr><td align="center">.mnd</td><td align="center">audio/x-musicnet-download</td><td align="center">.mns</td><td align="center">audio/x-musicnet-stream</td></tr><tr><td align="center">.mocha</td><td align="center">application/x-javascript</td><td align="center">.movie</td><td align="center">video/x-sgi-movie</td></tr><tr><td align="center">.mp1</td><td align="center">audio/mp1</td><td align="center">.mp2</td><td align="center">audio/mp2</td></tr><tr><td align="center">.mp2v</td><td align="center">video/mpeg</td><td align="center">.mp3</td><td align="center">audio/mp3</td></tr><tr><td align="center">.mp4</td><td align="center">video/mpeg4</td><td align="center">.mpa</td><td align="center">video/x-mpg</td></tr><tr><td align="center">.mpd</td><td align="center">application/vnd.ms-project</td><td align="center">.mpe</td><td align="center">video/x-mpeg</td></tr><tr><td align="center">.mpeg</td><td align="center">video/mpg</td><td align="center">.mpg</td><td align="center">video/mpg</td></tr><tr><td align="center">.mpga</td><td align="center">audio/rn-mpeg</td><td align="center">.mpp</td><td align="center">application/vnd.ms-project</td></tr><tr><td align="center">.mps</td><td align="center">video/x-mpeg</td><td align="center">.mpt</td><td align="center">application/vnd.ms-project</td></tr><tr><td align="center">.mpv</td><td align="center">video/mpg</td><td align="center">.mpv2</td><td align="center">video/mpeg</td></tr><tr><td align="center">.mpw</td><td align="center">application/vnd.ms-project</td><td align="center">.mpx</td><td align="center">application/vnd.ms-project</td></tr><tr><td align="center">.mtx</td><td align="center">text/xml</td><td align="center">.mxp</td><td align="center">application/x-mmxp</td></tr><tr><td align="center">.net</td><td align="center">image/pnetvue</td><td align="center">.nrf</td><td align="center">application/x-nrf</td></tr><tr><td align="center">.nws</td><td align="center">message/rfc822</td><td align="center">.odc</td><td align="center">text/x-ms-odc</td></tr><tr><td align="center">.out</td><td align="center">application/x-out</td><td align="center">.p10</td><td align="center">application/pkcs10</td></tr><tr><td align="center">.p12</td><td align="center">application/x-pkcs12</td><td align="center">.p7b</td><td align="center">application/x-pkcs7-certificates</td></tr><tr><td align="center">.p7c</td><td align="center">application/pkcs7-mime</td><td align="center">.p7m</td><td align="center">application/pkcs7-mime</td></tr><tr><td align="center">.p7r</td><td align="center">application/x-pkcs7-certreqresp</td><td align="center">.p7s</td><td align="center">application/pkcs7-signature</td></tr><tr><td align="center">.pc5</td><td align="center">application/x-pc5</td><td align="center">.pci</td><td align="center">application/x-pci</td></tr><tr><td align="center">.pcl</td><td align="center">application/x-pcl</td><td align="center">.pcx</td><td align="center">application/x-pcx</td></tr><tr><td align="center">.pdf</td><td align="center">application/pdf</td><td align="center">.pdf</td><td align="center">application/pdf</td></tr><tr><td align="center">.pdx</td><td align="center">application/vnd.adobe.pdx</td><td align="center">.pfx</td><td align="center">application/x-pkcs12</td></tr><tr><td align="center">.pgl</td><td align="center">application/x-pgl</td><td align="center">.pic</td><td align="center">application/x-pic</td></tr><tr><td align="center">.pko</td><td align="center">application/vnd.ms-pki.pko</td><td align="center">.pl</td><td align="center">application/x-perl</td></tr><tr><td align="center">.plg</td><td align="center">text/html</td><td align="center">.pls</td><td align="center">audio/scpls</td></tr><tr><td align="center">.plt</td><td align="center">application/x-plt</td><td align="center">.png</td><td align="center">image/png</td></tr><tr><td align="center">.png</td><td align="center">application/x-png</td><td align="center">.pot</td><td align="center">application/vnd.ms-powerpoint</td></tr><tr><td align="center">.ppa</td><td align="center">application/vnd.ms-powerpoint</td><td align="center">.ppm</td><td align="center">application/x-ppm</td></tr><tr><td align="center">.pps</td><td align="center">application/vnd.ms-powerpoint</td><td align="center">.ppt</td><td align="center">application/vnd.ms-powerpoint</td></tr><tr><td align="center">.ppt</td><td align="center">application/x-ppt</td><td align="center">.pr</td><td align="center">application/x-pr</td></tr><tr><td align="center">.prf</td><td align="center">application/pics-rules</td><td align="center">.prn</td><td align="center">application/x-prn</td></tr><tr><td align="center">.prt</td><td align="center">application/x-prt</td><td align="center">.ps</td><td align="center">application/x-ps</td></tr><tr><td align="center">.ps</td><td align="center">application/postscript</td><td align="center">.ptn</td><td align="center">application/x-ptn</td></tr><tr><td align="center">.pwz</td><td align="center">application/vnd.ms-powerpoint</td><td align="center">.r3t</td><td align="center">text/vnd.rn-realtext3d</td></tr><tr><td align="center">.ra</td><td align="center">audio/vnd.rn-realaudio</td><td align="center">.ram</td><td align="center">audio/x-pn-realaudio</td></tr><tr><td align="center">.ras</td><td align="center">application/x-ras</td><td align="center">.rat</td><td align="center">application/rat-file</td></tr><tr><td align="center">.rdf</td><td align="center">text/xml</td><td align="center">.rec</td><td align="center">application/vnd.rn-recording</td></tr><tr><td align="center">.red</td><td align="center">application/x-red</td><td align="center">.rgb</td><td align="center">application/x-rgb</td></tr><tr><td align="center">.rjs</td><td align="center">application/vnd.rn-realsystem-rjs</td><td align="center">.rjt</td><td align="center">application/vnd.rn-realsystem-rjt</td></tr><tr><td align="center">.rlc</td><td align="center">application/x-rlc</td><td align="center">.rle</td><td align="center">application/x-rle</td></tr><tr><td align="center">.rm</td><td align="center">application/vnd.rn-realmedia</td><td align="center">.rmf</td><td align="center">application/vnd.adobe.rmf</td></tr><tr><td align="center">.rmi</td><td align="center">audio/mid</td><td align="center">.rmj</td><td align="center">application/vnd.rn-realsystem-rmj</td></tr><tr><td align="center">.rmm</td><td align="center">audio/x-pn-realaudio</td><td align="center">.rmp</td><td align="center">application/vnd.rn-rn_music_package</td></tr><tr><td align="center">.rms</td><td align="center">application/vnd.rn-realmedia-secure</td><td align="center">.rmvb</td><td align="center">application/vnd.rn-realmedia-vbr</td></tr><tr><td align="center">.rmx</td><td align="center">application/vnd.rn-realsystem-rmx</td><td align="center">.rnx</td><td align="center">application/vnd.rn-realplayer</td></tr><tr><td align="center">.rp</td><td align="center">image/vnd.rn-realpix</td><td align="center">.rpm</td><td align="center">audio/x-pn-realaudio-plugin</td></tr><tr><td align="center">.rsml</td><td align="center">application/vnd.rn-rsml</td><td align="center">.rt</td><td align="center">text/vnd.rn-realtext</td></tr><tr><td align="center">.rtf</td><td align="center">application/msword</td><td align="center">.rtf</td><td align="center">application/x-rtf</td></tr><tr><td align="center">.rv</td><td align="center">video/vnd.rn-realvideo</td><td align="center">.sam</td><td align="center">application/x-sam</td></tr><tr><td align="center">.sat</td><td align="center">application/x-sat</td><td align="center">.sdp</td><td align="center">application/sdp</td></tr><tr><td align="center">.sdw</td><td align="center">application/x-sdw</td><td align="center">.sit</td><td align="center">application/x-stuffit</td></tr><tr><td align="center">.slb</td><td align="center">application/x-slb</td><td align="center">.sld</td><td align="center">application/x-sld</td></tr><tr><td align="center">.slk</td><td align="center">drawing/x-slk</td><td align="center">.smi</td><td align="center">application/smil</td></tr><tr><td align="center">.smil</td><td align="center">application/smil</td><td align="center">.smk</td><td align="center">application/x-smk</td></tr><tr><td align="center">.snd</td><td align="center">audio/basic</td><td align="center">.sol</td><td align="center">text/plain</td></tr><tr><td align="center">.sor</td><td align="center">text/plain</td><td align="center">.spc</td><td align="center">application/x-pkcs7-certificates</td></tr><tr><td align="center">.spl</td><td align="center">application/futuresplash</td><td align="center">.spp</td><td align="center">text/xml</td></tr><tr><td align="center">.ssm</td><td align="center">application/streamingmedia</td><td align="center">.sst</td><td align="center">application/vnd.ms-pki.certstore</td></tr><tr><td align="center">.stl</td><td align="center">application/vnd.ms-pki.stl</td><td align="center">.stm</td><td align="center">text/html</td></tr><tr><td align="center">.sty</td><td align="center">application/x-sty</td><td align="center">.svg</td><td align="center">text/xml</td></tr><tr><td align="center">.swf</td><td align="center">application/x-shockwave-flash</td><td align="center">.tdf</td><td align="center">application/x-tdf</td></tr><tr><td align="center">.tg4</td><td align="center">application/x-tg4</td><td align="center">.tga</td><td align="center">application/x-tga</td></tr><tr><td align="center">.tif</td><td align="center">image/tiff</td><td align="center">.tif</td><td align="center">application/x-tif</td></tr><tr><td align="center">.tiff</td><td align="center">image/tiff</td><td align="center">.tld</td><td align="center">text/xml</td></tr><tr><td align="center">.top</td><td align="center">drawing/x-top</td><td align="center">.torrent</td><td align="center">application/x-bittorrent</td></tr><tr><td align="center">.tsd</td><td align="center">text/xml</td><td align="center">.txt</td><td align="center">text/plain</td></tr><tr><td align="center">.uin</td><td align="center">application/x-icq</td><td align="center">.uls</td><td align="center">text/iuls</td></tr><tr><td align="center">.vcf</td><td align="center">text/x-vcard</td><td align="center">.vda</td><td align="center">application/x-vda</td></tr><tr><td align="center">.vdx</td><td align="center">application/vnd.visio</td><td align="center">.vml</td><td align="center">text/xml</td></tr><tr><td align="center">.vpg</td><td align="center">application/x-vpeg005</td><td align="center">.vsd</td><td align="center">application/vnd.visio</td></tr><tr><td align="center">.vsd</td><td align="center">application/x-vsd</td><td align="center">.vss</td><td align="center">application/vnd.visio</td></tr><tr><td align="center">.vst</td><td align="center">application/vnd.visio</td><td align="center">.vst</td><td align="center">application/x-vst</td></tr><tr><td align="center">.vsw</td><td align="center">application/vnd.visio</td><td align="center">.vsx</td><td align="center">application/vnd.visio</td></tr><tr><td align="center">.vtx</td><td align="center">application/vnd.visio</td><td align="center">.vxml</td><td align="center">text/xml</td></tr><tr><td align="center">.wav</td><td align="center">audio/wav</td><td align="center">.wax</td><td align="center">audio/x-ms-wax</td></tr><tr><td align="center">.wb1</td><td align="center">application/x-wb1</td><td align="center">.wb2</td><td align="center">application/x-wb2</td></tr><tr><td align="center">.wb3</td><td align="center">application/x-wb3</td><td align="center">.wbmp</td><td align="center">image/vnd.wap.wbmp</td></tr><tr><td align="center">.wiz</td><td align="center">application/msword</td><td align="center">.wk3</td><td align="center">application/x-wk3</td></tr><tr><td align="center">.wk4</td><td align="center">application/x-wk4</td><td align="center">.wkq</td><td align="center">application/x-wkq</td></tr><tr><td align="center">.wks</td><td align="center">application/x-wks</td><td align="center">.wm</td><td align="center">video/x-ms-wm</td></tr><tr><td align="center">.wma</td><td align="center">audio/x-ms-wma</td><td align="center">.wmd</td><td align="center">application/x-ms-wmd</td></tr><tr><td align="center">.wmf</td><td align="center">application/x-wmf</td><td align="center">.wml</td><td align="center">text/vnd.wap.wml</td></tr><tr><td align="center">.wmv</td><td align="center">video/x-ms-wmv</td><td align="center">.wmx</td><td align="center">video/x-ms-wmx</td></tr><tr><td align="center">.wmz</td><td align="center">application/x-ms-wmz</td><td align="center">.wp6</td><td align="center">application/x-wp6</td></tr><tr><td align="center">.wpd</td><td align="center">application/x-wpd</td><td align="center">.wpg</td><td align="center">application/x-wpg</td></tr><tr><td align="center">.wpl</td><td align="center">application/vnd.ms-wpl</td><td align="center">.wq1</td><td align="center">application/x-wq1</td></tr><tr><td align="center">.wr1</td><td align="center">application/x-wr1</td><td align="center">.wri</td><td align="center">application/x-wri</td></tr><tr><td align="center">.wrk</td><td align="center">application/x-wrk</td><td align="center">.ws</td><td align="center">application/x-ws</td></tr><tr><td align="center">.ws2</td><td align="center">application/x-ws</td><td align="center">.wsc</td><td align="center">text/scriptlet</td></tr><tr><td align="center">.wsdl</td><td align="center">text/xml</td><td align="center">.wvx</td><td align="center">video/x-ms-wvx</td></tr><tr><td align="center">.xdp</td><td align="center">application/vnd.adobe.xdp</td><td align="center">.xdr</td><td align="center">text/xml</td></tr><tr><td align="center">.xfd</td><td align="center">application/vnd.adobe.xfd</td><td align="center">.xfdf</td><td align="center">application/vnd.adobe.xfdf</td></tr><tr><td align="center">.xhtml</td><td align="center">text/html</td><td align="center">.xls</td><td align="center">application/vnd.ms-excel</td></tr><tr><td align="center">.xls</td><td align="center">application/x-xls</td><td align="center">.xlw</td><td align="center">application/x-xlw</td></tr><tr><td align="center">.xml</td><td align="center">text/xml</td><td align="center">.xpl</td><td align="center">audio/scpls</td></tr><tr><td align="center">.xq</td><td align="center">text/xml</td><td align="center">.xql</td><td align="center">text/xml</td></tr><tr><td align="center">.xquery</td><td align="center">text/xml</td><td align="center">.xsd</td><td align="center">text/xml</td></tr><tr><td align="center">.xsl</td><td align="center">text/xml</td><td align="center">.xslt</td><td align="center">text/xml</td></tr><tr><td align="center">.xwd</td><td align="center">application/x-xwd</td><td align="center">.x_b</td><td align="center">application/x-x_b</td></tr><tr><td align="center">.sis</td><td align="center">application/vnd.symbian.install</td><td align="center">.sisx</td><td align="center">application/vnd.symbian.install</td></tr><tr><td align="center">.x_t</td><td align="center">application/x-x_t</td><td align="center">.ipa</td><td align="center">application/vnd.iphone</td></tr><tr><td align="center">.apk</td><td align="center">application/vnd.android.package-archive</td><td align="center">.xap</td><td align="center">application/x-silverlight-app</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java去除字符串中的空格</title>
      <link href="/2019/09/06/tool4/"/>
      <url>/2019/09/06/tool4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/LiuChunfu/p/5661810.html" target="_blank" rel="noopener"><strong>原文链接</strong></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">" Hello  World ! "</span>;</span><br><span class="line">str=str.trim()  <span class="comment">//trim()是去掉首尾空格</span></span><br><span class="line">str=str.replace(<span class="string">" "</span>, <span class="string">""</span>); <span class="comment">//去掉所有空格,包括首尾-中间</span></span><br><span class="line">str=str.replaceAll(<span class="string">" "</span>,<span class="string">""</span>); <span class="comment">//去掉所有空格 </span></span><br><span class="line">str=str.replaceAll(<span class="string">"\\s*"</span>, <span class="string">""</span>); <span class="comment">//可以替换大部分空白字符， 不限于空格 \s可以匹配空格、制表符、换页符等空白字符的其中任意一个 </span></span><br><span class="line">System.out.println(str);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类/简化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串转化为整形、浮点类型(反之)</title>
      <link href="/2019/09/06/tool3/"/>
      <url>/2019/09/06/tool3/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="字符串转化为整形、浮点类型"><a href="#字符串转化为整形、浮点类型" class="headerlink" title="字符串转化为整形、浮点类型"></a>字符串转化为整形、浮点类型</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"100"</span>;</span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">int</span>   a = Integer.parseInt(String s);</span><br><span class="line"><span class="keyword">long</span>  b=  Long.parseLong(String s);</span><br><span class="line"><span class="keyword">float</span> c=  Float.parseFloat(String s);</span><br><span class="line"><span class="keyword">double</span> d= Double.parseDouble(String s) </span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">int</span>   a  = Integer.valueOf(s).intValue();   </span><br><span class="line"><span class="keyword">float</span> c  = Float.valueOf(s).floatValue();</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>Integer.parseInt(String s)生成的是一个整形</p></li><li><p>Integer.valueOf(s).intValue()生成的是一个对象(图示代码<a href="https://blog.csdn.net/qq_33591903/article/details/84259105" target="_blank" rel="noopener"><strong>自动拆箱</strong></a>为基本数据类型)</p></li></ul><blockquote><h5 id="整形、浮点类型转化为字符串"><a href="#整形、浮点类型转化为字符串" class="headerlink" title="整形、浮点类型转化为字符串"></a>整形、浮点类型转化为字符串</h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">float</span> b=<span class="number">2.5f</span>;</span><br><span class="line">     <span class="comment">//方法一</span></span><br><span class="line">    String s=i+<span class="string">""</span>;</span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    String s=String.valueOf(i);</span><br><span class="line">    <span class="comment">//方法三</span></span><br><span class="line">    String s=Integer.toString(i);</span><br><span class="line">    String s2=Float.toString(b);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类/简化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成一定规则递增编号</title>
      <link href="/2019/09/06/tool2/"/>
      <url>/2019/09/06/tool2/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="生成设备编号"><a href="#生成设备编号" class="headerlink" title="生成设备编号"></a><a href="https://blog.csdn.net/Li_Ya_Fei/article/details/80284214" target="_blank" rel="noopener">生成设备编号</a></h5></blockquote><ul><li><p>项目需求中有时需要生成一定规则递增编号。例如生成设备编号：设备类型+五位编号（从1开始,不够前补0）,也就是SYXH000001/SYXH00002/SDOI00001类似这样。</p></li><li><p>那么如何处理000001自增1变为000002呢？</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyf.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成规则设备编号:设备类型+五位编号（从1开始，不够前补0）</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> equipmentType</span></span><br><span class="line"><span class="comment">     *              设备类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> equipmentNo</span></span><br><span class="line"><span class="comment">     *              最新设备编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNewEquipmentNo</span><span class="params">(String equipmentType, String equipmentNo)</span></span>&#123;</span><br><span class="line">        String newEquipmentNo = <span class="string">"00001"</span>;</span><br><span class="line">        <span class="keyword">if</span>(equipmentNo != <span class="keyword">null</span> &amp;&amp; !equipmentNo.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> newEquipment = Integer.parseInt(equipmentNo) + <span class="number">1</span>;</span><br><span class="line">            newEquipmentNo = String.format(equipmentType + <span class="string">"%05d"</span>, newEquipment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newEquipmentNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String equipmentNo = Test2.getNewEquipmentNo(<span class="string">"SYXH"</span>, <span class="string">"00032"</span>);</span><br><span class="line">        System.out.println(<span class="string">"生成设备编号："</span> + equipmentNo);</span><br><span class="line">        <span class="comment">//生成设备编号：SYXH00033</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>从上面代码中可以看到,首先我们<strong>默认了一个初始设备编号</strong>,当传入方法的最新设备编号为null或是空时将使用。 如果传入了数据库中最新设备编号,将首先Integer的<code>parseInt()</code>方法返回十进制整数,这样就可以对其+1。 最后通过String的<code>format()</code>方法进行字符串格式化返回就可以了。</li></ul><blockquote><h5 id="生成ID模板：年月日时分秒-6位自增码"><a href="#生成ID模板：年月日时分秒-6位自增码" class="headerlink" title="生成ID模板：年月日时分秒+6位自增码"></a><a href="https://blog.csdn.net/moneyshi/article/details/46805433" target="_blank" rel="noopener">生成ID模板：年月日时分秒+6位自增码</a></h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sequence = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> length = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * YYYYMMDDHHMMSS+6位自增长码(20位)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shijing</span></span><br><span class="line"><span class="comment">     * 2015年6月29日下午1:25:23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> String <span class="title">getLocalTrmSeqNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sequence = sequence &gt;= <span class="number">999999</span> ? <span class="number">1</span> : sequence + <span class="number">1</span>;</span><br><span class="line">        String datetime = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>)</span><br><span class="line">        .format(<span class="keyword">new</span> Date());</span><br><span class="line">        String s = Integer.toString(sequence);</span><br><span class="line">        <span class="keyword">return</span> datetime +addLeftZero(s, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左填0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> shijing</span></span><br><span class="line"><span class="comment">     * 2015年6月29日下午1:24:32</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addLeftZero</span><span class="params">(String s, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// StringBuilder sb=new StringBuilder();</span></span><br><span class="line">        <span class="keyword">int</span> old = s.length();</span><br><span class="line">        <span class="keyword">if</span> (length &gt; old) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">            <span class="keyword">char</span>[] x = s.toCharArray();</span><br><span class="line">            <span class="keyword">if</span> (x.length &gt; length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"Numeric value is larger than intended length: "</span> + s</span><br><span class="line">                                + <span class="string">" LEN "</span> + length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> lim = c.length - x.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) &#123;</span><br><span class="line">                c[i] = <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.arraycopy(x, <span class="number">0</span>, c, lim, x.length);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(<span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>注意：如果你的ID是Long型,就要注意,Long的最大长度为19位,如果直接转的话会有问题，建议改为<strong>年月日时分秒+5位随机数</strong></li></ul><blockquote><h5 id="取当前时间与字母随机组合，并发少的情况足以胜任"><a href="#取当前时间与字母随机组合，并发少的情况足以胜任" class="headerlink" title="取当前时间与字母随机组合，并发少的情况足以胜任"></a><a href="https://blog.csdn.net/uucai/article/details/8264383" target="_blank" rel="noopener">取当前时间与字母随机组合，并发少的情况足以胜任</a></h5></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"> <span class="comment">//随机组合16位ID</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeeId</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Long h = System.currentTimeMillis();<span class="comment">//获得当前时间的毫秒数</span></span><br><span class="line">        String str = h.toString();<span class="comment">//转化为字符串</span></span><br><span class="line">        <span class="keyword">int</span> i = str.length();<span class="comment">//总长度</span></span><br><span class="line">        <span class="keyword">int</span> j = i-<span class="number">7</span>;<span class="comment">//用来取此字符串的末尾7位数，因为前面的数是年份什么的基本不变，我们只用后面的7位</span></span><br><span class="line">        <span class="keyword">char</span>[] charArray = str.substring(j,i).toCharArray();<span class="comment">//将取到的7位数做成数组</span></span><br><span class="line">        <span class="comment">//将26位字母做成数组</span></span><br><span class="line">        String [] arr = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>,<span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, </span><br><span class="line">                    <span class="string">"h"</span>,<span class="string">"i"</span>,<span class="string">"g"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>,<span class="string">"m"</span>, <span class="string">"n"</span>, </span><br><span class="line">                    <span class="string">"o"</span>, <span class="string">"p"</span>,<span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>,</span><br><span class="line">                    <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>,<span class="string">"y"</span>, <span class="string">"z"</span>&#125;;</span><br><span class="line">        <span class="comment">//将字母数组随机取3个字母组成一个字符串，一共组成3个字符串放到目标数组target中</span></span><br><span class="line">        StringBuffer uniqueId = <span class="keyword">new</span> StringBuffer();<span class="comment">//用于生成唯一ID</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();<span class="comment">//用于取随机数和布尔值</span></span><br><span class="line">        <span class="keyword">boolean</span> insertflag = <span class="keyword">true</span>;<span class="comment">//用来控制是插入数字还是字母</span></span><br><span class="line">        <span class="keyword">int</span> timecount = <span class="number">0</span>;<span class="comment">//用来控制插入数字的长度，别超过7</span></span><br><span class="line">        <span class="keyword">int</span> zimucount = <span class="number">0</span>;<span class="comment">//用来控制插入字母的总数，别超过9 7个数字加上9个字母组合</span></span><br><span class="line">        <span class="keyword">boolean</span> timeflag = <span class="keyword">true</span>;<span class="comment">//判断时间是否插入了7位，默认true为不满</span></span><br><span class="line">        <span class="keyword">boolean</span> zimuflag = <span class="keyword">true</span>;<span class="comment">//判断字母是否插入了9位，默认true为不满</span></span><br><span class="line">        <span class="keyword">while</span> (zimucount&lt;<span class="number">9</span>||timecount&lt;<span class="number">7</span>) &#123;<span class="comment">//开始组合</span></span><br><span class="line">            <span class="keyword">if</span>(insertflag)&#123;<span class="comment">//默认为ture，先加字母，你也可以先加数字</span></span><br><span class="line">                <span class="keyword">if</span> (zimucount&lt;<span class="number">9</span>) &#123;<span class="comment">//如果uniqueId插入的字母总数没超过9个</span></span><br><span class="line">                    uniqueId.append(arr[random.nextInt(<span class="number">26</span>)]);<span class="comment">//则在字母数组中随机选一个插入</span></span><br><span class="line">                    zimucount++;<span class="comment">//对应加1</span></span><br><span class="line">                    <span class="keyword">if</span>(timeflag)&#123;<span class="comment">//如果时间没有插入满7位则重新抓阄看插入时间还是数字</span></span><br><span class="line">                    insertflag = random.nextBoolean();<span class="comment">//重置flag，随机产生false还是true</span></span><br><span class="line">                    &#125;<span class="comment">//如果timeflag=false,时间数字已经插入满7位，则不抓阄了。保持insertflag=true</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果已经加够了否则不操作，</span></span><br><span class="line">                    zimuflag = <span class="keyword">false</span>;<span class="comment">//将zimuflag变为已加够，false</span></span><br><span class="line">                    insertflag = <span class="keyword">false</span>;<span class="comment">//将插入权判断给时间数字</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (timecount&lt;<span class="number">7</span>) &#123;<span class="comment">//先加时间转化成的数组，你也可以先加字母</span></span><br><span class="line">                    <span class="comment">//此处取时间数字数组不能用random随机取。那样用时间来生成数组就没意义了</span></span><br><span class="line">                    uniqueId.append(charArray[timecount]);<span class="comment">//不可打乱顺序</span></span><br><span class="line">                    timecount++;<span class="comment">//对应加1</span></span><br><span class="line">                    <span class="keyword">if</span>(zimuflag)&#123;<span class="comment">//如果字母没有插入满9位则重新抓阄看插入时间还是数字</span></span><br><span class="line">                        insertflag = random.nextBoolean();</span><br><span class="line">                    &#125;<span class="comment">//如果zimuflag=false,字幕已经插入满9位，则不抓阄了。保持insertflag=false</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    timeflag = <span class="keyword">false</span>;<span class="comment">//将timeflag变为已加够，false</span></span><br><span class="line">                    insertflag = <span class="keyword">true</span>;<span class="comment">//将插入权判断给字母</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(uniqueId.toString());<span class="comment">//得到最终id</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类/简化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规则编号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对日期Date相应处理</title>
      <link href="/2019/09/06/tool1/"/>
      <url>/2019/09/06/tool1/</url>
      
        <content type="html"><![CDATA[<p><strong>参考链接:</strong></p><p><a href="https://www.jb51.net/article/101771.htm" target="_blank" rel="noopener"><strong>Java对日期Date相应处理</strong></a></p><p><a href="https://www.cnblogs.com/luoshuhong/p/3527317.html" target="_blank" rel="noopener"><strong>时间相减得到天数</strong></a></p><p><a href="https://blog.csdn.net/yibanbairimeng/article/details/61416905" target="_blank" rel="noopener"><strong>JAVA获取当前时间的前一天或者前几天时间</strong></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * JAVA获取当前时间的前一天或者前几天时间</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> date 当前时间 new Date()</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">      SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">      Calendar calendar = Calendar.getInstance();</span><br><span class="line">      calendar.setTime(date);</span><br><span class="line">      <span class="comment">//获取后一天的当前时间 +1即可 </span></span><br><span class="line">      calendar.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">      date = calendar.getTime();</span><br><span class="line">     <span class="keyword">return</span> sdf.format(date);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.data.utils;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormat</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 补充:功能描述：时间相减得到天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beginDateStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endDateStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * long </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDaySub</span><span class="params">(String beginDateStr,String endDateStr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> day=<span class="number">0</span>;</span><br><span class="line">        java.text.SimpleDateFormat format = <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);    </span><br><span class="line">        java.util.Date beginDate;</span><br><span class="line">        java.util.Date endDate;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            beginDate = format.parse(beginDateStr);</span><br><span class="line">            endDate= format.parse(endDateStr);    </span><br><span class="line">            day=(endDate.getTime()-beginDate.getTime())/(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);    </span><br><span class="line">            <span class="comment">//System.out.println("相隔的天数="+day);   </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// TODO 自动生成 catch 块</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 日期减几年</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateMinusYear</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMM"</span>);</span><br><span class="line">  Date dt = sdf.parse(str);</span><br><span class="line">  Calendar rightNow = Calendar.getInstance();</span><br><span class="line">  rightNow.setTime(dt);</span><br><span class="line">  rightNow.add(Calendar.YEAR, -<span class="number">1</span>);<span class="comment">// 日期减1年</span></span><br><span class="line">  Date dt1 = rightNow.getTime();</span><br><span class="line">  String reStr = sdf.format(dt1);</span><br><span class="line">  <span class="keyword">return</span> reStr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 日期加几年</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateAddYear</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMM"</span>);</span><br><span class="line">  Date dt = sdf.parse(str);</span><br><span class="line">  Calendar rightNow = Calendar.getInstance();</span><br><span class="line">  rightNow.setTime(dt);</span><br><span class="line">  rightNow.add(Calendar.YEAR, <span class="number">1</span>);<span class="comment">// 日期加1年</span></span><br><span class="line">  Date dt1 = rightNow.getTime();</span><br><span class="line">  String reStr = sdf.format(dt1);</span><br><span class="line">  <span class="keyword">return</span> reStr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 日期减几月</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateMinusMonth</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMM"</span>);</span><br><span class="line">  Date dt = sdf.parse(str);<span class="comment">//将字符串生成Date</span></span><br><span class="line">  Calendar rightNow = Calendar.getInstance();</span><br><span class="line">  rightNow.setTime(dt);<span class="comment">//使用给定的 Date 设置此 Calendar 的时间。 </span></span><br><span class="line">  rightNow.add(Calendar.MONTH, -<span class="number">1</span>);<span class="comment">// 日期减1个月</span></span><br><span class="line">  Date dt1 = rightNow.getTime();<span class="comment">//返回一个表示此 Calendar 时间值的 Date 对象。</span></span><br><span class="line">  String reStr = sdf.format(dt1);<span class="comment">//将给定的 Date 格式化为日期/时间字符串，并将结果添加到给定的 StringBuffer。</span></span><br><span class="line">  <span class="keyword">return</span> reStr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 日期加几月</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateAddMonth</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMM"</span>);</span><br><span class="line">  Date dt = sdf.parse(str);</span><br><span class="line">  Calendar rightNow = Calendar.getInstance();</span><br><span class="line">  rightNow.setTime(dt);</span><br><span class="line">  rightNow.add(Calendar.MONTH, <span class="number">1</span>);<span class="comment">// 日期加3个月</span></span><br><span class="line">  <span class="comment">// rightNow.add(Calendar.DAY_OF_YEAR,10);//日期加10天</span></span><br><span class="line">  Date dt1 = rightNow.getTime();</span><br><span class="line">  String reStr = sdf.format(dt1);</span><br><span class="line">  <span class="keyword">return</span> reStr;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取当前年月的第一个月的str</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">  *   201505</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 201501</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateOneMonth</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  str = str.substring(<span class="number">0</span>, str.length() - <span class="number">2</span>);</span><br><span class="line">  str = str + <span class="string">"01"</span>;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 算出所选月份距离一月份有几个月。</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> str 201509</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 9</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dateDistanceMonth</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i = Integer.parseInt(str);</span><br><span class="line">  <span class="keyword">int</span> j = Integer.parseInt(DateFormat.dateOneMonth(str));</span><br><span class="line">  System.out.println(i - j);</span><br><span class="line">  <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取两个时间的时间差，精确到毫秒</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">TimeDifference</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> between = end - start;</span><br><span class="line">  <span class="keyword">long</span> day = between / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">long</span> hour = (between / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) - day * <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">long</span> min = ((between / (<span class="number">60</span> * <span class="number">1000</span>)) - day * <span class="number">24</span> * <span class="number">60</span> - hour * <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">long</span> s = (between / <span class="number">1000</span> - day * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> - hour * <span class="number">60</span> * <span class="number">60</span> - min * <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">long</span> ms = (between - day * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> - hour * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    - min * <span class="number">60</span> * <span class="number">1000</span> - s * <span class="number">1000</span>);</span><br><span class="line">  String timeDifference = day + <span class="string">"天"</span> + hour + <span class="string">"小时"</span> + min + <span class="string">"分"</span> + s + <span class="string">"秒"</span> + ms</span><br><span class="line">    + <span class="string">"毫秒"</span>;</span><br><span class="line">  <span class="keyword">return</span> timeDifference;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取24小时、一周、一个月的起始时间</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> timeInterval</span></span><br><span class="line"><span class="comment">  *   : DAY_TIME_INTERVAL WEEK_TIME_INTERVAL MONTH_TIME_INTERVAL</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> "yyyy-mm-dd hh:mm:ss"</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStartTime</span><span class="params">(<span class="keyword">int</span> timeInterval)</span> </span>&#123;</span><br><span class="line">  Calendar cal = Calendar.getInstance();</span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">  <span class="keyword">if</span> (DAY_TIME_INTERVAL == timeInterval) &#123;<span class="comment">// 获取24小时的起始时间</span></span><br><span class="line">   cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">   cal.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">   cal.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">   String startTime = sdf.format(cal.getTime());</span><br><span class="line">   <span class="keyword">return</span> startTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WEEK_TIME_INTERVAL == timeInterval) &#123;</span><br><span class="line">   <span class="keyword">int</span> weekday = cal.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">   cal.add(Calendar.DATE, -weekday);</span><br><span class="line">   cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">   cal.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">   cal.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">   String startTime = sdf.format(cal.getTime());</span><br><span class="line">   <span class="keyword">return</span> startTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MONTH_TIME_INTERVAL == timeInterval) &#123;</span><br><span class="line">   <span class="keyword">int</span> dayofmonthMin = cal.getActualMinimum(Calendar.DAY_OF_MONTH);</span><br><span class="line">   <span class="comment">// c.add(Calendar.DATE, -dayofmonth);</span></span><br><span class="line">   cal.set(Calendar.DATE, dayofmonthMin);</span><br><span class="line">   cal.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">   cal.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">   cal.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">   String startTime = sdf.format(cal.getTime());</span><br><span class="line">   <span class="keyword">return</span> startTime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取24小时、一周、一个月的结束时间</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> timeInterval</span></span><br><span class="line"><span class="comment">  *   : DAY_TIME_INTERVAL WEEK_TIME_INTERVAL MONTH_TIME_INTERVAL</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> "yyyy-mm-dd hh:mm:ss"</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEndTime</span><span class="params">(<span class="keyword">int</span> timeInterval)</span> </span>&#123;</span><br><span class="line">  Calendar cal = Calendar.getInstance();</span><br><span class="line">  cal.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT+8"</span>));</span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">  <span class="keyword">if</span> (DAY_TIME_INTERVAL == timeInterval) &#123;</span><br><span class="line">   cal.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">   cal.set(<span class="number">12</span>, <span class="number">59</span>);</span><br><span class="line">   cal.set(<span class="number">13</span>, <span class="number">59</span>);</span><br><span class="line">   <span class="keyword">long</span> date = cal.getTimeInMillis();</span><br><span class="line">   String endTime = sdf.format(<span class="keyword">new</span> Date(date));</span><br><span class="line">   <span class="keyword">return</span> endTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (WEEK_TIME_INTERVAL == timeInterval) &#123;</span><br><span class="line">   <span class="keyword">int</span> weekday = cal.get(Calendar.DAY_OF_WEEK) - <span class="number">1</span>;</span><br><span class="line">   cal.add(Calendar.DATE, -weekday);</span><br><span class="line">   cal.add(Calendar.DATE, <span class="number">6</span>);</span><br><span class="line">   cal.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">   cal.set(<span class="number">12</span>, <span class="number">59</span>);</span><br><span class="line">   cal.set(<span class="number">13</span>, <span class="number">59</span>);</span><br><span class="line">   <span class="keyword">long</span> date = cal.getTimeInMillis();</span><br><span class="line">   String endTime = sdf.format(<span class="keyword">new</span> Date(date));</span><br><span class="line">   <span class="keyword">return</span> endTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MONTH_TIME_INTERVAL == timeInterval) &#123;</span><br><span class="line">   <span class="keyword">int</span> dayOfMonthMax = cal.getActualMaximum(Calendar.DAY_OF_MONTH);</span><br><span class="line">   cal.set(Calendar.DATE, dayOfMonthMax);</span><br><span class="line">   cal.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">   cal.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">   cal.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">   String endTime = sdf.format(cal.getTime());</span><br><span class="line">   <span class="keyword">return</span> endTime;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断dateStr是否在start和end中间，start和end都可以为null yyyyMMddHHmmss或者yyyyMMdd格式</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> you.xu</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> 2015年8月19日下午3:11:46</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dateStr</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkDateVal</span><span class="params">(String dateStr, String start, String end)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> isDateRight = <span class="keyword">false</span>;</span><br><span class="line">  Date date = <span class="keyword">null</span>;</span><br><span class="line">  Date startDate = <span class="keyword">null</span>;</span><br><span class="line">  Date endDate = <span class="keyword">null</span>;</span><br><span class="line">  SimpleDateFormat sdf = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// 判断日期格式</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="number">14</span> == dateStr.length()) &#123;</span><br><span class="line">   sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">8</span> == dateStr.length()) &#123;</span><br><span class="line">   sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// 更改判断日期格式</span></span><br><span class="line">   date = sdf.parse(dateStr);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">   log.error(e, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((start == <span class="keyword">null</span>) &amp;&amp; (end != <span class="keyword">null</span>)) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    endDate = sdf.parse(end);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ParseException ex1) &#123;</span><br><span class="line">    log.error(ex1, ex1);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ((date != <span class="keyword">null</span>) &amp;&amp; (endDate != <span class="keyword">null</span>))<span class="comment">// Check parameters for</span></span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">if</span> (date.compareTo(endDate) &lt;= <span class="number">0</span>)</span><br><span class="line">     isDateRight = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((start != <span class="keyword">null</span>) &amp;&amp; (end == <span class="keyword">null</span>)) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    startDate = sdf.parse(start);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ParseException ex1) &#123;</span><br><span class="line">    log.error(ex1, ex1);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ((date != <span class="keyword">null</span>) &amp;&amp; (startDate != <span class="keyword">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (date.compareTo(startDate) &gt;= <span class="number">0</span>)</span><br><span class="line">     isDateRight = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((start != <span class="keyword">null</span>) &amp;&amp; (end != <span class="keyword">null</span>)) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    startDate = sdf.parse(start);</span><br><span class="line">    endDate = sdf.parse(end);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ParseException ex2) &#123;</span><br><span class="line">    System.out.println(ex2.toString());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ((startDate != <span class="keyword">null</span>) &amp;&amp; (date != <span class="keyword">null</span>) &amp;&amp; (endDate != <span class="keyword">null</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((date.compareTo(startDate) &gt;= <span class="number">0</span>)</span><br><span class="line">      &amp;&amp; (date.compareTo(endDate) &lt;= <span class="number">0</span>))</span><br><span class="line">     isDateRight = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isDateRight;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断dateStr是否在start和end中间，start和end都可以为null long形格式</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> you.xu</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> 2015年8月19日下午3:12:35</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> dateStr</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkDateV</span><span class="params">(String dateStr, String start, String end)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> isDateRight = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">long</span> date = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">long</span> fromDate = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">long</span> toDate = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  date = java.lang.Long.parseLong(dateStr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((start == <span class="keyword">null</span>) &amp;&amp; (end == <span class="keyword">null</span>)) &#123;</span><br><span class="line">   isDateRight = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((start == <span class="keyword">null</span>) &amp;&amp; (end != <span class="keyword">null</span>)) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    toDate = java.lang.Long.parseLong(end);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">    log.error(nfe, nfe);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (date &lt;= toDate) &#123;</span><br><span class="line">    isDateRight = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((start != <span class="keyword">null</span>) &amp;&amp; (end == <span class="keyword">null</span>)) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    fromDate = java.lang.Long.parseLong(start);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">    log.error(nfe, nfe);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (date &gt;= fromDate) &#123;</span><br><span class="line">    isDateRight = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((start != <span class="keyword">null</span>) &amp;&amp; (end != <span class="keyword">null</span>)) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">    toDate = java.lang.Long.parseLong(end);</span><br><span class="line">    fromDate = java.lang.Long.parseLong(start);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">    log.error(nfe, nfe);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> ((date &lt;= toDate) &amp;&amp; (date &gt;= fromDate)) &#123;</span><br><span class="line">    isDateRight = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isDateRight;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类/简化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requestbody接收json参数映射到实体类中Date(时间日期)类型转换问题</title>
      <link href="/2019/09/06/springboot4/"/>
      <url>/2019/09/06/springboot4/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>场景</strong>：</p><p>前台ajax提交, 后台@requestbody接收json参数 映射到 实体类中 Date（时间日期）类型转换</p></li><li><p><strong>解决方案：</strong> JsonFormat ：出参     DateTimeFormate ： 入参</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span><br><span class="line">private Date startTime;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>pattern 指定转化的格式</p></li><li><p>locale  主要指语言，如果中文的话，月份输出是五月，但是英文就是May</p></li><li><p>timezone主要解决“8小时”问题(时区问题)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境、测试环境、生产环境、UAT环境、仿真环境</title>
      <link href="/2019/09/06/xzs1/"/>
      <url>/2019/09/06/xzs1/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://blog.csdn.net/aaa333qwe/article/details/77482099" target="_blank" rel="noopener"><strong>参考链接</strong></a></p></li><li><p><strong>开发环境(DEV)</strong>：开发环境是程序猿们专门用于开发的服务器，配置可以比较随意， 为了开发调试方便，一般打开全部错误报告。</p></li><li><p><strong>测试环境(UAT)</strong>：一般是克隆一份生产环境的配置，一个程序在测试环境工作不正常，那么肯定不能把它发布到生产机上。</p></li><li><p><strong>生产环境(PROD)</strong>：是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。可以理解为包含所有的功能的环境，任何项目所使用的环境都以这个为基础，然后根据客户的个性化需求来做调整或者修改。</p></li></ul><a id="more"></a><p><strong>三个环境也可以说是系统开发的三个阶段：开发-&gt;测试-&gt;上线，其中生产环境也就是通常说的真实环境。</strong></p><ul><li><p><strong>UAT环境</strong>：UAT,(User Acceptance Test),用户接受度测试 即验收测试，所以UAT环境主要是用来作为客户体验的环境。</p></li><li><p><strong>仿真环境</strong>：顾名思义是和真正使用的环境一样的环境（即已经出售给客户的系统所在环境，也成为商用环境），所有的配置，页面展示等都应该和商家正在使用的一样，差别只在环境的性能方面。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>application.properties常用设置</title>
      <link href="/2019/09/06/springboot3/"/>
      <url>/2019/09/06/springboot3/</url>
      
        <content type="html"><![CDATA[<h3 id="application-properties常用设置"><a href="#application-properties常用设置" class="headerlink" title="application.properties常用设置"></a>application.properties常用设置</h3><p>1.编码格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.http.encoding.force=<span class="keyword">true</span></span><br><span class="line">spring.http.encoding.charset=UTF-<span class="number">8</span></span><br><span class="line">spring.http.encoding.enabled=<span class="keyword">true</span></span><br><span class="line">server.tomcat.uri-encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保存时间比当前时间少8小时</title>
      <link href="/2019/09/06/springboot2/"/>
      <url>/2019/09/06/springboot2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>原因：<strong>时区问题</strong></p></li><li><p>解决方案：</p><p>在连接url增加时区设置参数(时区GMT+8的设置)</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://localhost/database?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2b8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No primary or default constructor found ...</title>
      <link href="/2019/09/06/springboot1/"/>
      <url>/2019/09/06/springboot1/</url>
      
        <content type="html"><![CDATA[<p> <strong>No primary or default constructor found for interface java.util.List</strong></p><ul><li><p><strong>原因</strong>:</p><ul><li>调用请求进行参数映射时出错.</li></ul></li><li><p><strong>解决方法(加上注解即可)</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">showCollectPros</span><span class="params">(@RequestParam(value = <span class="string">"content"</span>)</span> List&lt;String&gt; content) </span>&#123;</span><br><span class="line">            <span class="keyword">do</span> smoething...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jpa多表原生sql自定义字段条件查询并进行分页和排序(时间格式)</title>
      <link href="/2019/09/06/JPA2/"/>
      <url>/2019/09/06/JPA2/</url>
      
        <content type="html"><![CDATA[<p> <strong>Jpa多表原生sql自定义字段条件查询并进行分页和排序</strong></p><ul><li><p>前台使用的是layui  由于后台jpa多表查询使用的是 List&lt;Map&lt;String, Object&gt;&gt; 自定义字段输出 因此时间create_time方面会出现问题,template定义的有解决方法.</p></li><li><p>前台部分代码</p></li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  table.render(&#123;</span><br><span class="line">          elem: <span class="string">'#demo'</span>,</span><br><span class="line">          url: server + <span class="string">'orders/getAllOrders'</span>,</span><br><span class="line">          cellMinWidth: <span class="number">80</span>,</span><br><span class="line">          size: <span class="string">'lg'</span>,</span><br><span class="line">          title: <span class="string">'orders'</span>,</span><br><span class="line">          cols: [</span><br><span class="line">              [ <span class="comment">//标题栏</span></span><br><span class="line">                  &#123;</span><br><span class="line">                      checkbox: <span class="literal">true</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                      field: <span class="string">'order_no'</span>,</span><br><span class="line">                      title: <span class="string">'orderNo'</span>,</span><br><span class="line">                          sort: <span class="literal">true</span></span><br><span class="line">                      &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                      field: <span class="string">'uno'</span>,</span><br><span class="line">                      title: <span class="string">'uno'</span>,</span><br><span class="line">                      sort: <span class="literal">true</span>,</span><br><span class="line">                      align: <span class="string">'center'</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                      field: <span class="string">'create_time'</span>,</span><br><span class="line">                      title: <span class="string">'createTime'</span>,</span><br><span class="line">                          sort: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">//特殊日期格式转换2018-12-03T17:17:36.000+08:00 转化为2018-12-03 00:00:00(正则表达式的方法)</span></span><br><span class="line">                      templet: <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; </span><br><span class="line">                          <span class="keyword">var</span> dateee = <span class="keyword">new</span> <span class="built_in">Date</span>(d.create_time).toJSON();    </span><br><span class="line">                          <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span>(dateee) + <span class="number">8</span> * <span class="number">3600</span> * <span class="number">1000</span>).toISOString().replace(<span class="regexp">/T/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/\.[\d]&#123;3&#125;Z/</span>, <span class="string">''</span>) </span><br><span class="line">                          <span class="keyword">return</span> date;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      align: <span class="string">'center'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  ,.....</span><br><span class="line">                  ]]</span><br><span class="line">                  &#125;);</span><br></pre></td></tr></table></figure><ul><li>实体类接收前台传来条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> <span class="doctag">@ClassName</span>：ProductSelect</span></span><br><span class="line"><span class="comment"> <span class="doctag">@Author</span>：yyr</span></span><br><span class="line"><span class="comment"> <span class="doctag">@Date</span>：2019-04-16 9:54</span></span><br><span class="line"><span class="comment"> <span class="doctag">@Description</span>：分页查询使用条件类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductSelect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前第几页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> page;</span><br><span class="line">    <span class="comment">//每页多少条数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit; </span><br><span class="line">    <span class="comment">//模糊查询名称条件</span></span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">""</span>;</span><br><span class="line">    <span class="comment">//订单类型</span></span><br><span class="line">    <span class="keyword">private</span> String selectType=<span class="string">""</span>;</span><br><span class="line">    <span class="comment">//按某一列进行排序</span></span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line">    <span class="comment">//排序方式(ASC/DESC)</span></span><br><span class="line">    <span class="keyword">private</span> String order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Controller方法定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"条件查询订单详细信息并进行分页"</span>, notes = <span class="string">"条件查询订单详细信息并进行分页"</span>)</span><br><span class="line"> <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"pro"</span>, value = <span class="string">"查询的条件"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"ProductSelect"</span>)</span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/getAllOrders"</span>, method = RequestMethod.GET)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">getAllOrders</span><span class="params">(ProductSelect pro)</span> </span>&#123;</span><br><span class="line">     Sort sort=<span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (pro.getField() == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="comment">//默认时间降序排序</span></span><br><span class="line">         sort=<span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"create_time"</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         String s=<span class="string">"desc"</span>;</span><br><span class="line">         <span class="keyword">if</span>(pro.getOrder().equals(s))&#123;</span><br><span class="line">              sort=<span class="keyword">new</span> Sort(Sort.Direction.DESC,pro.getField());</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             sort=<span class="keyword">new</span> Sort(Sort.Direction.ASC,pro.getField());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    String type = pro.getSelectType();</span><br><span class="line">     String order_type = <span class="string">""</span>;</span><br><span class="line">     <span class="keyword">if</span> (type != <span class="string">""</span>) &#123;</span><br><span class="line">         <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">"pro"</span>:</span><br><span class="line">                 order_type = <span class="string">"PI"</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">"point"</span>:</span><br><span class="line">                 order_type = <span class="string">"GI"</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> <span class="string">"demand"</span>:</span><br><span class="line">                 order_type = <span class="string">"DE"</span>;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">default</span>:</span><br><span class="line">                 System.out.println(<span class="string">"没有啦"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//接收的名称</span></span><br><span class="line">     String name = pro.getName();</span><br><span class="line">     <span class="comment">//分页和排序</span></span><br><span class="line">     Pageable pageable= PageRequest.of(pro.getPage() - <span class="number">1</span>,pro.getLimit(),sort);</span><br><span class="line">     <span class="comment">//条件查询后排序和分页后的数据</span></span><br><span class="line">     List&lt;Map&lt;String, Object&gt;&gt; list = productOrderDao.getAllOrders(name, order_type,pageable);</span><br><span class="line">     <span class="comment">//条件查询后数据总条数</span></span><br><span class="line">     <span class="keyword">int</span> total = productOrderDao.getTotal(name, order_type);</span><br><span class="line">     <span class="keyword">return</span> MapTool.paging(list, total);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>MapTool工具类 (layui前台接收数据时有一定格式要求的,所以要按一定格式返回)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">paging</span><span class="params">(List&lt;?&gt; list, <span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="string">"count"</span>, count);</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>, <span class="string">"返回信息成功"</span>);</span><br><span class="line">        map.put(<span class="string">"data"</span>, list);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>接口:原生sql多表条件查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductOrderDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">ProductOrder</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取条件查询后的订单</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> name 订单编号/客户编号/业务编号(产品订单+积份订单+需求订单 取三种订单的共同字段-订单编号,客户编号,订单状态,创建时间,业务编号)</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> type 订单类型</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@param</span> sort 分页排序</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"select * from (SELECT p.order_no ,p.uno,p.order_status ,p.create_time ,(SELECT sno FROM users WHERE uno=p.uno)sno  "</span> +</span><br><span class="line">            <span class="string">" FROM product_order p UNION  "</span> +</span><br><span class="line">            <span class="string">"SELECT g.order_no,g.uno,g.status,g.charge_time,(SELECT sno FROM users WHERE uno=g.uno)sno FROM gift_charge g  "</span> +</span><br><span class="line">            <span class="string">"UNION  SELECT  d.orderno,d.uno,d.status,d.createtime, (SELECT sno FROM users WHERE uno=d.uno)sno FROM demands d "</span> +</span><br><span class="line">            <span class="string">" ) p   WHERE (order_no LIKE  concat('%',?1,'%') OR uno LIKE concat('%',?1,'%') OR sno LIKE concat('%',?1,'%')) "</span> +</span><br><span class="line">            <span class="string">"  AND  order_no LIKE concat('%',?2,'%')  "</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; getAllOrders( String name, String type, Pageable sort);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取条件查询后订单的总数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 订单编号/客户编号/业务编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 订单类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query</span>(value = <span class="string">"select count(*) from (SELECT p.order_no,p.uno,p.order_status,p.create_time,(SELECT sno FROM users WHERE uno=p.uno)sno  "</span> +</span><br><span class="line">            <span class="string">" FROM product_order p   UNION  "</span> +</span><br><span class="line">            <span class="string">"SELECT g.order_no,g.uno,g.status,g.charge_time,(SELECT sno FROM users WHERE uno=g.uno)sno FROM gift_charge g "</span> +</span><br><span class="line">            <span class="string">"UNION  SELECT  d.orderno,d.uno,d.status,d.createtime, (SELECT sno FROM users WHERE uno=d.uno)sno FROM demands d )t"</span> +</span><br><span class="line">            <span class="string">" WHERE (order_no LIKE  concat('%',?1,'%') OR uno LIKE concat('%',?1,'%') OR sno LIKE concat('%',?1,'%')) "</span> +</span><br><span class="line">            <span class="string">"    AND  order_no LIKE concat('%',?2,'%')  "</span> ,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTotal</span><span class="params">(String name, String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>经测试可用,但需注意getAllOrders()sql编写:排序时可先正常编写sql,运行后检查控制台sql语句后跟随的排序是如何定义的,以创建时间升序为例-本接口下sql语句后跟随的是</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by p.create_time asc limit ?</span><br></pre></td></tr></table></figure><p>后台sql中会自动给字段找了个别名引用,或许跟接口定义有关吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProductOrderDao extends JpaRepository&lt;ProductOrder,Integer&gt;</span><br></pre></td></tr></table></figure><ul><li>因此将查询后的数据重新放进另一张表并定义好别名p: 这样sql语句运行时就不会出现字段异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (需要查询的数据) p</span><br></pre></td></tr></table></figure><ul><li>原接口本想使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;Map&lt;String, Object&gt;&gt; getAllOrders( String name, String type, Pageable sort);</span><br></pre></td></tr></table></figure><p>这样count就不需要手动再次编写,但是查询总数时出现问题 count查询语句不正确,因此放弃</p><p>最后分两步走,先条件查询数据,再条件查询count</p>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layui </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data JPA调用存储过程实例</title>
      <link href="/2019/09/06/JPA1/"/>
      <url>/2019/09/06/JPA1/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://blog.csdn.net/chszs/article/details/50127823" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><ul><li>SQL方面</li></ul><p>假设调用的存储过程形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> <span class="keyword">PROCEDURE</span> in_only_test (inParam1 <span class="keyword">IN</span> <span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">call</span> <span class="keyword">PROCEDURE</span> in_and_out_test (inParam1 <span class="keyword">IN</span> <span class="built_in">VARCHAR</span>, outParam1 <span class="keyword">OUT</span> <span class="built_in">VARCHAR</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>这里有两个存储过程：</p><p><code>in\_only\_test</code>           它需要一个输入参数inParam1,但不返回值</p><p><code>in\_and\_out\_test</code>    它需要一个输入参数inParam1,且返回值outParam1</p><ul><li>JPA方面</li></ul><p>我们可以使用@NamedStoredProcedureQueries来调用存储过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"MYTABLE"</span>)</span><br><span class="line"><span class="meta">@NamedStoredProcedureQueries</span>(&#123;</span><br><span class="line">        <span class="meta">@NamedStoredProcedureQuery</span>(name = <span class="string">"in_only_test"</span>, procedureName = <span class="string">"in_only_test"</span>, parameters = &#123;</span><br><span class="line">                <span class="meta">@StoredProcedureParameter</span>(mode = ParameterMode.IN, name = <span class="string">"inParam1"</span>, type = String.class) &#125;),</span><br><span class="line">        <span class="meta">@NamedStoredProcedureQuery</span>(name = <span class="string">"in_and_out_test"</span>, procedureName = <span class="string">"in_and_out_test"</span>, parameters = &#123;</span><br><span class="line">                <span class="meta">@StoredProcedureParameter</span>(mode = ParameterMode.IN, name = <span class="string">"inParam1"</span>, type = String.class),</span><br><span class="line">                <span class="meta">@StoredProcedureParameter</span>(mode = ParameterMode.OUT, name = <span class="string">"outParam1"</span>, type = String.class) &#125;) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键要点</strong>:存储过程使用了注释<code>@NamedStoredProcedureQuery</code>并绑定到一个JPA表。<code>procedureName</code>是存储过程的名字<br><code>name</code>是JPA中的存储过程的名字。使用注释<code>@StoredProcedureParameter</code>来定义存储过程使用的IN/OUT参数</p><ul><li>MyTableRepository仓库调用存储过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyTableRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">MyTable</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Procedure</span>(name = <span class="string">"in_only_test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOnlyTest</span><span class="params">(@Param(<span class="string">"inParam1"</span>)</span> String inParam1)</span>;</span><br><span class="line">    <span class="meta">@Procedure</span>(name = <span class="string">"in_and_out_test"</span>)</span><br><span class="line">    <span class="function">String <span class="title">inAndOutTest</span><span class="params">(@Param(<span class="string">"inParam1"</span>)</span> String inParam1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键要点:</strong></p><ul><li><p><strong>@Procedure的name参数必须匹配@NamedStoredProcedureQuery的name</strong></p></li><li><p><strong>@Param必须匹配@StoredProcedureParameter注释的name参数</strong></p></li><li><p><strong>返回类型必须匹配:in_only_test存储过程返回是void,in_and_out_test存储过程必须返回String</strong></p></li></ul><ul><li><strong>调用</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向存储过程传递参数并返回值</span></span><br><span class="line">String inParam = <span class="string">"Hi Im an inputParam"</span>;</span><br><span class="line">String outParam = myTableRepository.inAndOutTest(inParam);</span><br><span class="line">Assert.assertEquals(outParam, <span class="string">"Woohoo Im an outparam, and this is my inparam Hi Im an inputParam"</span>);</span><br><span class="line"><span class="comment">// 向存储过程传递参数不返回值</span></span><br><span class="line">myTableRepository.inOnlyTest(inParam);</span><br></pre></td></tr></table></figure><blockquote><p><strong>其它技巧</strong></p></blockquote><p><strong>原生sql查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本案例为自定义的结果数据</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">" call get_order(?1,?2,?3,?4)"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt;  showOrderMoney( String begin, String end,  String sno, String country);</span><br></pre></td></tr></table></figure><p><strong>需注意:该存储过程本身主要针对的是select返回数据,即调用存储过程之后本身就有结果,所有与out参数无关.</strong></p><p> <strong>定义自定义的Repository来调用存储过程</strong></p><ul><li>定义自定义的Repository:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyTableRepositoryCustom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOnlyTest</span><span class="params">(String inParam1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后要确保主Repository类继承了这个接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyTableRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">MyTable</span>, <span class="title">Long</span>&gt;, <span class="title">MyTableRepositoryCustom</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Repository实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTableRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">MyTableRepositoryCustom</span> </span>&#123;</span><br><span class="line"><span class="meta">@PersistenceContext</span></span><br><span class="line"><span class="keyword">private</span> EntityManager em;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOnlyTest</span><span class="params">(String inParam1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.em.createNativeQuery(<span class="string">"BEGIN in_only_test(:inParam1); END;"</span>).setParameter(<span class="string">"inParam1"</span>, inParam1)</span><br><span class="line">            .executeUpdate();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>可以以常规的方式进行调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MyTableRepository myTableRepository;</span><br><span class="line"><span class="comment">// 调用存储过程</span></span><br><span class="line">myTableRepository.inOnlyTest(inParam1);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList循环遍历并删除元素的常见陷阱</title>
      <link href="/2019/09/06/jihe4/"/>
      <url>/2019/09/06/jihe4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/huangjinyong/p/9455163.html" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><ul><li>代码示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">public class ArrayListRemove</span><br><span class="line">&#123;</span><br><span class="line">　　publicstaticvoidmain(String[]args)</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　ArrayList&lt;String&gt;list=newArrayList&lt;String&gt;();</span><br><span class="line">　　　　list.add(&quot;a&quot;);</span><br><span class="line">　　　　list.add(&quot;b&quot;);</span><br><span class="line">　　　　list.add(&quot;b&quot;);</span><br><span class="line">　　　　list.add(&quot;c&quot;);</span><br><span class="line">　　　　list.add(&quot;c&quot;);</span><br><span class="line">　　　　list.add(&quot;c&quot;);</span><br><span class="line">　　　　remove(list);</span><br><span class="line">　　　　for(Strings:list)</span><br><span class="line">　　　　&#123;</span><br><span class="line">　　　　　　System.out.println(&quot;element : &quot;+s);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　public static void remove(ArrayList&lt;String&gt; list)</span><br><span class="line">　　&#123;</span><br><span class="line">　　// TODO:</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p><strong>操作：想删除list的b字符</strong></p></blockquote><p><strong>1.错误例子1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void remove(ArrayList&lt;String&gt; list)</span><br><span class="line">&#123;</span><br><span class="line">    for(inti=0;i&lt;list.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Strings=list.get(i);</span><br><span class="line">        if(s.equals(&quot;b&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            list.remove(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>效果：这种最普通的循环写法执行后会发现第二个“b”的字符串没有删掉</p></li><li><p>原因：</p></li></ul><p>翻开JDK的ArrayList源码，先看下ArrayList中的remove方法（注意ArrayList中的remove有两个同名方法，只是入参不同，这里看的是入参为Object的remove方法）是怎么实现的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Objecto)&#123;</span><br><span class="line">    if(o==null)&#123;</span><br><span class="line">        for(intindex=0;index&lt;size;index++)</span><br><span class="line">            if(elementData[index]==null)&#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                for(intindex=0;index&lt;size;index++)</span><br><span class="line">                if(o.equals(elementData[index]))&#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下程序的执行路径会走到else路径下最终调用faseRemove方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void fastRemove(int index)&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        intnumMoved=size-index-1;</span><br><span class="line">        if(numMoved&gt;0)             </span><br><span class="line">        　　System.arraycopy(elementData,index+1,elementData,index,numMoved);</span><br><span class="line">        elementData[--size]=null;// Let gc do its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以看到会执行System.arraycopy方法，导致删除元素时涉及到数组元素的移动</strong>。在遍历第一个字符串b时因为符合删除条件，所以将该元素从数组中删除，并且将后一个元素移动（也就是第二个字符串b）至当前位置，导致下一次循环遍历时后一个字符串b并没有遍历到，所以无法删除。</p><ul><li>针对这种情况可以_<strong>倒序删除</strong>_的方式来避免（因为数组倒序遍历时即使发生元素删除也不影响后序元素遍历）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void remove(ArrayList&lt;String&gt; list)</span><br><span class="line">&#123;</span><br><span class="line">    for(inti=list.size()-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        Strings=list.get(i);</span><br><span class="line">        if(s.equals(&quot;b&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            list.remove(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.错误例子2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void remove(ArrayList&lt;String&gt; list)</span><br><span class="line">&#123;</span><br><span class="line">    for(Strings:list)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s.equals(&quot;b&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            list.remove(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>效果:这种for-each写法会报出著名的并发修改异常：</p><p><code>java.util.ConcurrentModificationException</code></p></li><li><p>原因：</p></li></ul><p>foreach写法是对实际的Iterable、hasNext、next方法的简写，问题同样处在上文的fastRemove方法中，可以看到第一行把modCount变量的值加一，但在ArrayList返回的迭代器（该代码在其父类AbstractList中）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">        return new Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里返回的是AbstractList类内部的迭代器实现private class Itr implements Iterator，看这个类的next方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public E next() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        try &#123;</span><br><span class="line">            E next = get(cursor);</span><br><span class="line">            lastRet = cursor++;</span><br><span class="line">            return next;</span><br><span class="line">        &#125; catch (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checkForComodification方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final void checkForComodification() &#123;</span><br><span class="line">        if (modCount != expectedModCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里会做迭代器内部修改次数检查，因为上面的remove(Object)方法修改了modCount的值，所以才会报出并发修改异常。</strong></p><ul><li>针对这种情况可以在使用迭代器迭代时（显示或for-each的隐式）不要使用ArrayList的remove,改为用<code>Iterator的remove</code>的方式来避免:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void remove(ArrayList&lt;String&gt; list) </span><br><span class="line">    &#123;</span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        while (it.hasNext()) </span><br><span class="line">        &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            if (s.equals(&quot;b&quot;)) </span><br><span class="line">            &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速初始化list和map</title>
      <link href="/2019/09/06/jihe3/"/>
      <url>/2019/09/06/jihe3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_38750084/article/details/86640647" target="_blank" rel="noopener"><strong>参考详解链接</strong></a></p><blockquote><p>List</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">               add(<span class="string">"周一"</span>);</span><br><span class="line">               add(<span class="string">"周五"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        System.out.println(<span class="string">"list=="</span>+list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>Map</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="keyword">new</span> HashMap&lt;String, Object&gt;()&#123;</span><br><span class="line">            &#123;</span><br><span class="line">               put(<span class="string">"上班"</span>, <span class="string">"不开心"</span>);</span><br><span class="line">               put(<span class="string">"下班"</span>, <span class="string">"开心"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对List集合中的元素进行排序</title>
      <link href="/2019/09/06/jihe1/"/>
      <url>/2019/09/06/jihe1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/veryisjava/article/details/51675036" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><blockquote><p><strong>场景</strong></p></blockquote><p>有时候需要对集合中的元素按照一定的规则进行排序，这就需要用到Java中提供的对集合进行操作的工具类Collections，其中的sort方法</p><blockquote><p><strong>实践</strong></p></blockquote><ul><li>简单的例子:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        nums.add(<span class="number">3</span>);</span><br><span class="line">        nums.add(<span class="number">5</span>);</span><br><span class="line">        nums.add(<span class="number">1</span>);</span><br><span class="line">        nums.add(<span class="number">0</span>);</span><br><span class="line">        System.out.println(nums);    <span class="comment">//[3, 5, 1, 0]</span></span><br><span class="line">        Collections.sort(nums);</span><br><span class="line">        System.out.println(nums);    <span class="comment">//[0, 1, 3, 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>复杂例子(list里装有对象):</li></ul><p>1.Collections提供的第一种排序方法Comparable&lt;T&gt;  compareTo()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> core.java.collection.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> score, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="keyword">this</span>.getAge() - o.getAge();<span class="comment">//先按照年龄排序</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.score - o.getScore();<span class="comment">//如果年龄相等了再用分数进行排序</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">78</span>, <span class="number">26</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">67</span>, <span class="number">23</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">34</span>, <span class="number">56</span>));</span><br><span class="line">        users.add(<span class="keyword">new</span> User(<span class="number">55</span>, <span class="number">23</span>));</span><br><span class="line">        Collections.sort(users);</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            System.out.print(user.getScore() + <span class="string">","</span> + user.getAge()+<span class="string">"\t\t"</span>);</span><br><span class="line">            <span class="comment">//输出结果：55,23  67,23  78,26  34,56</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现sort(List&lt;T&gt;)方法中List中的T<code>必须实现Comparable&lt;T&gt;接口</code>，然后实现<code>compareTo()</code>方法，该方法的返回值0代表相等，1表示大于，-1表示小于;为什么在简单例子中没有看到实现Comparable接口呢？是因为Integer类其实自己已经实现了Comparable接口,Java已经给我们做好了。</p><p>2.Collections提供的第二种排序方法sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> core.java.collection.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Students&gt; students = <span class="keyword">new</span> ArrayList&lt;Students&gt;();</span><br><span class="line">        students.add(<span class="keyword">new</span> Students(<span class="number">23</span>, <span class="number">100</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Students(<span class="number">27</span>, <span class="number">98</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Students(<span class="number">29</span>, <span class="number">99</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Students(<span class="number">29</span>, <span class="number">98</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Students(<span class="number">22</span>, <span class="number">89</span>));</span><br><span class="line">        Collections.sort(students, <span class="keyword">new</span> Comparator&lt;Students&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Students o1, Students o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> i = o1.getScore() - o2.getScore();</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Students stu : students)&#123;</span><br><span class="line">            System.out.print(<span class="string">"score:"</span> + stu.getScore() + <span class="string">":age"</span> + stu.getAge()+<span class="string">"\t\t"</span>);</span><br><span class="line">    <span class="comment">//输出结果： score:89:age22  score:98:age27  score:98:age29  score:99:age29  score:100:age23</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子我们可以看出Students类没有实现Comparable&lt;T&gt;接口，只是在sort()方法中多传入一个参数，只不过该参数是一个接口我们需要实现其<strong>compare</strong>方法。</p>]]></content>
      
      
      <categories>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Collections </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 常用配置</title>
      <link href="/2019/09/06/cykz/"/>
      <url>/2019/09/06/cykz/</url>
      
        <content type="html"><![CDATA[<h5 id="配置编码问题"><a href="#配置编码问题" class="headerlink" title="配置编码问题"></a>配置编码问题</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%871.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%872.png" alt></p><h5 id="显示工具栏以及工具按钮栏"><a href="#显示工具栏以及工具按钮栏" class="headerlink" title="显示工具栏以及工具按钮栏"></a>显示工具栏以及工具按钮栏</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8711.png" alt></p><h5 id="配置相关的工作空间"><a href="#配置相关的工作空间" class="headerlink" title="配置相关的工作空间"></a>配置相关的工作空间</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8712.png" alt></p><h5 id="重点理解项目class文件生成（运行打包编译文件存储路径）配置"><a href="#重点理解项目class文件生成（运行打包编译文件存储路径）配置" class="headerlink" title="重点理解项目class文件生成（运行打包编译文件存储路径）配置"></a>重点理解项目class文件生成（运行打包编译文件存储路径）配置</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8713.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8713-1.png" alt></p><h5 id="IDEA构建项目的时候默认生成的iml文件配置改成-classpath类型的文件"><a href="#IDEA构建项目的时候默认生成的iml文件配置改成-classpath类型的文件" class="headerlink" title="IDEA构建项目的时候默认生成的iml文件配置改成.classpath类型的文件"></a>IDEA构建项目的时候默认生成的iml文件配置改成.classpath类型的文件</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8714.png" alt></p><h5 id="IDEA中导入jar的源码"><a href="#IDEA中导入jar的源码" class="headerlink" title="IDEA中导入jar的源码"></a>IDEA中导入jar的源码</h5><p>如果是Maven项目的时候，自动默认下载源码包，如果是javaWeb或者简单的java项目，自定义加入的jar是没有源码的，这时候手动添加源码包。</p><a id="more"></a><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8715.png" alt></p><h5 id="设置工作空间中项目的相关的设置"><a href="#设置工作空间中项目的相关的设置" class="headerlink" title="设置工作空间中项目的相关的设置"></a>设置工作空间中项目的相关的设置</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8716.png" alt></p><h5 id="设置编码区字体的大小、字体类型、代码行距距离等"><a href="#设置编码区字体的大小、字体类型、代码行距距离等" class="headerlink" title="设置编码区字体的大小、字体类型、代码行距距离等"></a>设置编码区字体的大小、字体类型、代码行距距离等</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8717-1.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8717-2.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8717-3.png" alt>##### 工具按钮可以在区域范围中推动摆设</p><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8718.png" alt></p><h5 id="添加tomcat等服务设置"><a href="#添加tomcat等服务设置" class="headerlink" title="添加tomcat等服务设置"></a>添加tomcat等服务设置</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8719.png" alt></p><h5 id="DEDUG模式调试配置"><a href="#DEDUG模式调试配置" class="headerlink" title="DEDUG模式调试配置"></a>DEDUG模式调试配置</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8720-1.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8720-2.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8720-3.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8720-4.png" alt></p><h5 id="配置各种文件的生成模板"><a href="#配置各种文件的生成模板" class="headerlink" title="配置各种文件的生成模板"></a>配置各种文件的生成模板</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8721.png" alt></p><p>配置一个class文件成的模板</p><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8721-1.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8721-2.png" alt></p><h5 id="IDEA类和方法注释模板设置（非常详细）"><a href="#IDEA类和方法注释模板设置（非常详细）" class="headerlink" title="IDEA类和方法注释模板设置（非常详细）"></a><a href="https://blog.csdn.net/xiaoliulang0324/article/details/79030752" target="_blank" rel="noopener">IDEA类和方法注释模板设置（非常详细）</a></h5><h5 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8722-1.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8722-2.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8722-3.png" alt></p><h5 id="代码动态模板"><a href="#代码动态模板" class="headerlink" title="代码动态模板"></a>代码动态模板</h5><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8723.png" alt></p><p>例如：</p><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8723-2.png" alt></p><h5 id="控制台打印日志的各种级别的颜色配置"><a href="#控制台打印日志的各种级别的颜色配置" class="headerlink" title="控制台打印日志的各种级别的颜色配置"></a>控制台打印日志的各种级别的颜色配置<img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8724.png" alt></h5><h5 id="空格与tab缩进设置"><a href="#空格与tab缩进设置" class="headerlink" title="空格与tab缩进设置"></a>空格与tab缩进设置<img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8725-1.png" alt><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8725-2.png" alt></h5><h5 id="插件安装卸载配置"><a href="#插件安装卸载配置" class="headerlink" title="插件安装卸载配置"></a>插件安装卸载配置<img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8726.png" alt></h5><h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><p>Ctrl+N ：快速查找文件</p><p><img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8728.png" alt>Alt + F1 ：快速定位文件在那个位置<img src="/2019/09/06/cykz/%E5%9B%BE%E7%89%8728-1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具及技术 </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 快捷键</title>
      <link href="/2019/09/06/ideakuai-jie-jian/"/>
      <url>/2019/09/06/ideakuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left"><em><strong>*<u>编辑类</u></strong></em></th><th align="left"></th></tr></thead><tbody><tr><td align="left">Ctrl+Space</td><td align="left">基本代码实例（类、方法、变量）</td></tr><tr><td align="left">Ctrl + Shift + Space</td><td align="left">智能代码实例（根据需要的类型过滤方法和变量）</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">完整的声明(如有代码提示，自动获取第一个并在句尾加上分号结束。无提示，在此行下新增一行)</td></tr><tr><td align="left">Ctrl + P</td><td align="left">参数信息（在方法调用参数时使用）</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">Doc说明文档快速查看</td></tr><tr><td align="left">Shift + F1</td><td align="left">查看外部doc文档</td></tr><tr><td align="left">Ctrl +鼠标放在代码上面</td><td align="left">代码的简要doc说明（基本上是类或者方法的声明）</td></tr><tr><td align="left">Ctrl + F1</td><td align="left">查看光标所在处的错误或者警告的详细信息</td></tr><tr><td align="left">Alt + Insert</td><td align="left">生成代码（Getter、Setter、Constructors、hashCode…）</td></tr><tr><td align="left">Ctrl + O</td><td align="left">重写方法</td></tr><tr><td align="left">Ctrl + I</td><td align="left">实现方法</td></tr><tr><td align="left">Ctrl + Alt + T</td><td align="left">将光标所处行的代码用语句块（if…else、try…catch…）包围</td></tr><tr><td align="left">Ctrl + /</td><td align="left">注释/反注释光标所在行（自动换行）</td></tr><tr><td align="left">Ctrl + Shift + /</td><td align="left">注释/反注释代码块</td></tr><tr><td align="left">Ctrl + W</td><td align="left">递增地（代码块所包含的范围增大）选择连续的代码块</td></tr><tr><td align="left">Ctrl + Shift + W</td><td align="left">在用了Ctrl + W后，减小代码块所包含的范围</td></tr><tr><td align="left">Alt + Q</td><td align="left">上下文信息</td></tr><tr><td align="left">Alt + Enter</td><td align="left">显示意图动作和快速修复</td></tr><tr><td align="left">Ctrl + Alt + L</td><td align="left">代码格式化</td></tr><tr><td align="left">Ctrl + Alt + O</td><td align="left">优化Imports（去掉不必要的）</td></tr><tr><td align="left">Ctrl + Alt + I</td><td align="left">代码自动对齐</td></tr><tr><td align="left">Tab / Shift + Tab</td><td align="left">缩进/反缩进所选行</td></tr><tr><td align="left">Ctrl+X or Shift+Delete</td><td align="left">剪切行/代码块到剪贴板(默认全选一行)</td></tr><tr><td align="left">Ctrl+C or Ctrl+Insert</td><td align="left">复制行/代码块到剪贴板(默认全选一行)</td></tr><tr><td align="left">Ctrl+V or Shift+Insert</td><td align="left">粘贴剪贴板中的内容</td></tr><tr><td align="left">Ctrl+Shift + V</td><td align="left">粘贴剪贴板中缓存的内容</td></tr><tr><td align="left">Ctrl+D</td><td align="left">复制当前行/代码块的一个副本并插入到内容中</td></tr><tr><td align="left">Ctrl+Y</td><td align="left">删除光标所在行</td></tr><tr><td align="left">Ctrl+Shift + J</td><td align="left">智能行合并(在本行任何位置，自动删除本行的回车键和空格，将下一行字符连接到本行)</td></tr><tr><td align="left">Ctrl+Enter</td><td align="left">智能分行(和Enter键的区别：光标不动，在本行下面新增一行)</td></tr><tr><td align="left">Shift + Enter</td><td align="left">开始新的一行(相当于在行末按Enter键)</td></tr><tr><td align="left">Ctrl + Shift + U</td><td align="left">变换光标所在处/代码块的字母的大小写状态</td></tr><tr><td align="left">Ctrl + Shift + ] / [</td><td align="left">从光标处在处开始选择到最近] / [的代码块</td></tr><tr><td align="left">Ctrl + Delete</td><td align="left">删除光标后的一个单词</td></tr><tr><td align="left">Ctrl + Backspace</td><td align="left">删除光标前的一个单词</td></tr><tr><td align="left">Ctrl + NumPad+/-</td><td align="left">展开/收缩代码块</td></tr><tr><td align="left">Ctrl + Shift+数字键盘的+</td><td align="left">展开所有代码块</td></tr><tr><td align="left">Ctrl + Shift+数字键盘的-</td><td align="left">折叠所有代码块</td></tr><tr><td align="left">Ctrl + F4</td><td align="left">关闭当前tab页</td></tr><tr><td align="left">*<em><strong><u>搜索和替换</u></strong></em></td><td align="left"></td></tr><tr><td align="left">双击Shift</td><td align="left">万能搜索</td></tr><tr><td align="left">Ctrl + F</td><td align="left">查找</td></tr><tr><td align="left">F3</td><td align="left">查找下一个</td></tr><tr><td align="left">Shift + F3</td><td align="left">查找上一个</td></tr><tr><td align="left">Ctrl + R</td><td align="left">替换</td></tr><tr><td align="left">Ctrl + Shift + F</td><td align="left">在指定路径中的文件中查找内容</td></tr><tr><td align="left">Ctrl + Shift + R</td><td align="left">在指定路径中的文件中替换内容</td></tr><tr><td align="left">Ctrl + Shift + S</td><td align="left">Search structurally (Ultimate Edition only)</td></tr><tr><td align="left">Ctrl + Shift + M</td><td align="left">Replace structurally (Ultimate Edition only)</td></tr><tr><td align="left"><em><strong>*<u>代码方法/变量使用处搜索</u></strong></em></td><td align="left"></td></tr><tr><td align="left">Alt + F7</td><td align="left">查找当前文件变量/方法的使用处</td></tr><tr><td align="left">Ctrl+F7</td><td align="left">查找当前项目变量/方法的使用处</td></tr><tr><td align="left">Ctrl +Shift+ F7</td><td align="left">高亮显示变量/方法名在当前文件的所有使用处</td></tr><tr><td align="left">Ctrl + Alt + F7</td><td align="left">弹窗显示变量/方法名在当前文件的使用处列表</td></tr><tr><td align="left"><em><strong>*<u>编译和运行</u></strong></em></td><td align="left"></td></tr><tr><td align="left">Ctrl + F9</td><td align="left">Make项目(修改编译和依赖)</td></tr><tr><td align="left">Ctrl + Shift + F9</td><td align="left">编译文件、包或者模块</td></tr><tr><td align="left">Alt + Shift + F10</td><td align="left">选择配置并运行</td></tr><tr><td align="left">Alt + Shift + F9</td><td align="left">选择配置并调试</td></tr><tr><td align="left">Shift + F10</td><td align="left">运行</td></tr><tr><td align="left">Shift + F9</td><td align="left">调试</td></tr><tr><td align="left">Ctrl + Shift + F10</td><td align="left">配置编辑器运行环境</td></tr><tr><td align="left">*<em><strong><u>调式</u></strong></em></td><td align="left">调试：</td></tr><tr><td align="left">F8</td><td align="left">Step over (步越：越过子函数，但子函数会执行)</td></tr><tr><td align="left">F7</td><td align="left">Step into (步进：进入子函数)</td></tr><tr><td align="left">Shift + F7</td><td align="left">Smart step into(智能步进)</td></tr><tr><td align="left">Shift + F8</td><td align="left">Step out (跳出：跳出子函数)</td></tr><tr><td align="left">Alt + F9</td><td align="left">Run to cursor (运行到光标处)</td></tr><tr><td align="left">Alt + F8</td><td align="left">Evaluate expression (计算表达式)</td></tr><tr><td align="left">F9</td><td align="left">Resume program (恢复程序)</td></tr><tr><td align="left">Ctrl + F8</td><td align="left">Toggle breakpoint (切换断点)</td></tr><tr><td align="left">Ctrl + Shift + F8</td><td align="left">View breakpoints (查看断点)</td></tr><tr><td align="left"><em><strong>*<u>导航</u></strong></em></td><td align="left"></td></tr><tr><td align="left">Ctrl + N</td><td align="left">跳转到某个类文件</td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="left">跳转到某个文件</td></tr><tr><td align="left">Ctrl + Alt + Shift + N</td><td align="left">跳转到某个标识符处，包括类名，方法，变量</td></tr><tr><td align="left">Alt + 左/右 箭头</td><td align="left">切换到左边/右边的编辑标签</td></tr><tr><td align="left">F12</td><td align="left">打开上一次打开的工具窗口</td></tr><tr><td align="left">Esc</td><td align="left">从工具窗口回到编辑窗口</td></tr><tr><td align="left">Shift + Esc</td><td align="left">隐藏活动的工具窗口并回到编辑窗口中</td></tr><tr><td align="left">Ctrl+Shift+F4</td><td align="left">关闭活动的run/messages/find/…窗口</td></tr><tr><td align="left">Ctrl+G</td><td align="left">跳转到某行</td></tr><tr><td align="left">Ctrl+E</td><td align="left">弹出一个菜单，上面包含最近打开的文件和工具窗</td></tr><tr><td align="left">Ctrl+Alt + 向左/向右 箭头</td><td align="left">跳转到上一个/下一个</td></tr><tr><td align="left">Ctrl+Shift+Backspace</td><td align="left">跳转到上一次做出修改的地方</td></tr><tr><td align="left">Alt + F1</td><td align="left">实际应该是快捷菜单栏吧</td></tr><tr><td align="left">Ctrl + B or Ctrl + Click</td><td align="left">跳转到方法或者变量的声明处</td></tr><tr><td align="left">Ctrl + Alt + B</td><td align="left">跳转到implements方法或者接口的地方</td></tr><tr><td align="left">Ctrl + Shift + I</td><td align="left">打开类/方法/变量的文档说明窗口</td></tr><tr><td align="left">Ctrl + Shift + B</td><td align="left">查看类型的声明 (例如：定义一个String字符串，将跳到String类中)</td></tr><tr><td align="left">Ctrl + U</td><td align="left">跳转到super-method/super-class处</td></tr><tr><td align="left">Alt + Up/Down</td><td align="left">跳转到上一个/下一个方法的第一行处</td></tr><tr><td align="left">Ctrl + ] / [</td><td align="left">移动光标到最近的] / [位置</td></tr><tr><td align="left">Ctrl + F12</td><td align="left">弹出文件的结构窗口 (方法、常量等)</td></tr><tr><td align="left">Ctrl + H</td><td align="left">光标所在处的方法所属的类的继承层级制度</td></tr><tr><td align="left">Ctrl + Shift + H</td><td align="left">方法的层级制度</td></tr><tr><td align="left">Ctrl + Alt + H</td><td align="left">方法调用的层级制度</td></tr><tr><td align="left">F2 / Shift + F2</td><td align="left">跳转到下一个/上一个错误处并高亮显示</td></tr><tr><td align="left">F4 / Ctrl + Enter</td><td align="left">查看/改变源代码(Ctrl + Enter功能键冲突)</td></tr><tr><td align="left">Alt + Home</td><td align="left">打开路径导航条</td></tr><tr><td align="left">F11</td><td align="left">设置/取消书签</td></tr><tr><td align="left">Ctrl + F11</td><td align="left">设置带数字/字母编号的书签</td></tr><tr><td align="left">Ctrl + #[0-9]</td><td align="left">跳转到[0-9]编号的书签处</td></tr><tr><td align="left">Shift + F11</td><td align="left">在弹出窗口中显示所有的书签</td></tr><tr><td align="left"><em><strong>*<u>重构</u></strong></em></td><td align="left"></td></tr><tr><td align="left">F5</td><td align="left">复制</td></tr><tr><td align="left">F6</td><td align="left">移动</td></tr><tr><td align="left">Alt + Delete</td><td align="left">安全删除</td></tr><tr><td align="left">Shift + F6</td><td align="left">重命名 (批量)</td></tr><tr><td align="left">Ctrl + F6</td><td align="left">修改方法(修饰符、方法名、参数列表、返回值、异常等)</td></tr><tr><td align="left">Ctrl + Alt + N</td><td align="left">内嵌(可以将变量替换为其他内容)</td></tr><tr><td align="left">Ctrl + Alt + M</td><td align="left">提取成方法</td></tr><tr><td align="left">Ctrl + Alt + V</td><td align="left">提取成变量</td></tr><tr><td align="left">Ctrl + Alt + F</td><td align="left">提取成字段</td></tr><tr><td align="left">Ctrl + Alt + C</td><td align="left">提取成常量</td></tr><tr><td align="left">Ctrl + Alt + P</td><td align="left">提取成参数</td></tr><tr><td align="left"><em><strong>*<u>版本控制和本地历史</u>(VCS/Local History)</strong></em></td><td align="left"></td></tr><tr><td align="left">Ctrl + K</td><td align="left">提交项目到vcs</td></tr><tr><td align="left">Ctrl + T</td><td align="left">从vcs中更新项目</td></tr><tr><td align="left">Alt + Shift + C</td><td align="left">查看最近更新</td></tr><tr><td align="left">Alt + ` (反引号)</td><td align="left">vcs快速设置弹出菜单</td></tr><tr><td align="left"><em><strong><u>*Live模板</u></strong></em></td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + J</td><td align="left">用Live模板包围光标所在行的代码</td></tr><tr><td align="left">Ctrl + J</td><td align="left">插入Live模板</td></tr><tr><td align="left">iter</td><td align="left">使用JDK1.5风格迭代容器</td></tr><tr><td align="left">inst</td><td align="left">用instanceof检查对你的类型并向下转换对象</td></tr><tr><td align="left">itco</td><td align="left">遍历java.util.Collection集合的元素</td></tr><tr><td align="left">itit</td><td align="left">遍历java.util.Iterator集合的元素</td></tr><tr><td align="left">itli</td><td align="left">遍历java.util.List集合的元素</td></tr><tr><td align="left">psf</td><td align="left">public static final</td></tr><tr><td align="left">thr</td><td align="left">throw new</td></tr><tr><td align="left"></td><td align="left">更多Live模板查看：Settings—Editor—Live Templates</td></tr><tr><td align="left"><em><strong>*<u>通用快捷键</u></strong></em></td><td align="left"></td></tr><tr><td align="left">Alt + #[0-9]</td><td align="left">打开相对应的工具窗口</td></tr><tr><td align="left">Ctrl + S</td><td align="left">保存全部</td></tr><tr><td align="left">Ctrl + Alt + Y</td><td align="left">同步</td></tr><tr><td align="left">Ctrl + Shift + F12</td><td align="left">编辑器最大化</td></tr><tr><td align="left">Alt + Shift + F</td><td align="left">添加到最喜欢</td></tr><tr><td align="left">Alt + Shift + I</td><td align="left">根据当前配置文件审查当前文件</td></tr><tr><td align="left">Ctrl + BackQuote (`)</td><td align="left">快速切换代码颜色主题</td></tr><tr><td align="left">Ctrl + Alt + S</td><td align="left">打开设置</td></tr><tr><td align="left">Ctrl + Alt + Shift + S</td><td align="left">打开项目结构对话框，在这里可以删除模块</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">在已打开的文件和工具窗口之间切换</td></tr><tr><td align="left">Ctrl + Shift + A</td><td align="left">查找所有快捷操作（基本所有的动作在这里都可以找到）</td></tr><tr><td align="left">Ctrl+Z</td><td align="left">撤销</td></tr><tr><td align="left">Ctrl+Shift+Z</td><td align="left">恢复Ctrl+Z掉的内容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具及技术 </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将集合转换成字符串(反之)</title>
      <link href="/2019/09/06/jihe2/"/>
      <url>/2019/09/06/jihe2/</url>
      
        <content type="html"><![CDATA[<h3 id="将集合转换成字符串"><a href="#将集合转换成字符串" class="headerlink" title="将集合转换成字符串"></a>将集合转换成字符串</h3><p>StringUtils工具类下的join()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;aa&quot;);</span><br><span class="line">list.add(&quot;bb&quot;);</span><br><span class="line">list.add(&quot;cc&quot;);</span><br><span class="line">System.out.println(list);</span><br><span class="line">// 将集合转换成字符串</span><br><span class="line">String str = StringUtils.join(list, &quot;,&quot;);</span><br><span class="line">//打印出字符串</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用join()方法时，要传两个参数，一个是要转换的集合list，一个是要用符号分开的分隔符，这样利用工具类就会自动转换成“,”分隔的字符串形式。</p><h3 id="字符串转换成集合"><a href="#字符串转换成集合" class="headerlink" title="字符串转换成集合"></a>字符串转换成集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">public class Test1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  String str=&quot;aa,bb,cc&quot;; </span><br><span class="line">//用逗号将字符串分开，得到字符串数组 String[]</span><br><span class="line">  String[] strs=str.split(&quot;,&quot;); </span><br><span class="line"> //将字符串数组转换成集合list </span><br><span class="line">  List&lt;String&gt; list = Arrays.asList(strs);</span><br><span class="line">  //打印出集合</span><br><span class="line">  System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：包的导入！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA下lombok安装,@Data get,set找不到的问题</title>
      <link href="/2019/09/06/exception1/"/>
      <url>/2019/09/06/exception1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xzp_12345/article/details/80268834" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><blockquote><h5 id="Idea下安装lombok-需要两步"><a href="#Idea下安装lombok-需要两步" class="headerlink" title="Idea下安装lombok(需要两步)"></a>Idea下安装lombok(需要两步)</h5></blockquote><h6 id="第一步：-pom-xml中加入lombok依赖包"><a href="#第一步：-pom-xml中加入lombok依赖包" class="headerlink" title="第一步： pom.xml中加入lombok依赖包"></a>第一步： pom.xml中加入lombok依赖包</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.16.20&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="第二步：加入lombok插件"><a href="#第二步：加入lombok插件" class="headerlink" title="第二步：加入lombok插件"></a>第二步：加入lombok插件</h6><p>步骤：File ——》Settings——》Plugins.    搜索lombok，点击安装install。然后会提示重启，重启。</p><p><img src="/2019/09/06/exception1/q1.png" alt></p><blockquote><h5 id="解决编译时无法找到set和get-的问题"><a href="#解决编译时无法找到set和get-的问题" class="headerlink" title="解决编译时无法找到set和get 的问题"></a>解决编译时无法找到set和get 的问题</h5></blockquote><ul><li><h6 id="IDEA的编译方式选项错误，应该是javac，而不是eclipse。"><a href="#IDEA的编译方式选项错误，应该是javac，而不是eclipse。" class="headerlink" title="IDEA的编译方式选项错误，应该是javac，而不是eclipse。"></a>IDEA的编译方式选项错误，应该是javac，而不是eclipse。</h6></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为eclipse是不支持lombok的编译方式的，javac支持lombok的编译方式。</span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/exception1/q3.png" alt></p><h6 id="没有打开注解生成器Enable-annotation-processing"><a href="#没有打开注解生成器Enable-annotation-processing" class="headerlink" title="没有打开注解生成器Enable annotation processing"></a>没有打开注解生成器Enable annotation processing</h6><p><img src="/2019/09/06/exception1/q2.png" alt></p><h6 id="pom-xml中加入的lombok依赖包版本和自动安装的plugin中的lombok依赖包版本不一致"><a href="#pom-xml中加入的lombok依赖包版本和自动安装的plugin中的lombok依赖包版本不一致" class="headerlink" title="pom.xml中加入的lombok依赖包版本和自动安装的plugin中的lombok依赖包版本不一致"></a>pom.xml中加入的lombok依赖包版本和自动安装的plugin中的lombok依赖包版本不一致</h6><p>因为我们添加的lombok插件plugin，点击insall时是自动安装的最新版本的lombok。</p><p>但是在pom.xml中的依赖包是maven中的低1.16.20的一个依赖包，版本不一致，造成了无法找到set和get.</p>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>您的主机中的软件中止了一个已建立的连接</title>
      <link href="/2019/09/06/exception/"/>
      <url>/2019/09/06/exception/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/wujiandao000/article/details/79068100" target="_blank" rel="noopener"><strong>参考链接</strong></a></p><ul><li><strong>异常显示</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.connector.ClientAbortException: java.io.IOException: 您的主机中的软件中止了一个已建立的连接。</span><br><span class="line">    at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:396)</span><br><span class="line">    at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426)</span><br><span class="line">    at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:345)</span><br><span class="line">    at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:320)</span><br><span class="line">    at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:110)</span><br><span class="line">    at com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush(UTF8JsonGenerator.java:1022)</span><br><span class="line">    at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:2376)</span><br><span class="line">    at ······</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>原因</strong></li></ul><p>在tomcat中出现这个错误是由于客户端在发送请求后，还没等服务器响应就断开了连接，有可能是因为网络原因，突然网断了，但是如果错误频繁出现的话，可能就是服务端的问题了。</p><p>tomcat中配置了一个连接超时时间<code>connectionTimeout,</code>如果在这个时间之后客户端还未得到服务器端的响应的话,就会<strong>主动断开连接,</strong>这样就会出现上述异常了,tomcat中默认的连接超时时间是20秒,我们一般最好设置为60秒,从而避免后台程序处理时间长导致连接断开</p><ul><li><strong>解决方法</strong></li></ul><p>可以通过设置tomcat下conf文件夹的server.xml文件，对请求连接数和请求超时时间进行设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;   </span><br><span class="line">              connectionTimeout=&quot;60000&quot;   </span><br><span class="line">              redirectPort=&quot;8443&quot; acceptCount=&quot;500&quot; maxThreads=&quot;400&quot; /&gt;</span><br></pre></td></tr></table></figure><p>connectionTimeout以毫秒为单位，默认设置为20秒。通过修改该参数，可以修改tomcat的请求超时时间为60秒。</p><p><strong>关于修改最大并发请求连接数，需要修改</strong><code>maxThreads</code><strong>和</strong><code>acceptCount</code><strong>两个参数。</strong></p><p>其中，maxThreads的介绍如下：</p><blockquote><p>The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool.</p></blockquote><p>此连接器要创建的请求处理线程的最大数量，因此决定可以处理的并发请求的最大数量。如果没有指定，则将此属性设置为200。如果执行器与此连接器关联，则忽略此属性，因为连接器将使用执行器而不是内部线程池执行任务。</p><p>而acceptCount的介绍为：</p><blockquote><p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p></blockquote><p>使用所有可能的请求处理线程时传入连接请求的最大队列长度。队列满时接收到的任何请求都将被拒绝。默认值是100。</p><ul><li>所以两者的默认值分别是200和100，要调整Tomcat的默认最大连接数，可以增加这两个属性的值，并且使acceptCount大于等于maxThreads。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Exception </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
